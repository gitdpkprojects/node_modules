{"version":3,"file":null,"sources":["src/legend.js","src/color.js","src/size.js","src/symbol.js","src/helpers.js","index.js"],"sourcesContent":["const d3_identity =  (d) => d\n\nconst d3_reverse = (arr) => {\n  const mirror = [];\n  for (let i = 0, l = arr.length; i < l; i++) {\n    mirror[i] = arr[l-i-1];\n  }\n  return mirror;\n}\n\nconst d3_mergeLabels = (gen=[], labels, domain, range) => {\n\n    if (typeof labels === \"object\"){\n      if(labels.length === 0) return gen;\n\n      let i = labels.length;\n      for (; i < gen.length; i++) {\n        labels.push(gen[i]);\n      }\n      return labels;\n    } else if (typeof labels === \"function\") {\n      const customLabels = []\n      const genLength = gen.length\n      for (let i=0; i < genLength; i++){\n        customLabels.push(labels({\n          i,\n          genLength,\n          generatedLabels : gen,\n          domain,\n          range }))\n      }\n      return customLabels\n    }\n\n    return gen;\n  }\n\nconst d3_linearLegend = (scale, cells, labelFormat) => {\n  let data = [];\n\n  if (cells.length > 1){\n    data = cells;\n\n  } else {\n    const domain = scale.domain(),\n    increment = (domain[domain.length - 1] - domain[0])/(cells - 1)\n    let i = 0;\n\n    for (; i < cells; i++){\n      data.push(domain[0] + i*increment);\n    }\n  }\n\n  const labels = data.map(labelFormat);\n\n  return {data: data,\n          labels: labels,\n          feature: d => scale(d)};\n}\n\nconst d3_quantLegend = (scale, labelFormat, labelDelimiter) => {\n  const labels = scale.range().map( d => {\n    const invert = scale.invertExtent(d);\n    return labelFormat(invert[0]) + \" \" + labelDelimiter + \" \" + labelFormat(invert[1]);\n  });\n\n  return {data: scale.range(),\n          labels: labels,\n          feature: d3_identity\n        };\n}\n\nconst d3_ordinalLegend= scale => ({data: scale.domain(),\n          labels: scale.domain(),\n          feature: d => scale(d) }\n)\n\nconst d3_cellOver = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellover\", obj, d);\n}\n\nconst d3_cellOut = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellout\", obj, d);\n}\n\nconst d3_cellClick = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellclick\", obj, d);\n}\n\n\nexport default {\n\n  d3_drawShapes: (shape, shapes, shapeHeight, shapeWidth, shapeRadius, path) => {\n    if (shape === \"rect\"){\n        shapes.attr(\"height\", shapeHeight).attr(\"width\", shapeWidth);\n\n    } else if (shape === \"circle\") {\n        shapes.attr(\"r\", shapeRadius)//.attr(\"cx\", shapeRadius).attr(\"cy\", shapeRadius);\n\n    } else if (shape === \"line\") {\n        shapes.attr(\"x1\", 0).attr(\"x2\", shapeWidth).attr(\"y1\", 0).attr(\"y2\", 0);\n\n    } else if (shape === \"path\") {\n      shapes.attr(\"d\", path);\n    }\n  },\n\n  d3_addText: function (svg, enter, labels, classPrefix){\n    enter.append(\"text\").attr(\"class\", classPrefix + \"label\");\n    svg.selectAll(`g.${classPrefix}cell text.${classPrefix}label`).data(labels).text(d3_identity);\n  },\n\n  d3_calcType: function (scale, ascending, cells, labels, labelFormat, labelDelimiter){\n    const type = scale.invertExtent ?\n            d3_quantLegend(scale, labelFormat, labelDelimiter) : scale.ticks ?\n            d3_linearLegend(scale, cells, labelFormat) : d3_ordinalLegend(scale);\n\n    type.labels = d3_mergeLabels(type.labels, labels, scale.domain(), scale.range());\n\n    if (ascending) {\n      type.labels = d3_reverse(type.labels);\n      type.data = d3_reverse(type.data);\n    }\n\n    return type;\n  },\n\n  d3_placement: (orient, cell, cellTrans, text, textTrans, labelAlign) => {\n    cell.attr(\"transform\", cellTrans);\n    text.attr(\"transform\", textTrans);\n    if (orient === \"horizontal\"){\n      text.style(\"text-anchor\", labelAlign);\n    }\n  },\n\n  d3_addEvents: function(cells, dispatcher){\n      cells.on(\"mouseover.legend\", function (d) { d3_cellOver(dispatcher, d, this); })\n          .on(\"mouseout.legend\", function (d) { d3_cellOut(dispatcher, d, this); })\n          .on(\"click.legend\", function (d) { d3_cellClick(dispatcher, d, this); });\n  },\n\n  d3_title: (svg, title, classPrefix) => {\n    if (title !== \"\"){\n\n      const titleText = svg.selectAll('text.' + classPrefix + 'legendTitle');\n\n      titleText.data([title])\n        .enter()\n        .append('text')\n        .attr('class', classPrefix + 'legendTitle');\n\n        svg.selectAll('text.' + classPrefix + 'legendTitle')\n            .text(title)\n\n      const cellsSvg = svg.select('.' + classPrefix + 'legendCells')\n\n      const yOffset = svg.select('.' + classPrefix + 'legendTitle').nodes()\n          .map(d => d.getBBox().height)[0],\n      xOffset = -cellsSvg.nodes().map(function(d) { return d.getBBox().x})[0];\n\n      cellsSvg.attr('transform', 'translate(' + xOffset + ',' + (yOffset + 10) + ')');\n\n    }\n  }\n}\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\n\nexport default function color(){\n\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 2,\n    cells = [5],\n    labels = [],\n    classPrefix = \"\",\n    useClass = false,\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = \"to\",\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n    function legend(svg){\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n\n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, path);\n\n\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      // sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map( d => d.getBBox());\n      //sets scale\n      //everything is fill except for line which is stroke,\n      if (!useClass){\n        if (shape == \"line\"){\n          shapes.style(\"stroke\", type.feature);\n        } else {\n          shapes.style(\"fill\", type.feature);\n        }\n      } else {\n        shapes.attr(\"class\", d => `${classPrefix}swatch ${type.feature(d)}`);\n      }\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n        cellTrans = (d,i) => `translate(0, ${i * (shapeSize[i].height + shapePadding)})`;\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width + shapeSize[i].x +\n          labelOffset)}, ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => `translate(${(i * (shapeSize[i].width + shapePadding))},0)`\n        textTrans = (d,i) => `translate(${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n          ${(shapeSize[i].height + shapeSize[i].y + labelOffset + 8)})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix);\n\n      cell.transition().style(\"opacity\", 1);\n\n    }\n\n\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n\n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape;\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" || (_ == \"path\" && (typeof d === 'string')) ){\n      shape = _;\n      path = d;\n    }\n    return legend;\n  };\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth;\n    shapeWidth = +_;\n    return legend;\n  };\n\n  legend.shapeHeight = function(_) {\n    if (!arguments.length) return shapeHeight;\n    shapeHeight = +_;\n    return legend;\n  };\n\n  legend.shapeRadius = function(_) {\n    if (!arguments.length) return shapeRadius;\n    shapeRadius = +_;\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.useClass = function(_) {\n    if (!arguments.length) return useClass;\n    if (_ === true || _ === false){\n      useClass = _;\n    }\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\nimport { sum, max } from 'd3-array';\n\nexport default function size(){\n\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapePadding = 2,\n    cells = [5],\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = \"to\",\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n    function legend(svg){\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n\n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      //creates shape\n      if (shape === \"line\"){\n        helper.d3_drawShapes(shape, shapes, 0, shapeWidth);\n        shapes.attr(\"stroke-width\", type.feature);\n      } else {\n        helper.d3_drawShapes(shape, shapes, type.feature, type.feature, type.feature, path);\n      }\n\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      //sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map(\n          (d, i) => {\n            const bbox = d.getBBox()\n            const stroke = scale(type.data[i]);\n\n            if (shape === \"line\" && orient === \"horizontal\") {\n              bbox.height = bbox.height + stroke;\n            } else if (shape === \"line\" && orient === \"vertical\"){\n              bbox.width = bbox.width;\n            }\n\n            return bbox;\n        });\n\n      const maxH = max(shapeSize, d => d.height + d.y),\n      maxW = max(shapeSize, d => d.width + d.x);\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n\n        cellTrans = (d,i) => {\n            const height = sum(shapeSize.slice(0, i + 1 ), d => d.height);\n            return `translate(0, ${(height + i*shapePadding)})`};\n\n        textTrans = (d,i) => `translate( ${(maxW + labelOffset)},\n          ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => {\n            const width = sum(shapeSize.slice(0, i + 1 ), d => d.width);\n            return `translate(${(width + i*shapePadding)},0)`; };\n\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n              ${(maxH + labelOffset )})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix);\n\n      cell.transition().style(\"opacity\", 1);\n\n    }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n\n\n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape;\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\" ){\n      shape = _;\n      path = d;\n    }\n    return legend;\n  };\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth;\n    shapeWidth = +_;\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","import helper from './legend';\nimport { dispatch } from 'd3-dispatch';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\nimport { max } from 'd3-array';\n\nexport default function symbol(){\n\n  let scale = scaleLinear(),\n    shape = \"path\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 5,\n    cells = [5],\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    labelFormat = format(\".01f\"),\n    labelAlign = \"middle\",\n    labelOffset = 10,\n    labelDelimiter = \"to\",\n    orient = \"vertical\",\n    ascending = false,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\");\n\n    function legend(svg){\n\n      const type = helper.d3_calcType(scale, ascending, cells, labels, labelFormat, labelDelimiter),\n        legendG = svg.selectAll('g').data([scale]);\n\n      legendG.enter().append('g').attr('class', classPrefix + 'legendCells');\n\n      let cell = svg.select('.' + classPrefix + 'legendCells')\n          .selectAll(\".\" + classPrefix + \"cell\").data(type.data)\n      const cellEnter = cell.enter().append(\"g\")\n          .attr(\"class\", classPrefix + \"cell\")\n      cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n      const shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape);\n\n      //add event handlers\n      helper.d3_addEvents(cellEnter, legendDispatcher);\n\n      //remove old shapes\n      cell.exit().transition().style(\"opacity\", 0).remove();\n\n      helper.d3_drawShapes(shape, shapes, shapeHeight, shapeWidth, shapeRadius, type.feature);\n      helper.d3_addText( svg, cellEnter, type.labels, classPrefix)\n\n      // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n      cell = cellEnter.merge(cell);\n\n      // sets placement\n      const text = cell.selectAll(\"text\"),\n        shapeSize = shapes.nodes().map( d => d.getBBox());\n\n      const maxH = max(shapeSize, d => d.height),\n      maxW = max(shapeSize, d => d.width);\n\n      let cellTrans,\n      textTrans,\n      textAlign = (labelAlign == \"start\") ? 0 : (labelAlign == \"middle\") ? 0.5 : 1;\n\n      //positions cells and text\n      if (orient === \"vertical\"){\n        cellTrans = (d,i) => `translate(0, ${(i * (maxH + shapePadding))} )`;\n        textTrans = (d,i) => `translate( ${(maxW + labelOffset)},\n              ${(shapeSize[i].y + shapeSize[i].height/2 + 5)})`;\n\n      } else if (orient === \"horizontal\"){\n        cellTrans = (d,i) => `translate( ${(i * (maxW + shapePadding))},0)`;\n        textTrans = (d,i) => `translate( ${(shapeSize[i].width*textAlign  + shapeSize[i].x)},\n              ${(maxH + labelOffset )})`;\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign);\n      helper.d3_title(svg, title, classPrefix);\n      cell.transition().style(\"opacity\", 1);\n\n    }\n\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale;\n    scale = _;\n    return legend;\n  };\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells;\n    if (_.length > 1 || _ >= 2 ){\n      cells = _;\n    }\n    return legend;\n  };\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding;\n    shapePadding = +_;\n    return legend;\n  };\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels;\n    labels = _;\n    return legend;\n  };\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign;\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _;\n    }\n    return legend;\n  };\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return labelFormat;\n    labelFormat = typeof(_) === 'string' ? format(_) : _;\n    return legend;\n  };\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset;\n    labelOffset = +_;\n    return legend;\n  };\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter;\n    labelDelimiter = _;\n    return legend;\n  };\n\n  legend.orient = function(_){\n    if (!arguments.length) return orient;\n    _ = _.toLowerCase();\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _;\n    }\n    return legend;\n  };\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending;\n    ascending = !!_;\n    return legend;\n  };\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix;\n    classPrefix = _;\n    return legend;\n  };\n\n  legend.title = function(_) {\n    if (!arguments.length) return title;\n    title = _;\n    return legend;\n  };\n\n  legend.on = function(){\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value;\n  }\n\n  return legend;\n\n};\n","export const thresholdLabels = function({ i, genLength, generatedLabels }){\n\n  if (i === 0 ){\n    return generatedLabels[i].replace('NaN to', 'Less than')\n  } else if (i === genLength - 1) {\n    return `More than ${generatedLabels[genLength - 1].replace(' to NaN', '')}`\n  }\n  return generatedLabels[i]\n}\n\nexport default {\n  thresholdLabels\n}\n","import legendColor from './src/color'\nimport legendSize from './src/size'\nimport legendSymbol from './src/symbol'\nimport legendHelpers from './src/helpers'\n\nexport { legendColor, legendSize, legendSymbol, legendHelpers }\n\nexport default {\n  legendColor,\n  legendSize,\n  legendSymbol,\n  legendHelpers\n};\n"],"names":["d3_identity","d","d3_reverse","arr","mirror","i","l","length","d3_mergeLabels","gen","labels","domain","range","push","customLabels","genLength","generatedLabels","d3_linearLegend","scale","cells","labelFormat","data","increment","map","feature","d3_quantLegend","labelDelimiter","invert","invertExtent","d3_ordinalLegend","d3_cellOver","cellDispatcher","obj","call","d3_cellOut","d3_cellClick","d3_drawShapes","shape","shapes","shapeHeight","shapeWidth","shapeRadius","path","attr","d3_addText","svg","enter","classPrefix","append","selectAll","text","d3_calcType","ascending","type","ticks","d3_placement","orient","cell","cellTrans","textTrans","labelAlign","style","d3_addEvents","dispatcher","on","d3_title","title","titleText","cellsSvg","select","yOffset","nodes","getBBox","height","xOffset","x","color","scaleLinear","shapePadding","useClass","format","labelOffset","legendDispatcher","dispatch","legend","helper","legendG","cellEnter","exit","transition","remove","merge","shapeSize","textAlign","width","y","_","arguments","toLowerCase","value","apply","size","bbox","stroke","maxH","max","maxW","sum","slice","symbol","thresholdLabels","replace","legendColor","legendSize","legendSymbol","legendHelpers"],"mappings":"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"}