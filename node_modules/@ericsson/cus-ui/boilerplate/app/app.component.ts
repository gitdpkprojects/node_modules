/* tslint:disable:component-selector-prefix */
import { Component, ViewChild, AfterViewInit, ViewContainerRef, Renderer2, Inject, InjectionToken } from '@angular/core';
import { OverlayService, MainMenuService as OdenMainMenuService, MainMenuRoute } from '@ericsson/oden/modules';
import { ActionItem, ProfileModel, ApplicationService } from '@ericsson/oden/core';
import { Router } from '@angular/router';
import { TranslationService } from '../../i18n';
import { MainMenuService, UserProfileService } from '../../common';
import { UniversalService } from '@ericsson/oden';
import { UNIVERSAL_OVERLAY_CONFIG } from './universal-overlay.config';

export const APP_ROUTES = new InjectionToken<string>('appRoutes');
export const APP_TITLES = new InjectionToken<string>('appTitles');

@Component({
  selector: 'cus-app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})

export class AppComponent implements AfterViewInit {
  @ViewChild('overlay', { read: ViewContainerRef }) viewContainerRef;
  @ViewChild('appOverlay', { read: ViewContainerRef }) viewAppContainerRef;
  profile: ProfileModel = new ProfileModel();
  profileActions: Array<ActionItem>;
  private logoutAction: ActionItem = new ActionItem({ label: 'Logout', action: 'log_out' });
  systemBarTitle: string = this.appTitles.SYSTEM_BAR_TITLE || 'Business Application Portal';
  universalAppTitle: string = this.appTitles.UNIVERSAL_APP_TITLE;

  constructor(private overlayService: OverlayService,
    private _odenMainMenuService: OdenMainMenuService,
    private _mainMenuService: MainMenuService,
    private _renderer: Renderer2,
    applicationService: ApplicationService,
    private _router: Router,
    private translate: TranslationService,
    private _universalService: UniversalService,
    private _userProfileService: UserProfileService,
    @Inject(APP_ROUTES) private appRoutes,
    @Inject(APP_TITLES) private appTitles) {
    this.setLanguage();
    // reset router config to avoid childModule's (ex: Dashboard) routes entry in router tree
    this._router.resetConfig(this.appRoutes);
    // Listener for when TPG is closing applications
    applicationService.onApplicationClose.subscribe(() => this._router.navigateByUrl('/'));
    this.setUserProfile();
    this.profileActions = [
      this.logoutAction
    ];
    this._mainMenuService.getRoutes().subscribe(
      (routes: Array<MainMenuRoute>) => {
        let sideBarRoutes: Array<MainMenuRoute> = routes || [];
        this._odenMainMenuService.setRoutes(sideBarRoutes);
      }, () => {
        // add default routes for api call failure
        this._odenMainMenuService.setRoutes([]);
      });
    // set universal layer tabs
    this._universalService.setTabs(UNIVERSAL_OVERLAY_CONFIG);
  }

  /**
  * Set defult language
  */
  setLanguage() {
    let defaultLang = 'en';
    this.translate.setDefaultLang(defaultLang);
    this.translate.use(defaultLang);
  }

  /**
   * Sets the user profile data and populates the favs if there are any
   */
  setUserProfile() {
    this._userProfileService.getProfileData().subscribe((user) => {
      if (user) {
        if (user.profile) {
          this.profile.name = user.profile.userName || '';
          this.profile.imgUrl = user.profile.image || 'assets/user.png';
        } else {
          this.profile.name = '';
          this.profile.imgUrl = 'assets/user.png';
        }
      }
    });
  }

  ngAfterViewInit(): void {
    this.overlayService.containerRef = this.viewContainerRef;
    this.overlayService.appContainerRef = this.viewAppContainerRef;
    setTimeout(() => {
      this._renderer.addClass(document.body, 'loaded');
      if (document.querySelector('#app-loader')) {
        this._renderer.addClass(document.querySelector('#app-loader'), 'hidden');
      }
    }, 300);
  }

  onProfileAction(actionItem: ActionItem): void {
    if (actionItem.action === 'log_out') {
      this._userProfileService.openLogoutAlert();
    }
  }

  toggleMenu(): void {
    this._universalService.showUniversalOverlay();
  }

}
