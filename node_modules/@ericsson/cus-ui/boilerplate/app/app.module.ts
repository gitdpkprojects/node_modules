import { HttpClientModule } from '@angular/common/http';
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { RouterModule } from '@angular/router';
import { OdenModule } from '@ericsson/oden/modules';
import { CommonModule } from '../../common';
import { TabModule } from '../../core/tabs';
import { LoggerModule } from '../../logger';
import { AuthorizationModule } from '../../core/authorization'
import { FunctionControlModule } from '../../core/function-control';
import { StorageModule } from '../../core/storage'
import { TranslateModule, TranslateLoader, TranslateCompiler } from '@ngx-translate/core';
import { CustomLoader } from '../../i18n/custom.loader';
import { MessageFormatCompiler } from '../../i18n/message.format.compiler';
import { HttpClient } from '@angular/common/http';
import { DashboardModule } from '../../dashboard';
import { ERROR_LOG_URL, FUNCTION_CONTROL_URL, MAIN_MENU_URL, META_DATA_URL, USER_PROFILE_URL } from '../../common';
import {
  AuthenticationStrategy,
  CoreModule,
  GET_TIME_LEFT_URL,
  MockAuthenticationStrategy,
  MockSessionStrategy,
  SessionStrategy
} from '../../core';
import { RESOURCE_PERMISSIONS_URL } from '../../core/authorization';
import { FUNCTION_CONTROL_STATUS_URL } from '../../core/function-control';
import { WIDGETSET_URL } from '../../dashboard';
import { I18nModule } from '../../i18n';
import {
  GUIDED_WORKFLOW_URL,
  START_WORKFLOW_URL,
  TASK_CONTEXT_URL,
  TASK_INFO_URL,
  TaskModule,
  WORKFLOW_DEFINITION_URL
} from '../../task';
import { WORKFLOW_INSTANCES_URL, WorkflowService } from '../../workflow-management';
import { AppComponent, APP_ROUTES, APP_TITLES } from './app.component';
import { routes } from './app.routing';
import { FunctionControlService, UserProfileService, MetaDataService } from '../../common/services';

let appConfig = require('../../../../../src/app.configs').AppConfig;
let DEV_SERVICE_URLS: any = {};

if (appConfig.DEV_SERVICE_URLS) {
  DEV_SERVICE_URLS = appConfig.DEV_SERVICE_URLS;
}

// AoT requires an exported function for factories
export function HttpLoaderFactory(http: HttpClient) {
  return new CustomLoader(http, DEV_SERVICE_URLS.I18N_BASE_URL || 'assets/i18n/', '.json');
}

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    FormsModule,
    HttpClientModule,
    DashboardModule,
    OdenModule.forRoot(),
    CoreModule.forRoot(),
    I18nModule.forRoot(),
    TaskModule.forRoot(),
    RouterModule.forRoot(routes),
    TabModule.forRoot(),
    CommonModule.forRoot(),
    LoggerModule.forRoot(),
    AuthorizationModule.forRoot(),
    FunctionControlModule.forRoot(),
    StorageModule.forRoot(),
    TranslateModule.forRoot({
      loader: {
        provide: TranslateLoader,
        useFactory: HttpLoaderFactory,
        deps: [HttpClient]
      },
      compiler: {
        provide: TranslateCompiler,
        useClass: MessageFormatCompiler
      }
    })
  ],
  providers: [
    WorkflowService,
    { provide: META_DATA_URL, useValue: DEV_SERVICE_URLS.META_DATA_URL || '/mocks/metadata.json' },
    { provide: ERROR_LOG_URL, useValue: DEV_SERVICE_URLS.ERROR_LOG_URL || '' },
    { provide: GET_TIME_LEFT_URL, useValue: DEV_SERVICE_URLS.GET_TIME_LEFT_URL || '' },
    { provide: USER_PROFILE_URL, useValue: DEV_SERVICE_URLS.USER_PROFILE_URL || '/mocks/user-profile.json' },
    { provide: MAIN_MENU_URL, useValue: DEV_SERVICE_URLS.MAIN_MENU_URL || '/mocks/routes.json' },
    { provide: FUNCTION_CONTROL_URL, useValue: DEV_SERVICE_URLS.FUNCTION_CONTROL_URL || '' },
    { provide: FUNCTION_CONTROL_STATUS_URL, useValue: DEV_SERVICE_URLS.FUNCTION_CONTROL_STATUS_URL || '/mocks/function-control.json' },
    { provide: RESOURCE_PERMISSIONS_URL, useValue: DEV_SERVICE_URLS.RESOURCE_PERMISSIONS_URL || '/mocks/user-permissions.json' },
    { provide: WIDGETSET_URL, useValue: DEV_SERVICE_URLS.WIDGETSET_URL || '/mocks/widgets.json' },
    { provide: AuthenticationStrategy, useClass: MockAuthenticationStrategy },
    { provide: SessionStrategy, useClass: MockSessionStrategy },
    { provide: WORKFLOW_INSTANCES_URL, useValue: DEV_SERVICE_URLS.WORKFLOW_INSTANCES_URL || '/api/userJourneyManagement/v1/instance' },
    { provide: WORKFLOW_DEFINITION_URL, useValue: DEV_SERVICE_URLS.WORKFLOW_DEFINITION_URL || '/api/userJourneyManagement/v1/definition' },
    { provide: START_WORKFLOW_URL, useValue: DEV_SERVICE_URLS.START_WORKFLOW_URL || '/api/orchestration/v1/guidedflow' },
    { provide: GUIDED_WORKFLOW_URL, useValue: DEV_SERVICE_URLS.GUIDED_WORKFLOW_URL || '/api/orchestration/v1/guidedflow' },
    { provide: TASK_INFO_URL, useValue: DEV_SERVICE_URLS.TASK_INFO_URL || '/api/orchestration/v1/guidedflow' },
    { provide: TASK_CONTEXT_URL, useValue: DEV_SERVICE_URLS.TASK_CONTEXT_URL || '/api/orchestration/v1/guidedflow' },
    {
      provide: APP_INITIALIZER,
      useFactory: initFunctionDvConfiguration,
      deps: [FunctionControlService],
      multi: true
    },
    {
      provide: APP_INITIALIZER,
      useFactory: initConfiguration,
      deps: [MetaDataService],
      multi: true
    },
    {
      provide: APP_INITIALIZER,
      useFactory: initUserProfile,
      deps: [UserProfileService],
      multi: true
    },
    {
      provide: APP_ROUTES,
      useValue: routes
    },
    {
      provide: APP_TITLES,
      useValue: {
        SYSTEM_BAR_TITLE: appConfig.SYSTEM_BAR_TITLE,
        UNIVERSAL_APP_TITLE: appConfig.UNIVERSAL_APP_TITLE
      }
    }
  ],
  bootstrap: [AppComponent]
})

export class AppModule { }

export function initConfiguration(metaService: MetaDataService): Function {
  return () => metaService.loadApplications();
}

export function initFunctionDvConfiguration(functionControlService: FunctionControlService): Function {
  functionControlService.setHeaders();
  return () => functionControlService.updateDvStatus();
}

export function initUserProfile(userProfileService: UserProfileService): Function {
  return () => userProfileService.loadProfileData();
}
