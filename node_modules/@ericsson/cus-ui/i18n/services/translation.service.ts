import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';

@Injectable()
export class TranslationService {

    constructor(private translate: TranslateService) {
    }

    /**
     * Sets the default language to use as a fallback
     * @param lang
     */
    setDefaultLang(lang: string): void {
        this.translate.setDefaultLang(lang);
    }

    /**
     * Gets the default language used
     * @returns string
     */
    getDefaultLang(): string {
        return this.translate.getDefaultLang();
    }

    /**
     * Changes the lang currently used
     * @param lang
     * @returns {Observable<*>}
     */
    use(lang: string): Observable<any> {
        return this.translate.use(lang);
    }

    /**
     * Gets the translated value of a key (or an array of keys)
     * @param key
     * @param interpolateParams
     * @returns {any} the translated key, or an object of translated keys
     */
    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {
        return this.translate.get(key, interpolateParams);
    }

    /**
     * Returns a translation instantly from the internal state of loaded translation.
     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.
     * @param key
     * @param interpolateParams
     * @returns {string}
     */
    instant(key: string | Array<string>, interpolateParams?: Object): string | any {
        return this.translate.instant(key, interpolateParams);
    }

    /**
     * Manually sets an object of translations for a given language
     * after passing it through the compiler
     * @param lang
     * @param translations
     * @param shouldMerge
     */
    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void {
        return this.translate.setTranslation(lang, translations, shouldMerge);
    }

    /**
     * Sets the translated value of a key, after compiling it
     * @param key
     * @param value
     * @param lang
     */
    set(key: string, value: string, lang?: string): void {
        this.translate.set(key, value, lang);
    }

    /**
     * Returns the language code name from the browser, e.g. "de"
     *
     *
     * @returns string
     */
    getBrowserLang(): string {
        return this.translate.getBrowserLang();
    }
    /**
     * Returns the culture language code name from the browser, e.g. "de-DE"
     *
     * @returns string
     */
    getBrowserCultureLang(): string {
        return this.translate.getBrowserCultureLang()
    }
}
