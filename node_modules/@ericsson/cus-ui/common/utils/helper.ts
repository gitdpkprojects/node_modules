import * as _ from 'lodash';
import * as jsonpath from 'jsonpath';
let jp = (jsonpath as any).default || jsonpath;
import { HttpErrorResponse } from '@angular/common/http';

export class Helper {

    /**
     * Check if an object exists in the array
     * @param arr
     * @param obj
     */
    static isExists(arr, obj) {
        let value: boolean = false;
        if (obj && arr && arr.length > 0) {
            value = _.some(arr, obj);
        }
        return value;
    }

    /**
     * Query for jsonpath
     * @param data
     * @param expression
     */
    static evaluate(data: any, expression: string) {
        let result = [];
        if (data && expression) {
            data = typeof data === 'object' ? data : [data];
            result = jp.query(data, expression);
        }
        return result;
    }

    /*
     * Set application error code and message.
     * @param error
     */
    static getErrorText(error: HttpErrorResponse): string {
        let errorMsg: string = '';
        let contentType = error.headers ? error.headers.get('content-type') : '';
        let contentTypeAppJson = /(application\/json)/;
        if (contentTypeAppJson.test(contentType)) {
            let body = error;
            if (body.status &&
                (body.message && body.message.toString().length > 0)) {
                errorMsg = `${body.status} - ${body.message}`;
            }
        }
        return errorMsg;
    }

    /**
     * URL that is visible to user in browser
     * @param url // navigated url
     * @param separator // '/'
     * @param index // index of separator
     */
    static updateBrowserUrl(url: string, separator: string, index: number) {
        let position = this.getPosition(url, separator, index);
        let reqUrl = url.substring(1, position);
        window.history.replaceState(null, null, reqUrl);
    }

    /**
     * Returns position of separator
     * @param url
     * @param value
     * @param index
     * @return number
     */
    static getPosition(url, value, index): number {
        return url.split(value, index).join(value).length;
    }
}
