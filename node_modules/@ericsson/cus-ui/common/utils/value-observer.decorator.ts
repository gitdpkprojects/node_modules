import { BehaviorSubject } from 'rxjs';

/**
 * Create a ValueObserverModel interface
 * field type string and optional
 * value type string and optional
 */
interface ValueObserverModel {
  field?: string;
  value?: string;
}

// BehaviorSubject for hold user input
export const ValueObserverSubject = new BehaviorSubject<ValueObserverModel>({});

/**
 * Decorator function for hold and subscribe the data
 * use @ValueObserverCore() for use this decorator
 * @param field
 */
export const ValueObserverCore = (field?: string) => {
  return () => {
    let propValue;
    return function (target: any, key: string) {
      const getter = () => {
        return propValue;
      }
      const setter = (value: any) => {
        // Holds the user input
        ValueObserverSubject.next({ field, value });
      }
      Object.defineProperty(target, key, {
        get: getter,
        set: setter
      });
    }
  }
}
