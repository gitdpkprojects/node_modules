import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { ButtonActionItem } from '@ericsson/oden/core/models/button-action-item.model';
import { ErrorPageComponent } from '@ericsson/oden/components/error-page';
import { ErrorPageService } from '../../services/error.page.service';
import { ErrorPage } from '../../models/error.page.model';
import { Subscription } from 'rxjs';

@Component({
  selector: 'cus-error',
  templateUrl: './error.component.html',
  styleUrls: ['./error.component.scss']
})
export class ErrorComponent implements OnInit, OnDestroy {
  private _urlParams;
  @ViewChild('errorComponent') errorComponent: ErrorPageComponent;
  statusCode: number;
  title: string;
  message: string;
  aditionalMessage: string;
  fullSize: boolean = true;
  actions: Array<ButtonActionItem> = [];
  subscription: Subscription = null;
  statusSubscription: any = null;
  constructor(private router: Router,
    private errorPageService: ErrorPageService) {
  }

  getQueryParamValue(key) {
    return decodeURIComponent(window.location.search.replace(new RegExp('^(?:.*[&\\?]' +
      encodeURIComponent(key).replace(/[\.\+\*]/g, '\\$&') + '(?:\\=([^&]*))?)?.*$', 'i'), '$1'));
  }

  ngOnInit() {
    let errCode = this.getQueryParamValue('errCode');
    let referrerURL = this.getQueryParamValue('referrerURL');
    let errorMessage = this.getQueryParamValue('errorMessage');

    if (errCode && referrerURL) {
      this._urlParams = {
        errCode: errCode,
        referrerURL: referrerURL,
        errorMessage: errorMessage
      };
    }

    this.errorComponent.onAction.subscribe(() => {
      if (this._urlParams && this._urlParams.errCode && this._urlParams.referrerURL && this._urlParams.errorMessage) {
        window.location.href = this._urlParams.referrerURL;
      } else {
        this.router.navigate(['/home'], { queryParamsHandling: 'merge' });
      }
    });

    // If any error code changes, then update error message
    this.statusSubscription = this.errorPageService.onStatusCodeChange$.subscribe(() => {
      this.setError();
    });

    if (this._urlParams) {
      let url = window.location.href
      let position = url.indexOf('error');
      window.history.replaceState('', '', url.substring(0, position));
      this.errorPageService.setStatusCodeAndActions(parseInt(this._urlParams.errCode, 10), this._urlParams.errorMessage);
    }
    this.setError();
  }

  setError() {
    this.clear();
    this.subscription = this.errorPageService.getError().subscribe((error: ErrorPage) => {
      this.statusCode = error.statusCode;
      this.title = error.title;
      this.message = error.message;
      this.aditionalMessage = error.aditionalMessage;
      this.fullSize = error.fullSize;
      this.actions = error.actions;
    });
  }

  private clear() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  ngOnDestroy() {
    this.clear();
    if (this.statusSubscription && this.statusSubscription.unsubscribe) {
      this.statusSubscription.unsubscribe();
    }
  }
}
