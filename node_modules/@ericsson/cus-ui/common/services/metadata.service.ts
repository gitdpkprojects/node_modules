import { Injectable, Inject, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { MetaData } from '../models/metadata.model';
import { Bundle } from '../models/bundle.model';
import { HttpClient } from '@angular/common/http';
import { Utils } from '../utils/loader';
import { ApplicationSettings } from '../services/application.settings.service';

export const META_DATA_URL = new InjectionToken<string>('metadata_url');

/**
 * Service to fetch application's metadata information
 */
@Injectable()
export class MetaDataService {
    private _metaDataCache: Array<Bundle>;

    constructor(private _http: HttpClient,
        @Inject(META_DATA_URL) public metaDataUrl: any, private _appSettingsService: ApplicationSettings
    ) { }

    /**
     * returns applications metadata
     * @returns {Observable<Array<MetaData>>}
     */
    getApplicationMetaData(): Observable<Array<Bundle>> {
        return new Observable<Array<Bundle>>((observer) => {
            if (this._metaDataCache) {
                observer.next(this._metaDataCache);
            } else {
                this._http.get<MetaData>(this.metaDataUrl)
                    .subscribe((meta: MetaData) => {
                        this._metaDataCache = meta.bundles ? meta.bundles : [];
                        this._appSettingsService.settings = meta.settings;
                        if (meta && meta.security) {
                            let clientId = meta.security.clientId ? meta.security.clientId : '';
                            localStorage.setItem('client_id', clientId);
                        }
                        observer.next(meta.bundles);
                    }, () => {
                        observer.next([]);
                    })
            }
        });
    }

    /**
     * Load applications from metadata
     */
    loadApplications(): Promise<any> {
        let promise: Promise<any> = new Promise((resolve: any) => {

            // this.functionControlService.updateDvStatus();

            this.getApplicationMetaData().subscribe((meta) => {
                let scripts = [];
                if (meta && meta.length > 0) {
                    meta.forEach((app) => {
                        if (app.appConfigPath) {
                            scripts.push(() => Utils.loadScript(`${app.appConfigPath}`));
                        } else {
                            if (app.systemJSPath) {
                                scripts.push(() => System.import(`${app.systemJSPath}`));
                            }
                        }
                    });

                    Promise.all(scripts.map(app => app())
                    ).then(() => {
                        resolve(true);
                    }).catch(() => {
                        // load app if script fails
                        resolve(true);
                    })
                } else {
                    // load app by default
                    resolve(true);
                }
            });
        });
        return promise;
    }
}
