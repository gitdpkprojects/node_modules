import { Http, Request, RequestOptionsArgs, Response, XHRBackend, RequestOptions, RequestMethod } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import { Injectable } from '@angular/core';
import {
    DialogConfig,
    ModalHelperService,
    ModalService,
    DIALOG_TYPE,
    DialogComponent
} from '@ericsson/oden/modules';
import { ModalActionItem } from '@ericsson/oden/core';
import { TranslationService } from '../../i18n';
import { ApplicationSettings } from './application.settings.service';


@Injectable()
export class HttpInterceptor extends Http {
    dialog: DialogComponent;
    REALM: string;
    constructor(backend: XHRBackend,
        defaultOptions: RequestOptions,
        private _modalHelperService: ModalHelperService,
        private _modalService: ModalService,
        private _appSettings: ApplicationSettings,
        private _translate: TranslationService) {
        super(backend, defaultOptions);
        this.REALM = this._appSettings.getStringValue('REALM');
    }

    /**
     * intercept HTTP request call
     */
    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {

        if ((typeof url === 'string' && options && options.method !== RequestMethod.Get) ||
            (typeof url === 'object' && url.method !== RequestMethod.Get)) {
            // intercept
            return this.intercept(super.request(url, options));
        } else {
            // GET intercept
            return this.interceptGET(super.request(url, options));
        }
    }

    /**
     * populate generate XHR headers
     * @param options
     */
    getRequestOptionArgs(options?: RequestOptionsArgs): RequestOptionsArgs {
        return options;
    }

    /**
     * intercept the GET XHR calls
     * @param observable
     */
    interceptGET(observable: Observable<Response>): Observable<Response> {
        return observable.catch((err) => {
            this.checkTokenExpiry(err);
            return Observable.throw(err);
        });
    }

    /**
     * check if valid token is present
     * OpenAm, redirects to UI/Login if invalid token present
     * @param options
     */
    checkTokenExpiry(error: any): boolean {
        if (error.status === 0 && !error.url && error.statusText === '') {
            this.navigateToLogin();
            return true;
        }
        return false;
    }

    /**
 * Navigate to Login if session fails
 */
    navigateToLogin(): void {
        let logoutUrl: string = this._appSettings.getStringValue('LOGOUT_URL');
        if (logoutUrl) {
            let currentUrl = encodeURIComponent(window.location.href);
            let loginUrl = `${logoutUrl}?goto=${currentUrl}&&realm=${this.REALM}`;
            window.location.href = loginUrl;
        }
    }

    /**
     * intercept the XHR calls
     * @param observable
     */
    intercept(observable: Observable<Response>): Observable<Response> {
        return observable.catch((err) => {

            if (this.checkTokenExpiry(err)) {
                return Observable.throw(err);
            }

            if (this.isExcluded(err)) {
                return Observable.throw(err);
            }

            if (this.isApplicationError(err)) {
                return Observable.throw(err);
            }

            let errorMsg = '';
            if (err.status === 403) {
                errorMsg = this._translate.instant(`com.ericsson.bss.rm.common.http_errors.${err.status}.description`);
                let logoutURL = this._appSettings.getStringValue('LOGOUT_URL');
                let opIFrameURL = this._appSettings.getStringValue('OP_IFRAME_URL');
                let isOpenAM = opIFrameURL && opIFrameURL.length > 0 ? false : true;
                let authCookie = this.getCookie('iPlanetDirectoryPro');
                if (isOpenAM && !authCookie) {
                    if (logoutURL) {
                        window.location.href = this._appSettings.getStringValue('LOGOUT_URL');
                    }
                } else {
                    this.notifyError(errorMsg);
                }
                return Observable.throw(err);
            } else if (err.status) {
                errorMsg = this._translate.instant(`com.ericsson.bss.rm.common.http_errors.${err.status}.description`);
                this.notifyError(errorMsg);
                return Observable.throw(err);
            } else {
                return Observable.throw(err);
            }
        });
    }

    /**
     * Checks to see if log api can be excluded
     * @param err
     * @param source
     */
    isExcluded(err) {
        let response = (<Response>err);
        let url = response.url;
        let urlPattern = /(v1\/log)/;
        if (urlPattern.test(url)) {
            return true;
        }
        return false;
    }

    /**
     * Checks if error is application or system error
     * @param err
     * @param source
     */
    isApplicationError(err) {

        let response = (<Response>err);
        let contentType = response.headers.get('content-type');
        let contentTypeAppJson = /(application\/json)/;
        let contentTypeProfile = /(profile=bss.common.errorSchema)/;
        if (contentTypeAppJson.test(contentType) && contentTypeProfile.test(contentType)) { // reg ex matching
            if (err._body && err._body.length > 0) {
                let jsonBody = JSON.parse(err._body);

                if ((jsonBody.code && jsonBody.code.length > 0) &&
                    (jsonBody.status && jsonBody.status.toString().length > 0)) {
                    return true; // application error
                }

            }
        }

        return false; // system error
    }

    /**
     * Notifies error if already popup not opened
     */
    notifyError(errorMsg: string): void {
        if (!this.dialog) {

            setTimeout(() => {
                let modalRefs = (<any>this._modalService)._modalRefs;
                let dialogElement = document.querySelector('.cui-dialog');
                if (modalRefs && modalRefs.length === 0 && !dialogElement) {
                    // if no dialog shown already
                    this.showError(errorMsg);
                }
            }, 200);

        }
    }

    /**
     * Opens Popup to show system errors
     */
    showError(errorMsg: string): void {
        let config: DialogConfig = new DialogConfig({
            title: this._translate.instant('com.ericsson.bss.rm.common.system_error_title'),
            message: errorMsg,
            actions: [
                new ModalActionItem({
                    label: 'Ok',
                    action: 'ok',
                    cssClass: 'primary'
                })
            ],
            type: DIALOG_TYPE.SYSTEM_ALERT
        });

        this.dialog = this._modalHelperService.createDialog(config);
        this.dialog.onAction.subscribe((actionItem) => {
            switch (actionItem.action) {
                case 'ok':
                    this.dialog.close();
                    this.dialog = null;
                    break;
                default:
            }
        });
    }

    getCookie(name) {
        let dc = document.cookie;
        let prefix = name + '=';
        let begin = dc.indexOf('; ' + prefix);
        let end = 0;
        if (begin === -1) {
            begin = dc.indexOf(prefix);
            if (begin !== 0) { return null; }
        } else {
            begin += 2;
            end = document.cookie.indexOf(';', begin);
            if (end === -1) {
                end = dc.length;
            }
        }
        return decodeURI(dc.substring(begin + prefix.length, end));
    }
}
