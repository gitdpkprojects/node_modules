import { Injectable, Inject, InjectionToken } from '@angular/core';
import {
    DialogConfig,
    ModalHelperService,
    DIALOG_TYPE,
    DialogComponent
} from '@ericsson/oden/modules';
import { HttpClient } from '@angular/common/http';
import { User } from '../models/user.model';
import { ModalActionItem, ProfileModel } from '@ericsson/oden/core';
import { ExceptionHandlerService } from './exception.handler.service';
import { Observable } from 'rxjs/Rx';
import { ApplicationSettings } from './application.settings.service';

export const USER_PROFILE_URL = new InjectionToken<string>('profile_data_url');

/**
 * Service for setting user data in system bar
 */
@Injectable()
export class UserProfileService {
    dialog: DialogComponent;
    private _userProfileCache: User;

    constructor(private _modalHelperService: ModalHelperService, private _http: HttpClient,
        @Inject(USER_PROFILE_URL) public profileUrl: any, private _appSettings: ApplicationSettings,
        private _exceptionHandlerService: ExceptionHandlerService) { }

    /**
     * Function that returns the profile data.
     * Retuns cache value if its already populated else makes the http request and populates the cache.
     */
    public getProfileData(): Observable<User> {
        return new Observable((observer) => {
            if (this._userProfileCache) {
                observer.next(this._userProfileCache);
            } else {
                this._http
                    .get<User>(this.profileUrl)
                    .subscribe((user) => {
                        this._userProfileCache = user;
                        observer.next(user)
                    }, () => {
                        observer.next(null);
                    })
            }
        });
    }

    /**
     * Get user profile model
     */
    public _getUserProfile(): ProfileModel {
        return new ProfileModel({
            name: this._userProfileCache.profile.userName,
            imgUrl: this._userProfileCache.profile.image
        });
    }

    /**
     * Opens a system alert triggered from view.
     */
    openLogoutAlert(): void {
        let config: DialogConfig = new DialogConfig({
            message: `
                <p>Are you sure you want to Logout?</p>
            `,
            actions: [
                new ModalActionItem({
                    label: 'Cancel',
                    action: 'cancel',
                    cssClass: 'discard'
                }),
                new ModalActionItem({
                    label: 'Ok',
                    action: 'ok',
                    cssClass: 'primary'
                })
            ],
            type: DIALOG_TYPE.SYSTEM_ALERT
        });

        this.dialog = this._modalHelperService.createDialog(config);
        this.dialog.onAction.subscribe((actionItem) => {
            switch (actionItem.action) {
                case 'ok':
                    this.dialog.close();
                    this._exceptionHandlerService.postErrors();
                    let logoutURL = this._appSettings.getStringValue('LOGOUT_URL');
                    if (logoutURL) {
                        window.location.href = logoutURL;
                    }
                    break;
                case 'cancel':
                    this.dialog.close();
                    break;
                default:
            }
        });
    }

    /**
     * Function load the profile data when the application is bootstrapped
     */
    loadProfileData(): Promise<boolean> {
        let promise: Promise<boolean> = new Promise((resolve: any) => {
            this.getProfileData().subscribe(() => {
                resolve(true);
            }, () => {
                resolve(true);
            })
        });
        return promise;
    }

    public getUserPreferredLanguage() {
        let defaultLang = 'en';
        // get preferences from profile cache
        if (this._userProfileCache && this._userProfileCache.preferences && this._userProfileCache.preferences.language) {
            defaultLang = this._userProfileCache.preferences.language;
        }
        return defaultLang;
    }
}
