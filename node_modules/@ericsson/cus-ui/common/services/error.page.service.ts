import { Injectable, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { ErrorPage } from '../models/error.page.model';
import { TranslationService } from '../../i18n';
import { ButtonActionItem } from '@ericsson/oden/core/models/button-action-item.model';

@Injectable()
export class ErrorPageService {
    private _statusCode: number = 404;
    private _customErrMess: string = '';
    private _urlErrorCode: boolean = false;
    public onStatusCodeChange$: EventEmitter<number> = new EventEmitter<number>();

    constructor(private translate: TranslationService) {
    }

    /**
     * Set Status Code - Http Error Code
     * @param statusCode
     */
    setStatusCode(statusCode: number) {
        this._statusCode = statusCode;
        this.onStatusCodeChange$.emit(this._statusCode);
    }
    /**
     * Set Status code from urlparams
     * @param statusCode
     */
    setStatusCodeAndActions(statusCode: number, customErrMessage?: string) {
        this._statusCode = statusCode;
        this._customErrMess = customErrMessage ? customErrMessage : '';
        this._urlErrorCode = true;
        this.onStatusCodeChange$.emit(this._statusCode);
    }
    /**
     * Get Error
     */
    getError(): Observable<ErrorPage> {
        return new Observable<ErrorPage>((observer) => {
            let error = new ErrorPage();
            error.statusCode = this._statusCode;
            let requestStrings = [`com.ericsson.bss.rm.common.http_errors.${error.statusCode}.title`,
            `com.ericsson.bss.rm.common.http_errors.${error.statusCode}.description`,
                `com.ericsson.bss.rm.cus.retry`, `com.ericsson.bss.rm.cus.home`]
            this.translate.get(requestStrings).subscribe((messages) => {
                error.title = messages[`com.ericsson.bss.rm.common.http_errors.${error.statusCode}.title`];
                error.message = messages[`com.ericsson.bss.rm.common.http_errors.${error.statusCode}.description`];
                if (this._customErrMess.length > 0) {
                    error.aditionalMessage = `(Error code: ${this._customErrMess})`;
                }
                error.fullSize = this.isFullSize();
                error.actions = this.getActions(messages[
                    (this._urlErrorCode ? `com.ericsson.bss.rm.cus.retry` : `com.ericsson.bss.rm.cus.home`)
                ]);
                observer.next(error);
            });
        });
    }

    /**
     * is Full Size
     */
    private isFullSize(): boolean {
        return this._statusCode >= 500;
    }

    /**
     *  Get Actions
     * @param homeText
     */
    private getActions(homeText): Array<ButtonActionItem> {

        let actions: Array<ButtonActionItem> = [];
        if (this._statusCode < 500 || this._urlErrorCode) {
            let butttonAction: ButtonActionItem = new ButtonActionItem({
                label: homeText,
                action: '',
                cssClass: ''
            });
            actions.push(butttonAction);
        }
        return actions;
    }

}
