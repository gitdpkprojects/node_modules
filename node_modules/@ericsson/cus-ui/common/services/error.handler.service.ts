import { TranslationService } from '../../i18n/services/translation.service';
import { Injectable } from '@angular/core';
import { Common } from '../models/error.model';
import { Observable } from 'rxjs/Observable';

@Injectable()
export class ErrorHandlerService {

    constructor(private _translationService: TranslationService) { }

    getErrorInfo(error: Common.Error): Observable<Common.Error> {
        // get error entity based on code
        return new Observable<Common.Error>((observer) => {
            const message = `com.ericsson.bss.rm.cus.error_codes.${error.code}.message`;
            const details = `com.ericsson.bss.rm.cus.error_codes.${error.code}.details`;
            this._translationService.get([
                message, details
            ])
                .subscribe((errorResult) => {
                    if (errorResult[message] && errorResult[message] !== message) {
                        error.message = errorResult[message];
                    }
                    if (errorResult[details] && errorResult[details] !== details) {
                        error.details = errorResult[details];
                    }
                    observer.next(error);
                });
        });
    }

}
