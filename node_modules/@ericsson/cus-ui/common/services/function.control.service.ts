import { Injectable, Inject, InjectionToken, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ErrorPageService } from './error.page.service';
import { AuthenticationStrategy } from '../../core/authentication/authentication_strategy';

export const FUNCTION_CONTROL_URL = new InjectionToken<string>('function_control_url');

@Injectable()
export class FunctionControlService {
  location: Location;
  _active: boolean = false;
  public onActiveStatusChange$: EventEmitter<boolean> = new EventEmitter<boolean>();
  errorStatusCode: number = 501;

  constructor(private _http: HttpClient,
    @Inject(FUNCTION_CONTROL_URL) public functionControlUrl: any,
    private errorPageService: ErrorPageService,
    private authentationStrategy: AuthenticationStrategy) { }

  /**
  * Get DV Active
  * @returns {Observable<Response>}
  */
  updateDvStatus() {
    let promise: Promise<any> = new Promise((resolve: any) => {
      this._http.get<any>(this.functionControlUrl).subscribe(() => {
        this._active = true;
        this.onActiveStatusChange$.emit(true);
        resolve(true);
      }, (error) => {
        this.errorStatusCode = error.status;
        this.errorPageService.setStatusCode(this.errorStatusCode);
        this.onActiveStatusChange$.emit(this._active);
        resolve(true);
      })
    });
    return promise;
  }

  configure(send) {
    let that = this;
    (XMLHttpRequest.prototype as any).configured = true;
    XMLHttpRequest.prototype.send = function (data) {
      let requestHeaders: Map<string, string> = that.authentationStrategy.getHeaders();
      if (localStorage.getItem('x-csrf-token') && localStorage.getItem('x-csrf-token') !== 'null') {
        requestHeaders.set('x-csrf-token', localStorage.getItem('x-csrf-token'));
      }
      if (requestHeaders && requestHeaders.size > 0) {
        requestHeaders.forEach((value, key) => {
          this.setRequestHeader(key, value);
        });
      }
      send.call(this, data);
    };
  }

  setHeaders() {
    if (!(XMLHttpRequest.prototype as any).configured) {
      this.configure(XMLHttpRequest.prototype.send);
    }
  }

  /**
   * is DV Active
   */
  get active() {
    return this._active;
  }

  /**
   * Get Error status code
   */
  getDvStatusCode(): number {
    return this.errorStatusCode;
  }
}
