import { Injectable, Inject, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { LoggerService } from '../../logger';
import { Observable } from 'rxjs';
import { ApplicationSettings } from './application.settings.service';

export const ERROR_LOG_URL = new InjectionToken<string>('error_log_url');

/**
 * This is a service to handle exception and log to server
 */
@Injectable()
export class ExceptionHandlerService {
    httpOptions: any;
    ERROR_LOG_INTERVAL_SEC: number;
    constructor(private _http: HttpClient,
        private _loggerService: LoggerService,
        private _appSettings: ApplicationSettings,
        @Inject(ERROR_LOG_URL) public errorLogUrl: any) {

        this.ERROR_LOG_INTERVAL_SEC = this._appSettings.getIntValue('ERROR_LOG_INTERVAL_SEC') || 30;
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            }),
            observe: 'response'
        };
    }

     /**
     * post the error to the server
     * @returns {Observable<R>}
     */
    sendToServer() {
        let errors = this.getErrors();
        return this._http.post(this.errorLogUrl, errors, this.httpOptions).catch(this.handleError.bind(this));
    }

    /*
    Handle errors from getSystemConfig() rest call
    */
    private handleError(error: HttpErrorResponse) {
        this._loggerService.error(`SendLogsToServer - StatusCode: ${error.status}, Path: ${error.url}, StatusText: ${error.statusText}`);
        return Observable.throw(error);
    }

     /**
     * get the errors to post to ther server
     * @param obj
     * @returns any
     * @private
     */
    private getErrors(): any[] {
         return this._loggerService._getLogs().map( (e) => {
             return {
                'logLevel': e.level,
                'message': e.toString()
             };
         });
    }

     /**
     * clear errors
     */
    private clearErrors() {
        this._loggerService._clearLogs();
    }

     /**
     * Initialize exception handler
     */
    init() {
        this.lookForErrors();
    }

    /**
     * post errors to server if found any in log bucket
     */
    postErrors () {
        let errors = this._loggerService._getLogs();
        if (errors && errors.length > 0) {
                this.sendToServer().subscribe(
                () => {
                    this.clearErrors();
                }
            );
        };
    }

    /**
     * look for errors for every configured interval
     */
    lookForErrors() {
        setInterval(() => {
            this.postErrors();
        }, this.ERROR_LOG_INTERVAL_SEC * 1000);
    }
}
