import { Injectable, Injector } from '@angular/core';
import {
    HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpSentEvent,
    HttpHeaderResponse, HttpProgressEvent,
    HttpResponse, HttpUserEvent, HttpErrorResponse
} from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import {
    DialogConfig,
    ModalHelperService,
    ModalService,
    DIALOG_TYPE,
    DialogComponent
} from '@ericsson/oden/modules';
import { ModalActionItem } from '@ericsson/oden/core';
import { TranslationService } from '../../i18n';
import { ApplicationSettings } from './application.settings.service';
import { UserProfileService } from './user.profile.service';
import * as lodash from 'lodash';

@Injectable()
export class RESTInterceptor implements HttpInterceptor {
    dialog: DialogComponent;
    REALM: string;
    private _modalHelperService: ModalHelperService;
    private _modalService: ModalService;
    private _appSettings: ApplicationSettings;
    private _translate: TranslationService;

    constructor(
        private injector: Injector,
        private _userProfileService: UserProfileService) {
    }

    intercept(request: HttpRequest<any>, next: HttpHandler):
        Observable<HttpSentEvent | HttpHeaderResponse | HttpProgressEvent | HttpResponse<any> | HttpUserEvent<any>> {
        let clonedRequest = request.clone();
        // get preferences from profile service
        const userPreferredLanguage = this._userProfileService.getUserPreferredLanguage();
        // fetch browser language preferences
        const browserLangs = navigator ? navigator.languages : [];
        let headerLangs = [userPreferredLanguage];
        if (browserLangs) {
            headerLangs = headerLangs.concat(browserLangs);
            // remove duplicates in headerLangs
            headerLangs = lodash.uniq(headerLangs);
        }
        // clone request, and update headers
        clonedRequest = request.clone({
            setHeaders: {
                'Accept-Language': headerLangs
            }
        });

        return next.handle(clonedRequest).do((event: HttpEvent<any>) => {
            if (event instanceof HttpResponse) {
                // do stuff with response if you want
            }
        }, (err: any) => {
            if (err instanceof HttpErrorResponse) {
                if (clonedRequest.method !== 'GET' && err.status >= 400) {
                    this.interceptREST(err);
                } else {
                    this.interceptGET(err);
                }
            }
        });
    }

    /* intercept the GET XHR calls
    * @param observable
    */
    interceptGET(err: HttpErrorResponse) {
        this.checkTokenExpiry(err);
    }

    /**
     * check if valid token is present
     * OpenAm, redirects to UI/Login if invalid token present
     * @param options
     */
    checkTokenExpiry(error: HttpErrorResponse): boolean {
        if (error.status === 0 && !error.url && error.statusText === '') {
            this.navigateToLogin();
            return true;
        }
        return false;
    }

    /**
    * Navigate to Login if session fails
    */
    navigateToLogin(): void {
        this._appSettings = this.injector.get(ApplicationSettings);
        this.REALM = this._appSettings.getStringValue('REALM');
        let logoutUrl: string = this._appSettings.getStringValue('LOGOUT_URL');
        if (logoutUrl) {
            let currentUrl = encodeURIComponent(window.location.href);
            let loginUrl = `${logoutUrl}?goto=${currentUrl}&&realm=${this.REALM}`;
            window.location.href = loginUrl;
        }
    }

    /**
     * intercept the XHR calls
     * @param observable
     */
    interceptREST(err: HttpErrorResponse) {

        this._modalHelperService = this.injector.get(ModalHelperService);
        this._modalService = this.injector.get(ModalService);
        this._appSettings = this.injector.get(ApplicationSettings);
        this._translate = this.injector.get(TranslationService);

        if (this.checkTokenExpiry(err)) {
            return null;
        }

        if (this.isExcluded(err)) {
            return null;
        }

        if (this.isApplicationError(err)) {
            return null;
        }

        let errorMsg = '';
        if (err.status === 403) {
            errorMsg = this._translate.instant(`com.ericsson.bss.rm.common.http_errors.${err.status}.description`);
            let logoutURL = this._appSettings.getStringValue('LOGOUT_URL');
            let opIFrameURL = this._appSettings.getStringValue('OP_IFRAME_URL');
            let isOpenAM = opIFrameURL && opIFrameURL.length > 0 ? false : true;
            let authCookie = this.getCookie('iPlanetDirectoryPro');
            if (isOpenAM && !authCookie) {
                if (logoutURL) {
                    window.location.href = this._appSettings.getStringValue('LOGOUT_URL');
                }
            } else {
                this.notifyError(errorMsg);
            }
        } else if (err.status) {
            errorMsg = this._translate.instant(`com.ericsson.bss.rm.common.http_errors.${err.status}.description`);
            this.notifyError(errorMsg);
        }

        return null;
    }

    /**
     * Checks to see if log api can be excluded
     * @param err
     * @param source
     */
    isExcluded(err: HttpErrorResponse) {
        let url = err.url;
        let urlPattern = /(v1\/log)/;
        if (urlPattern.test(url)) {
            return true;
        }
        return false;
    }

    /**
     * Checks if error is application or system error
     * @param err
     * @param source
     */
    isApplicationError(err: HttpErrorResponse) {

        let response = err;
        let contentType = response.headers.get('content-type');
        let contentTypeAppJson = /(application\/json)/;
        let contentTypeProfile = /(profile=bss.common.errorSchema)/;
        if (contentTypeAppJson.test(contentType) && contentTypeProfile.test(contentType)) { // reg ex matching
            if (err.error && err.error.length > 0) {
                let jsonBody = JSON.parse(err.error);

                if ((jsonBody.code && jsonBody.code.length > 0) &&
                    (jsonBody.status && jsonBody.status.toString().length > 0)) {
                    return true; // application error
                }

            }
        }

        return false; // system error
    }

    /**
     * Notifies error if already popup not opened
     */
    notifyError(errorMsg: string): void {
        if (!this.dialog) {

            setTimeout(() => {
                let modalRefs = (<any>this._modalService)._modalRefs;
                let dialogElement = document.querySelector('.cui-dialog');
                if (modalRefs && modalRefs.length === 0 && !dialogElement) {
                    // if no dialog shown already
                    this.showError(errorMsg);
                }
            }, 200);

        }
    }

    /**
     * Opens Popup to show system errors
     */
    showError(errorMsg: string): void {
        let config: DialogConfig = new DialogConfig({
            title: this._translate.instant('com.ericsson.bss.rm.common.system_error_title'),
            message: errorMsg,
            actions: [
                new ModalActionItem({
                    label: 'Ok',
                    action: 'ok',
                    cssClass: 'primary'
                })
            ],
            type: DIALOG_TYPE.SYSTEM_ALERT
        });

        this.dialog = this._modalHelperService.createDialog(config);
        this.dialog.onAction.subscribe((actionItem) => {
            switch (actionItem.action) {
                case 'ok':
                    this.dialog.close();
                    this.dialog = null;
                    break;
                default:
            }
        });
    }

    getCookie(name) {
        let dc = document.cookie;
        let prefix = name + '=';
        let begin = dc.indexOf('; ' + prefix);
        let end = 0;
        if (begin === -1) {
            begin = dc.indexOf(prefix);
            if (begin !== 0) { return null; }
        } else {
            begin += 2;
            end = document.cookie.indexOf(';', begin);
            if (end === -1) {
                end = dc.length;
            }
        }
        return decodeURI(dc.substring(begin + prefix.length, end));
    }
}
