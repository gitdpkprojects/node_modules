import { Injectable } from '@angular/core';
import {
    DialogConfig,
    ModalHelperService,
    DIALOG_TYPE,
    DialogComponent
} from '@ericsson/oden/modules';
import { ModalActionItem } from '@ericsson/oden/core';
import { Observable } from 'rxjs';

@Injectable()
export class DialogService {
    dialog: DialogComponent;

    constructor(
        private _modalHelperService: ModalHelperService) {
    }

    showAlert(title: string, message: string, actions: ModalActionItem[]) {
        let config: DialogConfig = new DialogConfig({
            title: title,
            message: `
               <p> ${message} </p>
           `,
            actions: actions,
            type: DIALOG_TYPE.SYSTEM_ALERT
        });
        return this._modalHelperService.createDialog(config);
    }

    showLogoutAlert(timeLeft: number) {
        let title = 'Session Expiring!';
        let message = `You will be logged out in ${timeLeft} minutes.`;
        let actions = [
            new ModalActionItem({
                label: 'Ok',
                action: 'ok',
                cssClass: 'primary'
            })
        ];
        let dialog = this.showAlert(title, message, actions);
        dialog.onAction.subscribe((actionItem) => {
            switch (actionItem.action) {
                case 'ok':
                    dialog.close();
                    break;
                default:
            }
        });
    }

    showLogoutConfirmationAlert(): Observable<boolean> {
        let title = '';
        let message = 'Are you sure you want to Logout?';
        let actions = [
            new ModalActionItem({
                label: 'Cancel',
                action: 'cancel',
                cssClass: 'discard'
            }),
            new ModalActionItem({
                label: 'Ok',
                action: 'ok',
                cssClass: 'primary'
            })
        ];
        let dialog = this.showAlert(title, message, actions);
        return new Observable((observer) => {
            dialog.onAction.subscribe((actionItem) => {
                switch (actionItem.action) {
                    case 'ok':
                        dialog.close();
                        observer.next(true);
                        break;
                    case 'cancel':
                        dialog.close();
                        observer.next(false);
                        break;
                }
            });
        })

    }
}
