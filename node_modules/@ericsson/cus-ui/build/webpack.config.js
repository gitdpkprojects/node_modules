const fs = require('fs');
const path = require('path');
// const CopyWebpackPlugin = require('copy-webpack-plugin');
const ProgressPlugin = require('webpack/lib/ProgressPlugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const rxPaths = require('rxjs/_esm5/path-mapping');
const autoprefixer = require('autoprefixer');
const postcssUrl = require('postcss-url');
const postcssImports = require('postcss-import');
const GenerateAppConfigPlugin = require("./plugin/GenerateAppConfigPlugin");
const buildConfig = require(path.join(process.cwd(), 'build.config.json'));
const ContextReplacePlugin = require("./plugin/ContextReplacePlugin");
const CleanupFiles = require('./plugin/CleanupFiles');
const GetChunksPlugin = require('./plugin/GetChunksPlugin');
const NamedExportsPlugin = require('./plugin/NamedExportsPlugin');

const { NoEmitOnErrorsPlugin, SourceMapDevToolPlugin, NamedModulesPlugin, NormalModuleReplacementPlugin } = require('webpack');
const { NamedLazyChunksWebpackPlugin, BaseHrefWebpackPlugin, GlobCopyWebpackPlugin, PostcssCliResources } = require('@angular/cli/plugins/webpack');
const { CommonsChunkPlugin, UglifyJsPlugin } = require('webpack').optimize;
const { AngularCompilerPlugin } = require('@ngtools/webpack');

const nodeModules = path.join(process.cwd(), 'node_modules');
const realNodeModules = fs.realpathSync(nodeModules);

const commonLibModules = path.join(process.cwd(), 'node_modules', '@ericsson');
const commonLibRealNodeModules = fs.realpathSync(commonLibModules);

const angularModules = path.join(process.cwd(), 'node_modules', '@angular');
const angularrealNodeModules = fs.realpathSync(angularModules);

const genDirNodeModules = path.join(process.cwd(), 'src', '$$_gendir', 'node_modules');
const entryPoints = buildConfig.isRoot ? ["inline", "polyfills", "sw-register", "styles", "vendor", "angular", "common.lib", "main"] : ["main", "vendor"];
const hashFormat = { "chunk": "", "extract": "", "file": ".[hash:20]", "script": "" };
const baseHref = "";
const deployUrl = "";
const projectRoot = process.cwd();
const maximumInlineSize = 10;


// Get versions
const odenPackage = require(path.join(process.cwd(), "node_modules", "@ericsson", "oden", "package.json"));
const cusUIPackage = require(path.join(process.cwd(), "node_modules", "@ericsson", "cus-ui", "package.json"));
const angularPackage = require(path.join(process.cwd(), "node_modules", "@angular", "core", "package.json"));
const cusPomXml = fs.readFileSync(path.join(process.cwd(), 'pom.xml'), 'utf8');
const cusPackageVersion = cusPomXml.toString().substring(cusPomXml.indexOf('<version>') + "version".length + 2, cusPomXml.indexOf('</version>'));

const versions = {
    'cus_version': cusPackageVersion,
    'oden_version': odenPackage.version,
    'cus-ui_version': cusUIPackage.version,
    'angular_version': angularPackage.version
};
// End of get versions

const postcssPlugins = function(loader) {
    return [
        postcssImports({
            resolve: (url, context) => {
                return new Promise((resolve, reject) => {
                    let hadTilde = false;
                    if (url && url.startsWith('~')) {
                        url = url.substr(1);
                        hadTilde = true;
                    }
                    loader.resolve(context, (hadTilde ? '' : './') + url, (err, result) => {
                        if (err) {
                            if (hadTilde) {
                                reject(err);
                                return;
                            }
                            loader.resolve(context, url, (err, result) => {
                                if (err) {
                                    reject(err);
                                } else {
                                    resolve(result);
                                }
                            });
                        } else {
                            resolve(result);
                        }
                    });
                });
            },
            load: (filename) => {
                return new Promise((resolve, reject) => {
                    loader.fs.readFile(filename, (err, data) => {
                        if (err) {
                            reject(err);
                            return;
                        }
                        const content = data.toString();
                        resolve(content);
                    });
                });
            }
        }),
        postcssUrl({
            filter: ({ url }) => url.startsWith('~'),
            url: ({ url }) => {
                const fullPath = path.join(projectRoot, 'node_modules', url.substr(1));
                return path.relative(loader.context, fullPath).replace(/\\/g, '/');
            }
        }),
        postcssUrl([{
                // Only convert root relative URLs, which CSS-Loader won't process into require().
                filter: ({ url }) => url.startsWith('/') && !url.startsWith('//'),
                url: ({ url }) => {
                    if (deployUrl.match(/:\/\//) || deployUrl.startsWith('/')) {
                        // If deployUrl is absolute or root relative, ignore baseHref & use deployUrl as is.
                        return `${deployUrl.replace(/\/$/, '')}${url}`;
                    } else if (baseHref.match(/:\/\//)) {
                        // If baseHref contains a scheme, include it as is.
                        return baseHref.replace(/\/$/, '') +
                            `/${deployUrl}/${url}`.replace(/\/\/+/g, '/');
                    } else {
                        // Join together base-href, deploy-url and the original URL.
                        // Also dedupe multiple slashes into single ones.
                        return `/${baseHref}/${deployUrl}/${url}`.replace(/\/\/+/g, '/');
                    }
                }
            },
            {
                // TODO: inline .cur if not supporting IE (use browserslist to check)
                filter: (asset) => {
                    return maximumInlineSize > 0 && !asset.hash && !asset.absolutePath.endsWith('.cur');
                },
                url: 'inline',
                // NOTE: maxSize is in KB
                maxSize: maximumInlineSize,
                fallback: 'rebase',
            },
            { url: 'rebase' },
        ]),
        PostcssCliResources({
            deployUrl: loader.loaders[loader.loaderIndex].options.ident == 'extracted' ? '' : deployUrl,
            loader,
            filename: `[name]${hashFormat.file}.[ext]`,
        }),
        autoprefixer({ grid: true }),
    ];
};

// check backslash in context path
buildConfig.contextPath = buildConfig.contextPath.substr(-1) === "/" ? buildConfig.contextPath : buildConfig.contextPath + '/';
buildConfig.contextPath = buildConfig.contextPath.charAt(0) === "/" ? buildConfig.contextPath : '/' + buildConfig.contextPath;

const childEntry = new Object();

if (buildConfig.entryPath.length > 0) {
    for (let i = 0; i < buildConfig.entryPath.length; i++) {
        // check backslash in entry path
        if (buildConfig.entryPath[i].charAt(0) === "/") {
            buildConfig.entryPath[i] = '.' + buildConfig.entryPath[i];
        } else if (buildConfig.entryPath[i].charAt(0) != "/" && buildConfig.entryPath[i].charAt(0) != ".") {
            buildConfig.entryPath[i] = './' + buildConfig.entryPath[i];
        }

        var splitBundleName = buildConfig.entryPath[i].split('/');
        if (splitBundleName.length > 3) {
            childEntry[splitBundleName[splitBundleName.length - 2]] = buildConfig.entryPath[i];
        } else {
            var bundleName = splitBundleName[splitBundleName.length - 1].split('.')[0];
            childEntry[bundleName] = buildConfig.entryPath[i];
        }

    }
}

const vendorJS = [path.join(process.cwd(), "node_modules", "@ericsson", "cus-ui", "build", "vendor.ts")];
const stylesArray = [path.join(process.cwd(), "node_modules", "@ericsson", "oden", "assets", "styles", "_global.scss")];
const rootEntry = {
    "main": [path.join(process.cwd(), buildConfig.entryPath[0])],
    "polyfills": [path.join(process.cwd(), "src", "polyfills.ts")],
    "styles": stylesArray
};

childEntry["vendor"] = vendorJS;


module.exports = {
    "resolve": {
        "extensions": [
            ".ts",
            ".js"
        ],
        "symlinks": true,
        "modules": [
            path.join(process.cwd(), "node_modules")
        ],
        "alias": rxPaths(),
        "mainFields": [
            "browser",
            "module",
            "main"
        ]
    },
    "resolveLoader": {
        "modules": [
            path.join(process.cwd(), "node_modules")
        ],
        "alias": rxPaths()
    },
    "entry": buildConfig.isRoot ? rootEntry : childEntry,
    "output": {
        "path": path.join(process.cwd(), buildConfig.outputPath),
        "filename": buildConfig.isRoot ? "./assets/js/[name].bundle.js" : "[name].bundle.js",
        "chunkFilename": buildConfig.isRoot ? "./assets/js/[id].chunk.js" : "[id].chunk.js",
        "crossOriginLoading": false
    },
    "module": {
        "rules": [{
                "test": /\.html$/,
                "loader": "raw-loader"
            },
            {
                "test": /\.(eot|svg|cur)$/,
                "loader": "file-loader",
                "options": {
                    "name": "[name].[hash:20].[ext]",
                    "limit": 10000
                }
            },
            {
                "test": /\.(jpg|png|webp|gif|otf|ttf|woff|woff2|ani)$/,
                "loader": "url-loader",
                "options": {
                    "name": "[name].[hash:20].[ext]",
                    "limit": 10000
                }
            },
            {
                "exclude": stylesArray,
                "test": /\.css$/,
                "use": [{
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    }
                ]
            },
            {
                "exclude": stylesArray,
                "test": /\.scss$|\.sass$/,
                "use": [{
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "sass-loader",
                        "options": {
                            "sourceMap": true,
                            "precision": 8,
                            "includePaths": []
                        }
                    }
                ]
            },
            {
                "exclude": stylesArray,
                "test": /\.less$/,
                "use": [{
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "less-loader",
                        "options": {
                            "sourceMap": true
                        }
                    }
                ]
            },
            {
                "exclude": stylesArray,
                "test": /\.styl$/,
                "use": [{
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "stylus-loader",
                        "options": {
                            "sourceMap": true,
                            "paths": []
                        }
                    }
                ]
            },
            {
                "include": stylesArray,
                "test": /\.css$/,
                "use": [
                    "style-loader",
                    {
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    }
                ]
            },
            {
                "include": stylesArray,
                "test": /\.scss$|\.sass$/,
                "use": [
                    "style-loader",
                    {
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "sass-loader",
                        "options": {
                            "sourceMap": true,
                            "precision": 8,
                            "includePaths": []
                        }
                    }
                ]
            },
            {
                "include": stylesArray,
                "test": /\.less$/,
                "use": [
                    "style-loader",
                    {
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "less-loader",
                        "options": {
                            "sourceMap": true
                        }
                    }
                ]
            },
            {
                "include": stylesArray,
                "test": /\.styl$/,
                "use": [
                    "style-loader",
                    {
                        "loader": "raw-loader"
                    },
                    {
                        "loader": "postcss-loader",
                        "options": {
                            "ident": "embedded",
                            "plugins": postcssPlugins,
                            "sourceMap": true
                        }
                    },
                    {
                        "loader": "stylus-loader",
                        "options": {
                            "sourceMap": true,
                            "paths": []
                        }
                    }
                ]
            },
            {
                "test": /\.ts$/,
                "loader": "@ngtools/webpack"
            }
        ]
    },
    "plugins": [
        new NoEmitOnErrorsPlugin(),
        new GlobCopyWebpackPlugin({
            "patterns": (buildConfig.static ? buildConfig.static : []),
            "globOptions": {
                "cwd": path.join(process.cwd(), "src"),
                "dot": true,
                "ignore": "**/.gitkeep"
            }
        }),
        // new CopyWebpackPlugin([{
        //         "context": "src",
        //         "to": "",
        //         "from": {
        //             "glob": "assets\\**\\*",
        //             "dot": true
        //         }
        //     },
        //     {
        //         "context": "src",
        //         "to": "",
        //         "from": {
        //             "glob": "favicon.ico",
        //             "dot": true
        //         }
        //     }
        // ], {
        //     "ignore": [
        //         ".gitkeep",
        //         "**/.DS_Store",
        //         "**/Thumbs.db"
        //     ],
        //     "debug": "warning"
        // }),
        new ProgressPlugin(),
        new CircularDependencyPlugin({
            "exclude": /(\\|\/)node_modules(\\|\/)/,
            "failOnError": false,
            "onDetected": false,
            "cwd": projectRoot
        }),
        // commented beacuse of partial chunck name
        // new NamedLazyChunksWebpackPlugin(),
        new HtmlWebpackPlugin({
            "template": path.join(process.cwd(), (buildConfig.isRoot ? "./src/index.prod.html" :
                (buildConfig.htmlPath ? buildConfig.htmlPath : "./src/index.html"))),
            "filename": "./index.html",
            "hash": false,
            "inject": true,
            "compile": true,
            "favicon": false,
            "minify": false,
            "cache": true,
            "showErrors": true,
            "chunks": "all",
            "excludeChunks": ["inline"],
            "title": "Webpack App",
            "xhtml": true,
            "chunksSortMode": function sort(left, right) {
                let leftIndex = entryPoints.indexOf(left.names[0]);
                let rightIndex = entryPoints.indexOf(right.names[0]);
                if (leftIndex > rightIndex) {
                    return 1;
                } else if (leftIndex < rightIndex) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }),
        new BaseHrefWebpackPlugin({
            baseHref: '/baportal/'
        }),
        new CommonsChunkPlugin({
            "name": [
                "inline"
            ],
            "minChunks": null
        }),
        new CommonsChunkPlugin({
            "name": "common.lib",
            "minChunks": (module) => {
                return module.resource &&
                    (module.resource.startsWith(commonLibModules) ||
                        module.resource.startsWith(commonLibRealNodeModules));
            },
            "chunks": [
                "main"
            ]
        }),
        new CommonsChunkPlugin({
            "name": "angular",
            "minChunks": (module) => {
                return module.resource &&
                    (module.resource.startsWith(angularModules) ||
                        module.resource.startsWith(angularrealNodeModules));
            },
            "chunks": [
                "main"
            ]
        }),
        new CommonsChunkPlugin({
            "name": [
                "vendor"
            ],
            "minChunks": (module) => {
                return module.resource &&
                    (module.resource.startsWith(nodeModules) ||
                        module.resource.startsWith(genDirNodeModules) ||
                        module.resource.startsWith(realNodeModules)) &&
                    !(module.resource.startsWith(commonLibModules) ||
                        module.resource.startsWith(commonLibRealNodeModules)) &&
                    !(module.resource.startsWith(angularModules) ||
                        module.resource.startsWith(angularrealNodeModules));
            },
            "chunks": [
                "main"
            ]
        }),
        new NamedExportsPlugin({}),
        new SourceMapDevToolPlugin({
            "filename": "[file].map[query]",
            "moduleFilenameTemplate": "[resource-path]",
            "fallbackModuleFilenameTemplate": "[resource-path]?[hash]",
            "sourceRoot": "webpack:///"
        }),
        new CommonsChunkPlugin({
            "name": [
                "main"
            ],
            "minChunks": 2,
            "async": "common"
        }),
        new NamedModulesPlugin({}),
        new NormalModuleReplacementPlugin(
            /[^%]*environments\/environment/,
            path.resolve(process.cwd(), buildConfig.environmentPath || 'src/environments/environment.prod.ts')
        ),
        new AngularCompilerPlugin({
            "mainPath": buildConfig.mainPath ? buildConfig.mainPath : "main.ts",
            "platform": 0,
            "hostReplacementPaths": {
                "environments/environment.ts": buildConfig.environmentPath ? buildConfig.environmentPath : "environments/environment.prod.ts"
            },
            "sourceMap": true,
            "tsConfigPath": path.join(process.cwd(), buildConfig.tsConfigPath ? buildConfig.tsConfigPath : "/src/tsconfig.app.json"),
            "skipCodeGeneration": true,
            "compilerOptions": {}
        }),
        new ContextReplacePlugin({
            contextPath: buildConfig.contextPath,
            patternToFind: /webpackJsonp\(\[\d+/g
        }),
        new GetChunksPlugin({
            contextPath: buildConfig.contextPath
        }),
        new GenerateAppConfigPlugin({
            buildConfig: buildConfig,
            versions: versions
        }),
        new CleanupFiles({
            exclude: buildConfig.isRoot ? ['./assets/js/inline.bundle.js'] : ['inline.bundle.js', 'vendor.bundle.js', 'index.html']
        }),
        new UglifyJsPlugin()
    ],
    "node": {
        "fs": "empty",
        "global": true,
        "crypto": "empty",
        "tls": "empty",
        "net": "empty",
        "process": true,
        "module": false,
        "clearImmediate": false,
        "setImmediate": false
    },
    "devServer": {
        "historyApiFallback": true
    }
};