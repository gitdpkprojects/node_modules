/*
Author @Rajeshkumar PR
Plugin to replace the matched regex followed by numeric values
*/
const Source = require("webpack-sources/lib/Source");

function replaceSource(source, name, contextPath, patternToFind) {
    this._source = source;
    this._name = name;
    this._contextPath = contextPath;
    this.pattern = patternToFind;
}
module.exports = replaceSource;
replaceSource.prototype = Object.create(Source.prototype);
replaceSource.prototype.constructor = replaceSource;

replaceSource.prototype.source = function() {
    if (this._name.split('.').pop() === "js")
        return this.replaceOccurances(this._source.source());
    else
        return this._source.source();
};

replaceSource.prototype.replaceOccurances = function(str) {
    var src = [str];
    var source = src.pop();
    var strToFind = source.match(this.pattern) ? source.match(this.pattern)[0] : null;
    var checkString = source.indexOf(strToFind);
    if (strToFind != null && checkString != null && checkString > -1) {
        var numLength = strToFind.split(/[^0-9a-zA-Z]+/g)[1].length;
        var startPos = strToFind.length - numLength;
        var splitted1 = this._splitString(source, startPos);
        var splitted2 = this._splitString(splitted1[1], numLength);
        if (this._name.split('./')[1]) {
            this._name = this._name.split('./')[1];
        }
        src.push(splitted1[0], "\'" + this._contextPath + this._name + "\'", splitted2[1]);
        return src.join("");
    };
    return source;
};

replaceSource.prototype._splitString = function(str, position) {
    return position <= 0 ? ["", str] : [str.substr(0, position), str.substr(position)];
};