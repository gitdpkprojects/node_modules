/*
Author @Rajeshkumar PR
Plugin to create app-config file
*/
class GenerateAppConfigPlugin {
    constructor(options) {
        if (arguments.length > 1)
            throw new Error("GenerateAppConfigPlugin takes only one argument (pass an options object)");
        this._options = options || {};
    }

    apply(compiler) {
        const contextPath = this._options.buildConfig.contextPath;
        const entryPath = this._options.buildConfig.entryPath;
        const isRoot = this._options.buildConfig.isRoot;
        const versions = this._options.versions;

        const fnGenerateConfigFile = function() {
            return function(compilation, entryPath) {
                var fileHeaderName,
                    bundleName,
                    genFileName;
                var obj = new Object();
                var bundleObj = new Object();
                // get file header name from the input
                fileHeaderName = entryPath.split('/');
                if (fileHeaderName.length > 3) {
                    bundleName = fileHeaderName[fileHeaderName.length - 2];
                } else {
                    bundleName = fileHeaderName[fileHeaderName.length - 1].split('.')[0];
                }
                bundleObj['moduleFile'] = entryPath.replace('src/', '').replace('.ts', '');
                bundleObj['moduleTSFile'] = entryPath;
                bundleObj['bundleFile'] = contextPath + bundleName + ".bundle.js";
                obj['bundles'] = bundleObj;
                if (global.chunks) {
                    obj['chunks'] = global.chunks;
                }
                if (isRoot) {
                    obj['versions'] = versions;
                }
                // Create a header string for the generated file
                var fileContent = "app.config(" + JSON.stringify(obj) + ")";
                if (fileHeaderName.length > 3) {
                    genFileName = bundleName + "-" + 'app-config.js';
                } else {
                    genFileName = 'app-config.js';
                }
                //render in assets/js folder
                if (isRoot) {
                    genFileName = './assets/js/' + genFileName;
                }

                // Insert this content into the Webpack build as a new file asset:
                compilation.assets[genFileName] = {
                    source: function() {
                        return fileContent;
                    },
                    size: function() {
                        return fileContent.length;
                    }
                };
            };
        }

        compiler.plugin('emit', function(compilation, callback) {

            if (entryPath.length > 0) {
                for (let i = 0; i < entryPath.length; i++) {
                    fnGenerateConfigFile()(compilation, entryPath[i])
                }
            }

            callback();
        });
    }
}

module.exports = GenerateAppConfigPlugin;