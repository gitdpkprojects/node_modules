/*
Author @Rajeshkumar PR
Plugin to create app-config file
*/
class GetChunksPlugin {
    constructor(options) {
        if (arguments.length > 1)
            throw new Error("GetChunksPlugin takes only one argument (pass an options object)");
        this.options = options || {};
    }

    apply(compiler) {
        const options = this.options;
        compiler.plugin("compilation", (compilation) => {
            compilation.plugin("optimize-chunk-assets", (chunks, callback) => {
                var temp = null;
                global.chunks = {};
                // Loop through all compiled assets,
                // adding a new line item for each filename.
                for (const filename in compilation.assets) {
                    var tempAsset = compilation.assets[filename]._source;
                    if (tempAsset && tempAsset.children[0] && tempAsset.children[0].children && tempAsset.children[0].children[0].indexOf('webpackJsonp([') > -1) {
                        var tempObj = tempAsset.children[0].children[1].children;
                        tempObj.filter(function(obj, index) {
                            if (typeof(obj) === "string" && obj.indexOf('src async recursive') > -1 && obj.indexOf('node_modules') < 0) {
                                var sourceString = tempObj[index + 1].children[1]._value;
                                sourceString = '(function(module, exports, __webpack_require__) {' + sourceString + '})';
                                temp = {};
                                var tempModule = {
                                    exports: {}
                                };
                                var moduleDef = sourceString.replace("Object.keys", "").replace(/function/, "function extractFunction");
                                var evalFn = eval.call(temp, moduleDef)
                                evalFn.call(tempModule.exports, tempModule, tempModule.exports);
                                var chunk = tempModule.exports.keys();
                                for (var key in chunk) {
                                    if (chunk.hasOwnProperty(key) && chunk[key].length > 1) {
                                        chunk[key][1] = options.contextPath + chunk[key][1] + '.chunk.js';
                                    }
                                }
                                if (Object.keys(chunk).length > 0) {
                                    Object.assign(global.chunks, chunk);
                                }
                            }
                        });
                    }
                }

                callback();
            });
        });
    }
}

module.exports = GetChunksPlugin;