import { Injectable, InjectionToken, Inject, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { Router } from '@angular/router';
import { StartWorkflowRequest } from './guide/models';
import { HttpClient } from '@angular/common/http';
import { TaskConstants } from './task.constants';
import { NavigationHelper } from '@ericsson/oden';
import { LocalStorage } from '../core/storage/localstorage.strategy';
import { TaskHelper } from './task.helper';
export const START_WORKFLOW_URL = new InjectionToken<string>('start_workflow_url');

/**
 * Orchestrator Service that is exposed to applications
 */
@Injectable()
export class OrchestratorService {

  start$: EventEmitter<any> = new EventEmitter<any>();
  constructor(private http: HttpClient,
    private route: Router,
    private _localStorage: LocalStorage,
    @Inject(START_WORKFLOW_URL) private startWorkflowUrl: string
  ) {
  }

  /**
   * API that starts a workflow
   * @param workflowDefinitionId
   */
  start(workflowDefinitionId: string): void {
    const url: string = window.location.href;
    if (url && url.indexOf(TaskConstants.GUIDE_ROUTE_PATH) !== -1) {
      this.start$.emit({
        workflowDefinitionId: workflowDefinitionId,
        startWfCallback: this.startWorkflow
      });
    } else {
      TaskHelper.saveReferralUrl(this._localStorage, workflowDefinitionId, this.route.url);
      this.startWorkflow(workflowDefinitionId);
    }
  }

  private startWorkflow(workflowDefinitionId: string, callingProcessInstanceId?: string) {
    let workflowUrl = `${this.startWorkflowUrl}/${workflowDefinitionId}`;
    let startWorkflowRequest: StartWorkflowRequest = {
      'action': 'start'
    };
    if (callingProcessInstanceId) {
      startWorkflowRequest.callerProcessInstanceId = callingProcessInstanceId;
    }
    this.http.post(workflowUrl, startWorkflowRequest)
      .catch(this.handleError)
      .subscribe((result) => {
        const path: string = `/${TaskConstants.GUIDE_ROUTE_PATH}/${workflowDefinitionId}/${result.instanceId}`;
        NavigationHelper.navigateToPath(path, this.route);
      },
        (error) => {
          throw new Error(`Some Error in start workflow ${error}`);
        });
  }

  /**
   *
   * @param error
   */
  private handleError(error: Response) {
    return Observable.throw(error);
  }

}
