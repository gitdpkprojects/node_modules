import { Component, EventEmitter, Output } from '@angular/core';
import { ALIGNMENT, ELEMENT_OVERLAY_STATE } from '@ericsson/oden/constants';
import { ElementOverlayConfig, GroupTitleAttribute, TableHeaderItem } from '@ericsson/oden/core';

import { Helper } from '../../../../common/utils';
import { TranslationService } from '../../../../i18n';
import { TaskConstants } from '../../../task.constants';
import { TaskEnum } from '../../../task.enum';
import { TaskListItem, TaskOverview } from '../../models';
import { TaskManagementService } from '../../services/task-management.service';

@Component({
    selector: 'cus-task-details',
    templateUrl: 'task-details.component.html',
    styleUrls: ['task-details.component.scss']
})

export class TaskDetailsComponent {

    errorType: string;
    errorText: string;
    isServerError: boolean = false;
    tableHeaders: TableHeaderItem[] = [];
    overviewData: TaskOverview[] = [];
    private selectedTask: TaskListItem;
    groupTitle: any = {};
    overlayConfig: ElementOverlayConfig = new ElementOverlayConfig({ state: ELEMENT_OVERLAY_STATE.NONE });
    @Output() onBackClick = new EventEmitter();
    @Output() onDiscardClick = new EventEmitter<TaskListItem>();
    @Output() onResumeClick = new EventEmitter<string>();

    constructor(
        private _taskManagementService: TaskManagementService,
        private translate: TranslationService
    ) {
        this.tableHeaders = this.setTableHeaders();
    }

    initComponent(task: TaskListItem) {
        this.selectedTask = task;
        this.groupTitle.title = task.instanceName;
        this.groupTitle.attributes = [
            new GroupTitleAttribute({ label: `${TaskConstants.ASSIGNED_TO}: ` + task.assignee }),
            new GroupTitleAttribute({ stateBatch: task.state })
        ];
        this.getProcessOverview(task.workflowId, task.instanceId);
    }

    /**
     * Get Process Overview
     * @param workflowdefinitionId
     * @param instanceId
     */
    getProcessOverview(workflowdefinitionId: string, instanceId: string) {
        this.showLoader(true);
        this.isServerError = false;
        this._taskManagementService.getProcessOverview(workflowdefinitionId, instanceId).subscribe((overview: TaskOverview[]) => {
            if ((overview && overview.length === 0) || (!overview)) {
                this.overlayConfig.state = ELEMENT_OVERLAY_STATE.NOTICE;
                this.overlayConfig.label = TaskConstants.NO_RECORDS_MESSAGE;
                this.overlayConfig.text = '';
                this.overlayConfig.inlinePlaceholder = true;
                this.overlayConfig.actions = [];
            }
            this.overviewData = overview;
            this.showLoader(false);
        },
            (error) => {
                this.showLoader(false);
                this.isServerError = true;
                this.errorType = TaskEnum.SERVER_ERROR_TYPE;
                let errorText = Helper.getErrorText(error);
                errorText = errorText.length > 0 ? `${errorText},` : '';
                this.errorText = this.translate.instant('com.ericsson.bss.rm.cus.dashboard.error_message',
                    { errorText: errorText });
            });
    }

    /**
     * Shows Loader when overview getting loaded
     * @param show
     */
    private showLoader(show: boolean) {
        if (show) {
            this.overlayConfig.state = ELEMENT_OVERLAY_STATE.LOADING;
        } else {
            this.overlayConfig.state = ELEMENT_OVERLAY_STATE.NONE;
        }
    }

    /**
     * Action on Back click
     */
    onBackButtonClick() {
        this.onBackClick.emit();
    }

    /**
     * Enters guided mode on resume click
     * @param path
     */
    onResume() {
        if (this.selectedTask.screenPath) {
            this.onResumeClick.emit(this.selectedTask.screenPath);
        }
    }

    /**
     * Retry loading
     */
    retryLoadingData() {
        this.getProcessOverview(this.selectedTask.workflowId, this.selectedTask.instanceId);
    }

    /**
     * Action on discard click
     */
    onDiscardButtonClick() {
        this.onDiscardClick.emit(this.selectedTask);
    }

    /**
     * Set Headers for Overview Display table
     */
    private setTableHeaders(): Array<TableHeaderItem> {
        return [
            new TableHeaderItem({
                label: TaskConstants.STEP_LABEL,
                field: TaskEnum.STEP_FIELD as string,
                width: '15%',
                align: ALIGNMENT.LEFT
            }),
            new TableHeaderItem({
                label: TaskConstants.USER_TASK_LABEL,
                field: TaskEnum.TASK_NAME_FIELD as string,
                width: '15%',
                align: ALIGNMENT.LEFT
            }),
            new TableHeaderItem({
                label: TaskConstants.DESCRIPTION_LABEL,
                field: TaskEnum.DESCRIPTION_FIELD as string,
                width: '40%',
                align: ALIGNMENT.LEFT
            })
        ];
    }

}
