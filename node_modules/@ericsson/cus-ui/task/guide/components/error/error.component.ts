import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { ActionItem, GuidedWorkflowService } from '@ericsson/oden';
import { ElementOverlayConfig } from '@ericsson/oden/core';
import { ELEMENT_OVERLAY_STATE } from '@ericsson/oden/constants';
import { TranslationService } from '../../../../i18n';
import { Router } from '@angular/router';

@Component({
    selector: 'cus-task-error',
    templateUrl: './error.component.html',
    styleUrls: ['./error.component.scss']
})
export class TaskErrorComponent implements OnInit {
    @Input() errorConfig: ElementOverlayConfig;
    @Output() onActionButtonClicked: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    overlayConfig: ElementOverlayConfig = new ElementOverlayConfig({ state: ELEMENT_OVERLAY_STATE.NONE });

    constructor(
        private _translate: TranslationService,
        private _route: Router,
        private _guidedWorkflowService: GuidedWorkflowService) {
    }

    ngOnInit() {
        if (!this.errorConfig) {
            this.removeGuidedFooter();
            let actionItem = [new ActionItem({ label: 'Home', action: 'home' })];
            this._translate.get([
                'com.ericsson.bss.rm.cus.task.error_title',
                'com.ericsson.bss.rm.cus.task.error_message'
            ]).subscribe((res) => {
                this.setOverlayProperties(ELEMENT_OVERLAY_STATE.ERROR,
                    res['com.ericsson.bss.rm.cus.task.error_title'],
                    res['com.ericsson.bss.rm.cus.task.error_message'],
                    true,
                    actionItem);
            });
        } else {
            this.setOverlayProperties(
                this.errorConfig.state,
                this.errorConfig.label,
                this.errorConfig.text,
                this.errorConfig.inlinePlaceholder,
                this.errorConfig.actions
            )
        }
    }

    /**
   * @param state
   * @param label
   * @param errorTxt
   * @param placeHolder
   * @param actionItem
   * setting overlay properties
   */
    setOverlayProperties(state, label, errorTxt, placeHolder, actionItem): void {
        this.overlayConfig.state = state;
        this.overlayConfig.label = label;
        this.overlayConfig.text = errorTxt;
        this.overlayConfig.inlinePlaceholder = placeHolder;
        this.overlayConfig.actions = actionItem;
    }
    /**
     * @param action
     */
    onButtonAction(action: ActionItem): void {
        if (action.action === 'home') {
            this._route.navigate(['/home']); // // to-do: confirm navigation
        } else {
            this.onActionButtonClicked.emit(action);
        }
    }
    /**
     * disables guided footer incase of error
     */
    private removeGuidedFooter(): void {
        let snackBar = document.querySelector('.cui-snack-bar');
        setTimeout(() => {
            this._guidedWorkflowService.hideAll();
            if (snackBar) {
                snackBar.remove();
            }
        }, 0.8 * 1000);
    }
}
