import { Injectable, Inject, InjectionToken } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Rx';
import { ContextDataItem, SummaryItem, ContextData } from '../../models';
import { TaskService } from './task.service';

export const TASK_CONTEXT_URL = new InjectionToken<string>('task_context_url');

@Injectable()
export class TaskContextService {
    private _taskService: TaskService;
    constructor(private http: HttpClient,
        @Inject(TASK_CONTEXT_URL) private taskContextUrl: string
    ) { }

    /**
     * API that saves context information
     * @param contextData
     */
    saveContext(contextData: Array<ContextDataItem>) {
        let workflowdefinitionid: string = this._taskService.getWorkflowId();
        let instanceId: string = this._taskService.getInstanceId();
        let saveContextUrl = `${this.taskContextUrl}/${workflowdefinitionid}/instance/${instanceId}`;
        // Get the additionalContextData
        let additionalContextData = this._taskService.getAdditionalContextData();
        // Merge both contextData and additionalContextData arrays
        contextData = [...contextData, ...additionalContextData];
        let saveContextRequest = {
            'action': 'updateContext',
            'context': contextData
        };
        this.http.post(saveContextUrl, saveContextRequest)
            .catch((err: Response) => Observable.throw(err))
            .subscribe();
    }

    /**
     * API that gets context information
     */
    getContext(): Observable<ContextData> {
        let workflowdefinitionid: string = this._taskService.getWorkflowId();
        let instanceId: string = this._taskService.getInstanceId();
        let getContextUrl = `${this.taskContextUrl}/${workflowdefinitionid}/instance/${instanceId}/context`;

        return this.http.get<ContextData>(getContextUrl)
            .map(data => new ContextData(data))
            .catch((err: Response) => Observable.throw(err));
    }

    getSummary(): Array<SummaryItem> {
        return null;
    }

    set taskService(taskService: TaskService) {
        if (!this._taskService) {
            this._taskService = taskService;
        }
    }

    get taskService() {
        return this._taskService;
    }

}
