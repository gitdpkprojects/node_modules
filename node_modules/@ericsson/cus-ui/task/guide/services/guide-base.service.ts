import { Router, ActivatedRoute } from '@angular/router';
import {
    DialogConfig,
    ModalHelperService,
    DIALOG_TYPE,
    DialogComponent,
    GuidedWorkflowService
} from '@ericsson/oden/modules';
import { ActionItem, ModalActionItem, NavigationHelper } from '@ericsson/oden';
import { TaskConstants } from '../../task.constants';
import { TaskEnum } from '../../task.enum';
import { TaskService } from './task.service';
import { Observable } from 'rxjs';
import { TaskInfo } from '../../models';
import { LocalStorage } from '../../../core/storage/localstorage.strategy';
import { TranslateService } from '@ngx-translate/core';

export abstract class GuideBaseService {

    private dialog: DialogComponent;
    _currentActionMenu: ActionItem[];
    _workflowName: string = '';
    constructor(public _modalHelperService: ModalHelperService,
        public _taskService: TaskService,
        public activatedRoute: ActivatedRoute,
        public router: Router,
        public guidedWorkflowService: GuidedWorkflowService,
        public _localStorage: LocalStorage,
        public _translateService: TranslateService) { }

    // abstract methods where derived class has implementation
    abstract discardTask();

    abstract editWorkflow();

    abstract publishWorkflow();

    /**
     * Triggers save context method
     */
    saveContextInfo() {

        // hits application pause task screen
        this._taskService.pauseTaskScreen();

        setTimeout(() => {
            this.exitGuide();
        }, 1000 * 2);
    }

    getActionMenu(data: TaskInfo) {
        this._currentActionMenu = [new ActionItem({
            label: TaskConstants.PAUSE_TASK_LABEL,
            action: TaskConstants.PAUSE_TASK_ACTION
        }), new ActionItem({
            label: TaskConstants.DISCARD_TASK_LABEL,
            action: TaskConstants.DISCARD_TASK_ACTION
        })];
        this.getSummaryActionMenu(data);
        return this._currentActionMenu;
    }

    /**
     * Check summary and load summary action menu
     * @param data
     */
    getSummaryActionMenu(data: TaskInfo) {

        if (data && !data.nextTask) {
            this._currentActionMenu.push(new ActionItem({
                label: TaskConstants.EDIT_TASK_LABEL,
                action: TaskConstants.EDIT_TASK_ACTION
            }));
        }
    }

    /**
     * closes any opened dialog
     */
    private closeDialog() {
        this.dialog.close();
    }

    /**
     * Method called for exit guide
     */
    exitGuide() {
        this.activatedRoute.snapshot.data = { exitGuidedView: true };
        let referralEntity = this._localStorage.get(TaskEnum.REFERRAL_URL);
        let workflow;
        if (!this._taskService.parentWorkflowId) {
            workflow = this._taskService.getWorkflowId();
        } else {
            workflow = this._taskService.parentWorkflowId;
        }
        let path: string = TaskEnum.HOME;
        if (referralEntity && workflow
            && referralEntity.workflow
            && referralEntity.referralUrl
            && workflow === referralEntity.workflow) {
            path = referralEntity.referralUrl;
        }
        NavigationHelper.navigateToRoute(path, this.router);
    }

    /**
     * Show snackbar in guided mode on top of footer
     * @param message
     */
    showSnackbar(message: string) {
        this.guidedWorkflowService.createSnackbar(message);
    }

    /**
     * Common method to open dialog and listens dialog button action in guide view
     * @param config
     */
    openDialog(config: DialogConfig) {
        this.dialog = this._modalHelperService.createDialog(config);
        this.dialog.onAction.subscribe((actionItem) => {
            switch (actionItem.action) {
                case TaskConstants.OK_ACTION:
                case TaskConstants.DONT_SAVE_ACTION:
                case TaskConstants.PUBLISH_OK_ERROR_ACTION:
                    this.closeDialog();
                    this.exitGuide();
                    break;
                case TaskConstants.SAVE_ACTION:
                    this.closeDialog();
                    this.saveContextInfo();
                    break;
                case TaskConstants.YES_ACTION:
                    this.closeDialog();
                    this.discardTask();
                    break;
                case TaskConstants.NO_ACTION:
                case TaskConstants.CANCEL_ACTION:
                case TaskConstants.OK_ERROR_ACTION:
                    this.closeDialog();
                    break;
                case TaskConstants.EDIT_OK_ACTION:
                    this.closeDialog();
                    this.editWorkflow();
                    break;
                case TaskConstants.PUBLISH_OK_ACTION:
                    this.closeDialog();
                    this.publishWorkflow();
                    break;
                default:
            }
        });
    }

    /**
     * Gets Pause Actions
     */
    getPauseActions(): Array<ModalActionItem> {
        return [
            new ModalActionItem({
                label: TaskConstants.CANCEL_LABEL,
                action: TaskConstants.CANCEL_ACTION,
                cssClass: 'discard'
            }),
            new ModalActionItem({
                label: TaskConstants.DONT_SAVE_LABEL,
                action: TaskConstants.DONT_SAVE_ACTION
            }),
            new ModalActionItem({
                label: TaskConstants.SAVE_LABEL,
                action: TaskConstants.SAVE_ACTION,
                cssClass: 'primary'
            })
        ];
    }

    /**
     * Gets Discard Actions
     */
    getDiscardActions(): Array<ModalActionItem> {
        return [
            new ModalActionItem({
                label: TaskConstants.DONT_DISCARD_LABEL,
                action: TaskConstants.NO_ACTION
            }),
            new ModalActionItem({
                label: TaskConstants.DISCARD_LABEL,
                action: TaskConstants.YES_ACTION,
                cssClass: 'primary'
            })
        ];
    }

    /**
     * Gets Edit Actions
     */
    getEditActions(): Array<ModalActionItem> {
        return [
            new ModalActionItem({
                label: TaskConstants.CANCEL_LABEL,
                action: TaskConstants.CANCEL_ACTION,
                cssClass: 'discard'
            }),
            new ModalActionItem({
                label: TaskConstants.OK_LABEL,
                action: TaskConstants.EDIT_OK_ACTION,
                cssClass: 'primary'
            })
        ];
    }

    /**
     * Gets Publish Actions
     */
    getPublishActions(): Array<ModalActionItem> {
        return [
            new ModalActionItem({
                label: TaskConstants.CANCEL_LABEL,
                action: TaskConstants.CANCEL_ACTION,
                cssClass: 'discard'
            }),
            new ModalActionItem({
                label: TaskConstants.OK_LABEL,
                action: TaskConstants.PUBLISH_OK_ACTION,
                cssClass: 'primary'
            })
        ];
    }

    /**
     * Opens dialog alert for pause task
     */
    openTaskDialog(message: string, actions: ModalActionItem[]): void {
        let config: DialogConfig = new DialogConfig({
            message: `
          <p>${message}</p>
      `,
            actions: actions,
            type: DIALOG_TYPE.SYSTEM_ALERT
        });
        this.openDialog(config);
    }

    /**
     *
     * @param error
     */
    handleError(error: Response) {
        return Observable.throw(error);
    }
}
