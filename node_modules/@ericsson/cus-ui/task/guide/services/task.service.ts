import { Injectable, Inject, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { TaskScreen, TaskOnPause } from '../../interface';
import { TaskData, TaskInfo, ContextDataItem } from '../../models';
import { TaskContextService } from './task.context.service';
import { TaskConstants } from '../../task.constants';
import { HttpClient } from '@angular/common/http';
import { TaskScreenService } from '../../task.screen.service';
import { EventEmitter } from '@angular/core';
import { AppHeaderService } from '@ericsson/oden/modules';
import { GuideService } from './guide.service';
import { Subscription } from 'rxjs';
import { OrchestratorService } from '../../orchestrator.service';
import { ActivatedRoute } from '@angular/router';
import { TaskHelper } from '../../task.helper';
export const TASK_INFO_URL = new InjectionToken<string>('task_info_url');

@Injectable()
export class TaskService {
    private currentTaskScreen: TaskScreen;
    private _parentWorkflowId: any;
    onFormStatusChange$: EventEmitter<boolean> = new EventEmitter<boolean>();
    taskSubscription: Subscription = new Subscription();
    additionalContextData: Array<ContextDataItem> = [];
    private _guideService: GuideService;
    constructor(private http: HttpClient,
        @Inject(TASK_INFO_URL) private taskInfoUrl: string,
        private _taskContextService: TaskContextService,
        private _taskScreenService: TaskScreenService,
        private _orchestratorService: OrchestratorService,
        private activatedRoute: ActivatedRoute
    ) {
        this._taskContextService.taskService = this;
        this.taskSubscription.add(this._taskScreenService.onScreenLoad$.subscribe(
            () => {
                this.activatedRoute.snapshot.data = { exitGuidedView: true };
                this.update();
            }
        ));
        this.taskSubscription.add(this._orchestratorService.start$.subscribe(
            (workflowRequest) => {
                if (workflowRequest.startWfCallback) {
                    this.activatedRoute.snapshot.data = { exitGuidedView: true };
                    this.pauseTaskScreen();
                    if (!this.parentWorkflowId) {
                        this.parentWorkflowId = this.getWorkflowId();
                    }
                    workflowRequest.startWfCallback.call(
                        this._orchestratorService,
                        workflowRequest.workflowDefinitionId,
                        this.getInstanceId());
                }
            }));
    }

    /**
     *
     * @param key
     * @param value
     */
    updateAdditionalContextData(key: string, value: any) {
        let contextItem = this.additionalContextData.find(t => t.key === key);
        if (contextItem) {
            contextItem.value = value;
        } else {
            this.additionalContextData.push({
                key: key,
                value: value
            });
        }
    }

    /**
     *
     * @param key
     */
    removeAdditionalContextData(key: string) {
        this.additionalContextData = this.additionalContextData.filter(t => t.key !== key);
    }

    /**
     *
     * @return ContextDataItem[]
     */
    getAdditionalContextData(): ContextDataItem[] {
        return this.additionalContextData;
    }

    update(): void {
        this.currentTaskScreen = this._taskScreenService.currentTaskScreen;

        this.trackFormStatus(this._taskScreenService.currentAppHeaderService);

        this.removeAppHeader();

        this.fetchTaskInfo();
    }

    trackFormStatus(appHeaderService: AppHeaderService) {
        if (appHeaderService) {
            this.taskSubscription.add(appHeaderService.actionButtons$.subscribe((buttons) => {
                if (buttons && buttons.save) {
                    let saveButton = buttons.save;
                    let __saveDisabled = saveButton.disabled;
                    delete saveButton.disabled; // delete old disabled property
                    Object.defineProperty(saveButton, 'disabled', {
                        configurable: true,
                        enumerable: true,
                        get: () => {
                            return __saveDisabled;
                        },
                        set: (status) => {
                            __saveDisabled = status;
                            this.onFormStatusChange$.emit(!__saveDisabled);
                        }
                    });
                    setTimeout(() => {
                        this.onFormStatusChange$.emit(!__saveDisabled);
                    }, 1000 * 1);
                } else {
                    this.onFormStatusChange$.emit(true); // form valid
                }
            }));
        }
    }

    removeAppHeader() {
        setTimeout(() => {
            let appHeader = document.querySelector('.cui-app-header-wrapper');
            if (appHeader) {
                appHeader.remove();
            }
        });
    }

    fetchTaskInfo() {
        if (this._guideService && this._guideService.taskInfo) {
            this.taskOnLoad(this._guideService.taskInfo);
        }
    }

    set guideService(guideService: GuideService) {
        if (!this._guideService) {
            this._guideService = guideService;
        }
    }

    get guideService() {
        return this._guideService;
    }

    set parentWorkflowId(workflowId) {
        this._parentWorkflowId = workflowId;
    }

    get parentWorkflowId() {
        return this._parentWorkflowId;
    }


    /**
     * Triggers Application Submit Task Screen
     * @return Observable<TaskData>
     */
    submitTaskScreen(): Observable<TaskData> {
        if (this.currentTaskScreen && this.currentTaskScreen.taskOnSubmit) {
            return this.currentTaskScreen.taskOnSubmit.call(this.currentTaskScreen);
        } else {
            throw new Error(`Error occured because taskOnSubmit is not implemented`);
        }
    }

    /**
     * Triggers Application Pause Task Screen
     */
    pauseTaskScreen() {
        this.activatedRoute.snapshot.data = { exitGuidedView: true };
        let screen: TaskOnPause = (<any>this.currentTaskScreen) as TaskOnPause;
        if (screen && screen.taskOnPause) {
            return screen.taskOnPause.call(screen, this._taskContextService);
        }
    }

    /**
     * Loads Task Info
     * @param taskInfoUrl
     * @param params
     */
    loadTaskInfo(): Observable<TaskInfo> {
        let taskInfoParams = `${this.getWorkflowId()}/instance/${this.getInstanceId()}`;
        let updatedTaskInfoUrl = `${this.taskInfoUrl}/${taskInfoParams}`;
        let taskInfoRequest = {
            'action': 'taskInfo'
        };
        return this.http.post<TaskInfo>(updatedTaskInfoUrl, taskInfoRequest)
            .catch((error: Response) => Observable.throw(error));
    }

    /**
     * taskInfo and taskContext are framed from loadTaskInfo API
     * @param taskInfoData
     * @param params
     */
    private taskOnLoad(taskInfoData: any): void {
        let taskInfo: TaskInfo = <TaskInfo>{};
        taskInfo['name'] = taskInfoData['name'];
        taskInfo['screenPath'] = taskInfoData['screenPath'];
        taskInfo['state'] = taskInfoData['state'];
        taskInfo['processId'] = this.getInstanceId();
        taskInfo['workflowId'] = this.getWorkflowId();
        taskInfo['taskId'] = taskInfoData['taskId'];
        taskInfo['summary'] = taskInfoData['summary'];
        this.currentTaskScreen.taskOnLoad(taskInfo, this._taskContextService);
    }

    /**
     * Get workflow id
     */
    getWorkflowId(): string {
        return TaskHelper.getTaskParams().workflowId;
    }

    /**
     * Get Instance Id
     */
    getInstanceId(): string {
        return this._guideService.taskInfo && this._guideService.taskInfo.instanceId ?
            this._guideService.taskInfo.instanceId : TaskHelper.getTaskParams().instanceId;
    }

    getTaskId(): string {
        return null;
    }

    isSummaryScreen(): boolean {
        return false;
    }

    /**
     * Gets guide task screen route path
     */
    getGuideTaskScreenPath(): string {
        return `/${TaskConstants.GUIDE_ROUTE_PATH}/${this.getWorkflowId()}/${this.getInstanceId()}`;
    }
}
