var fs = require('fs');
var path = require('path');
const { notEmpty, byId, toArray, thr, readFiles } = require('./utils');

/*************************************\
 * camunda BPM SDK JS implementation *
\*************************************/
var CamSDK = null;
var camClient = null;
var processDefinitionService = null;
var processInstanceService = null;
var filterService = null;
var taskService = null;

function startProcess(processDefinitionId) {
    return new Promise((resolve) => {
        // start the choosed process definition
        processDefinitionService.start({
            id: processDefinitionId
        }, function (data) {
            resolve();
        });
    });
}

function listProcessDefinitions() {
    return new Promise((resolve, reject) => {
        // get the list of available process definitions
        processDefinitionService.list({}, function (err, results) {

            if (err)
                reject(err);

            var definitions = results.items.map(function (definition) {
                return {
                    id: definition.id,
                    name: definition.name || definition.key || definition.id,
                    versions: definition.version
                };
            });

            resolve(definitions);
        });
    });
}

function listProcessInstances() {

    return new Promise((resolve) => {

        // get the list of process instances
        processInstanceService.list({}, function (err, instances) {
            thr(err);

            // collect the relevant process definitions in a array (suitable for CamSDK.utils.series())
            var processDefinitionRequests = {};
            instances.forEach(function (instance) {
                if (!processDefinitionRequests[instance.definitionId]) {
                    processDefinitionRequests[instance.definitionId] = function (cb) {
                        processDefinitionService.get(instance.definitionId, cb);
                    };
                }
            });

            // perform the requests for the process definitions
            CamSDK.utils.series(processDefinitionRequests, function (err, definitions) {
                thr(err);
                var processInstances = [];
                instances.forEach(function (instance) {
                    var definition = definitions[instance.definitionId];
                    processInstances.push({
                        'instanceId': instance.id,
                        'processName': definition.name || '',
                        'version': definition.version || '',
                        'description': definition.description || ''
                    });
                });
                resolve(processInstances);
            });
        });
    });
}

function getDefaultTask(superagent) {
    return new Promise((resolve, reject) => {
        superagent.get('http://localhost:8080/engine-rest/engine/default/task')
            .end((err, res) => {
                if (err) {
                    reject(err);
                    return 0;
                }
                var response = JSON.parse(res.text);
                resolve(response);
            });
    });
}

function getProcessVariables(superagent, processInstanceId) {
    return new Promise((resolve, reject) => {
        superagent.get('http://localhost:8080/engine-rest/process-instance/' + processInstanceId + '/variables')
            .end((err, res) => {
                if (err) {
                    reject(err);
                    return 0;
                }
                var response = JSON.parse(res.text);
                resolve(response);
            });
    });
}

function updateProcessVariables(superagent, processInstanceId, params) {

    const vars = {};

    if (params && params.length > 0) {

        params.forEach((contextItem) => {
            vars[contextItem.key] = {
                "value": contextItem.value
            };
        });
    }

    return new Promise((resolve) => {
        superagent.post('http://localhost:8080/engine-rest/process-instance/' + processInstanceId + '/variables')
            .send(
                { "modifications": vars })
            .end(() => {
                resolve();
            });
    });
}


function submitTask(task) {

    const vars = {};

    if (task.context && task.context.length > 0) {

        task.context.forEach((contextItem) => {
            vars[contextItem.key] = {
                "value": contextItem.value
            };
        });
    }

    return new Promise((resolve, reject) => {
        taskService.submitForm({
            id: task.taskId,
            variables: vars
        }, function (data) {
            resolve(data);
        }, function (error) {
            reject(error);
        });
    });
}

function init(camundaSDK, apiUri) {
    CamSDK = camundaSDK;
    camClient = new CamSDK.Client({
        mock: false,
        // the following URL does not need authentication,
        // but the tradeof is that some requests will fail
        // e.g.: some filters use the reference to the user performing the request
        apiUri: apiUri || 'http://localhost:8080/engine-rest'
    });

    processDefinitionService = new camClient.resource('process-definition');
    processInstanceService = new camClient.resource('process-instance');
    taskService = new camClient.resource('task');
    filterService = new camClient.resource('filter');
}

module.exports = {
    initialize: init,
    startProcess: startProcess,
    listProcessInstances: listProcessInstances,
    listProcessDefinitions: listProcessDefinitions,
    camClient: camClient,
    getDefaultTask: getDefaultTask,
    submitTask: submitTask,
    getProcessVariables: getProcessVariables,
    updateProcessVariables: updateProcessVariables
};