const { startProcess, listProcessInstances, listProcessDefinitions, initialize, getDefaultTask, submitTask, getProcessVariables, updateProcessVariables } = require('./camunda');

function getTaskRouter(apiRouter, superagent) {
    //Declarations
    var guideManagementRouter = apiRouter;


    // GET workflow definitions list
    guideManagementRouter.route('/userJourneyManagement/v1/definition')
        .get(function (req, res) {
            listProcessDefinitions().then((definitions) => {
                res.json(definitions);
            }, () => {
                res.json([]);
            })
        });

    guideManagementRouter.route('/orchestration/v1/guidedflow/:processDefinitionId')
        .post(function (req, res) {
            var processDefinitionId = req.params.processDefinitionId;
            startProcess(processDefinitionId).then(() => {
                getDefaultTask(superagent).then((tasks) => {
                    if (tasks) {
                        let activeTask = tasks.filter(t => t.processDefinitionId === processDefinitionId);
                        if (activeTask && activeTask.length > 0) {
                            activeTask = activeTask[0];
                        }

                        if (activeTask) {
                            res.json({
                                "taskId": activeTask.id,
                                "name": activeTask.name,
                                "instanceId": activeTask.processInstanceId,
                                "description": activeTask.name,
                                "screenPath": activeTask.formKey,
                                "workflowName": activeTask.processDefinitionId
                            });
                        } else {
                            res.json(null);
                        }

                    } else {
                        res.json(null);
                    }
                }, () => {
                    res.json(null);
                })
            }, () => {
                res.json(null);
            });
        });

    guideManagementRouter.route('/mocks/orchestration/getDefaultTask')
        .get(function (req, res) {
            getDefaultTask(superagent).then((tasks) => {
                res.json(tasks);
            }, () => {
                res.json([]);
            })
        });


    // GET task info and next data
    guideManagementRouter.route('/orchestration/v1/guidedflow/:workflowdefinitionid/instance/:instanceId')
        .post(function (req, res) {
            var workflowdefinitionid = req.params.workflowdefinitionid;
            var instanceId = req.params.instanceId;
            var action = req.body.action;
            if (action === 'next') {

                submitTask(req.body).then(() => {
                    getDefaultTask(superagent).then((tasks) => {
                        if (tasks) {
                            let activeTask = tasks.filter(t => t.processDefinitionId === workflowdefinitionid && t.processInstanceId === instanceId);
                            if (activeTask && activeTask.length > 0) {
                                activeTask = activeTask[0];
                            }

                            if (activeTask) {
                                res.json({
                                    "taskId": activeTask.id,
                                    "name": activeTask.name,
                                    "instanceId": activeTask.processInstanceId,
                                    "description": activeTask.name,
                                    "screenPath": activeTask.formKey,
                                    "workflowName": activeTask.processDefinitionId
                                });
                            } else {
                                res.json(null);
                            }

                        } else {
                            res.json(null);
                        }
                    }, () => {
                        res.json(null);
                    })
                }, () => {
                    res.json(null);
                });

            } else if (action === 'taskInfo') {

                getDefaultTask(superagent).then((tasks) => {
                    if (tasks) {
                        let activeTask = tasks.filter(t => t.processDefinitionId === workflowdefinitionid && t.processInstanceId === instanceId);

                        if (activeTask && activeTask.length > 0) {
                            activeTask = activeTask[0];
                        }

                        if (activeTask) {
                            res.json({
                                "taskId": activeTask.id,
                                "name": activeTask.name,
                                "instanceId": activeTask.processInstanceId,
                                "description": activeTask.name,
                                "screenPath": activeTask.formKey,
                                "workflowName": activeTask.processDefinitionId
                            });
                        } else {
                            res.json(null);
                        }

                    } else {
                        res.json(null);
                    }
                }, () => {
                    res.json(null);
                })

            } else if (req.body.action === 'updateContext') {

                updateProcessVariables(superagent, instanceId, req.body.context).then(() => {
                    res.json(null);
                });
                res.json(null);
            } else {
                getDefaultTask(superagent).then((tasks) => {
                    if (tasks) {
                        let activeTask = tasks.filter(t => t.processDefinitionId === workflowdefinitionid && t.processInstanceId === instanceId);

                        if (activeTask && activeTask.length > 0) {
                            activeTask = activeTask[0];
                        }

                        if (activeTask) {
                            res.json({
                                "taskId": activeTask.id,
                                "name": activeTask.name,
                                "instanceId": activeTask.processInstanceId,
                                "description": activeTask.name,
                                "screenPath": activeTask.formKey,
                                "workflowName": activeTask.processDefinitionId
                            });
                        } else {
                            res.json(null);
                        }

                    } else {
                        res.json(null);
                    }
                }, () => {
                    res.json(null);
                })
            }

        });


    // GET task info and next data
    guideManagementRouter.route('/orchestration/v1/guidedflow/:workflowdefinitionid/instance/:instanceId')
        .get(function (req, res) {
            var workflowdefinitionid = req.params.workflowdefinitionid;
            var instanceId = req.params.instanceId;

            getDefaultTask(superagent).then((tasks) => {
                // res.json(tasks);
                if (tasks) {
                    let activeTask = tasks.filter(t => t.processDefinitionId === workflowdefinitionid && t.processInstanceId === instanceId);

                    if (activeTask && activeTask.length > 0) {
                        activeTask = activeTask[0];
                    }


                    if (activeTask) {
                        res.json([
                            {
                                tasks: [{
                                    "taskId": activeTask.id,
                                    "taskName": activeTask.name,
                                    "instanceId": activeTask.processInstanceId,
                                    "description": activeTask.name,
                                    "screenPath": activeTask.formKey,
                                    "workflowName": activeTask.processDefinitionId,
                                    "status": "NotStarted"
                                }]
                            }
                        ]);
                    } else {
                        res.json(null);
                    }

                } else {
                    res.json(null);
                }
            }, () => {
                res.json(null);
            })

        });


    guideManagementRouter.route('/orchestration/v1/guidedflow/:workflowdefinitionId/instance/:instanceId/context')
        .get(function (req, res) {
            var instanceId = req.params.instanceId;
            getProcessVariables(superagent, instanceId).then((variables) => {

                const results = [];

                if (variables) {
                    for (const key in variables) {
                        if (variables.hasOwnProperty(key)) {
                            results.push({
                                key: key,
                                value: variables[key].value
                            })
                        }
                    }
                }

                res.json({
                    name: '',
                    description: '',
                    context: results
                });
            }, () => {
                res.json(null);
            })
        });



    return guideManagementRouter;
}


// always export router needed
module.exports = {
    initialize: initialize,
    getTaskRouter: getTaskRouter
};