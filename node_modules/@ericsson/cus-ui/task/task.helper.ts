import { TaskEnum } from './task.enum';
import { TaskConstants } from './task.constants';

/**
 * Create a TaskParamModel interface
 * workflowId type string
 * instanceId type string
 */
export interface TaskParamModel {
    workflowId: string;
    instanceId: string;
}

export class TaskHelper {

    /**
     * Sets referral url to take back when exiting guidedflow
     * @param storage
     * @param workflow
     * @param url
     */
    static saveReferralUrl(storage, workflow, url: string) {
        let referralEntity = { workflow: workflow, referralUrl: url };
        storage.set(TaskEnum.REFERRAL_URL, referralEntity);
    }

    /**
     * Get the taskParams from router url
     * @return TaskParams: TaskParamModel
     */
    static getTaskParams(): TaskParamModel {
        let url: string = window.location.href;
        let taskParams: Array<string> = [];

        if (url && url.length > 0) {
            // split to get task info part of url
            taskParams = (url.split(`${TaskConstants.GUIDE_ROUTE_PATH}/`)[1]) ?
            (url.split(`${TaskConstants.GUIDE_ROUTE_PATH}/`)[1]).split('/', 2) : [];
        }

        return {
            workflowId: taskParams[0] || null,
            instanceId: taskParams[1] || null
        };
    }
}
