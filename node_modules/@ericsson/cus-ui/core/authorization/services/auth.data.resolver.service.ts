import { Injectable, Inject, InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Resolve, RouterStateSnapshot } from '@angular/router';
import { AuthorizationCacheService } from './authorization.cache.service';
import { Permission } from '../models';
export const AUTH_PERMISSION_URL = new InjectionToken<string>('auth_permission_url');

@Injectable()
export class AuthDataResolver implements Resolve<Permission> {

    constructor(private _authorizationCacheService: AuthorizationCacheService,
        private http: HttpClient,
        @Inject(AUTH_PERMISSION_URL) private authPermissionUrl: string) { }

    resolve(_,
        state: RouterStateSnapshot): Observable<Permission> {
        let tpgname = this.getTpgName(state.url);
        let httpOptions = {
            params: new HttpParams().set('tpgname', tpgname)
        }
        return this.http.get(this.authPermissionUrl, httpOptions)
            .map((res) => {
                this._authorizationCacheService.set(tpgname, res);
            })
            .catch((error: Response) => { return Observable.throw(error); });
    }

    /**
    * get tpgname from accessing url
    */
    getTpgName(url) {
        let startPos: number = url.indexOf('/') + 1;
        let endPos: number = url.indexOf('/', 1);
        let tpgname: string;
        if (endPos !== -1) {
            tpgname = url.substring(startPos, endPos);
        } else {
            tpgname = url.substring(startPos);
        }
        return tpgname;
    }
}
