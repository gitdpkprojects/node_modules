import { Injectable } from '@angular/core';
import { AuthorizationCacheService } from './authorization.cache.service';
import { Observable } from 'rxjs';

@Injectable()
export class AuthorizationService {

  constructor(private _authorizationCacheService: AuthorizationCacheService) { }

  /**
   * API that authorizes a profile based on resource
   * @param resource
   */
  isAuthorized(resource: string): Observable<boolean> {

    let tpgName = this.getTpgName(resource);

    return new Observable<boolean>(observer => {
      this._authorizationCacheService.get(tpgName).subscribe((permissions) => {
        if (!permissions) {
          observer.next(false);
        } else {
        observer.next(this.isAllowed(permissions, resource));
        }
      });
    });
  }

  /**
   * get tpgname from accessing resource
   */
  getTpgName(resource): string {
    let startPos: number = resource.indexOf('/') + 1;
    let endPos: number = resource.indexOf('/', 1);
    let tpgname: string;
    if (endPos !== -1) {
      tpgname = resource.substring(startPos, endPos);
    } else {
      tpgname = resource.substring(startPos);
    }
    return tpgname;
  }

  /**
   * check if a resource is allowed
   * @param permissions
   * @param resource
   */
  isAllowed(permissions, resource): boolean {
    let absoluteResourceRegExp = /^\w+:.*?(:)\d*/;
    let matchedPermission = permissions.find(function (element) {
      let relativeResource = element.resource.replace(absoluteResourceRegExp, '');
      let relativeResourceRegExp = new RegExp(relativeResource + '$');
      return relativeResourceRegExp.test(resource);
    });
    return !!matchedPermission;
  }
}
