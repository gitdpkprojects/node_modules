import { Injectable } from '@angular/core';
import { Storage } from './storage.strategy';
import { StorageDataModel } from './model/storage.model';

@Injectable()
export class LocalStorage implements Storage {
    /**
     * API used to save data in browser's localStorage
     * @param key
     * @param value
     * @param expires
     */
    set(key: string, value: any, expires?: number): void {
        let data: StorageDataModel = this.buildData(value, expires);
        this.setItem(key, data);
    }
    /**
     * used to build localStorageData
     * @param saveData
     * @param expires
     */
    private buildData(saveData: any, expires?: number): StorageDataModel {
        let expiresDateTime: Date = expires ? new Date(Date.now() + expires) : null;
        let localStorageData: StorageDataModel = {
            value: saveData,
            expires: expiresDateTime ? expiresDateTime.toISOString() : null
        };
        return localStorageData;
    }
    /**
     * wrapper to set value in browser's localStorage
     * @param key
     * @param data
     */
    private setItem(key: string, data: StorageDataModel): void {
        localStorage.setItem(key, JSON.stringify(data));
    }
    /**
     * API used to fetch data from browser's localStorage
     * @param key
     */
    get(key: string): any {
        let localStorageData: StorageDataModel = this.getItem(key);
        if (localStorageData) {
            let isStorageExpired: boolean = this.isExpired(localStorageData.expires);
            if (!isStorageExpired) {
                return localStorageData.value;
            } else {
                this.remove(key);
                return null;
            }
        }
        return null;
    }
    /**
     * wrapper to get value from browser's localStorage
     * @param key
     * @param data
     */
    private getItem(key: string): StorageDataModel {
        return JSON.parse(localStorage.getItem(key));
    }
    /**
     * used to send expiry status of fetched data
     * @param expires
     */
    private isExpired(expires: string): boolean {
        let expiresDateTime: Date = expires ? new Date(expires) : null;
        let currentTime: Date = new Date();
        if (expiresDateTime && expiresDateTime < currentTime) {
            return true;
        }
        return false;
    }
    /**
     * API used to remove the mentioned key from local storage
     * @param key
     */
    remove(key: string): void {
        localStorage.removeItem(key);
    }
}
