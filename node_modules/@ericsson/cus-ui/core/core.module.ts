import { NgModule, ModuleWithProviders } from '@angular/core';
import { ApplicationService } from './services';
import { TabModule } from './tabs';
import { FunctionControlModule } from './function-control';
import { CommonModule, ApplicationSettings, HttpInterceptor, RESTInterceptor } from '../common';
import { CommonModule as AngularCommonModule } from '@angular/common';
import { I18nModule, TranslationService } from '../i18n';
import { LoggerModule } from '../logger';
import { AuthenticationModule } from './authentication';
import { AuthorizationModule } from './authorization';
import { OdenModule, ModalHelperService, ModalService } from '@ericsson/oden/modules';
import { Http, RequestOptions, XHRBackend } from '@angular/http';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { UserService } from '@ericsson/oden/core';
import { CUSUserService } from './authorization';
import { StorageModule } from './storage';
import { PersonalizationModule } from './personalization';

const MODULE_IMPORTS = [
    AngularCommonModule,
    AuthenticationModule,
    OdenModule,
    TabModule,
    CommonModule,
    I18nModule,
    LoggerModule,
    AuthorizationModule,
    FunctionControlModule,
    StorageModule,
    PersonalizationModule
]

const HTTP_INTERCEPTOR_PROVIDER = {
    provide: Http,
    useFactory: httpFactory,
    deps: [XHRBackend, RequestOptions, ModalHelperService, ModalService, ApplicationSettings, TranslationService]
}

const REST_INTERCEPTOR_PROVIDER = {
    provide: HTTP_INTERCEPTORS,
    useClass: RESTInterceptor,
    multi: true
}

const MODULE_PROVIDERS = [
    ApplicationService,
    { provide: UserService, useClass: CUSUserService },
    HTTP_INTERCEPTOR_PROVIDER,
    REST_INTERCEPTOR_PROVIDER
]

@NgModule({
    imports: MODULE_IMPORTS,
    providers: [],
    entryComponents: []
})

export class CoreModule {
    static forRoot(): ModuleWithProviders {
        return {
            ngModule: CoreModule,
            providers: MODULE_PROVIDERS
        };
    }
}

export function httpFactory(backend: XHRBackend, options: RequestOptions, modalHelperService: ModalHelperService,
    modalService: ModalService, appSettings: ApplicationSettings, translate: TranslationService) {
    return new HttpInterceptor(backend, options, modalHelperService, modalService, appSettings, translate);
}
