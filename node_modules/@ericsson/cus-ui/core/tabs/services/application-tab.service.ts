import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { TabsItem } from '../models/tabs-item.model';
import { Router } from '@angular/router';
import { MainMenuService } from '../../../common/services/mainmenu.service';
import { NavigationHelper } from '@ericsson/oden/core';

@Injectable()
export class ApplicationTabService {
    menuDataCache: any;
    applicationTabDataCache: Map<string, TabsItem[]> = new Map<string, TabsItem[]>();
    constructor(private route: Router, private mainMenuService: MainMenuService) { }
    /**
     * Return Application TabArrayList
     */
    getAppTabs(): Observable<Array<TabsItem>> {
        return new Observable<Array<TabsItem>>((observer) => {

            let basePath = this.getBasePath(this.route.url);
            let appName = this.getCurrentAppName(basePath);

            if (this.applicationTabDataCache.has(appName)) {
                observer.next(this.applicationTabDataCache.get(appName));
            } else if (this.menuDataCache) {
                let tabList = this.getCurrentAppTabs(this.menuDataCache, appName);
                observer.next(tabList);
            } else {
                this.mainMenuService.getRoutes().subscribe((data) => {
                    this.menuDataCache = this.mainMenuService.sort_routes(data);
                    appName = this.getCurrentAppName(basePath);
                    let tabList = this.getCurrentAppTabs(this.menuDataCache, appName);
                    observer.next(tabList);
                })
            }
        });
    }

    /**
     * data holds application URL data
     * appName holds the current application name
     * @param data
     * @param appName
     */
    private getCurrentAppTabs(data, appName): Array<TabsItem> {
        let tabsList: Array<TabsItem> = [];
        let tabData = data.filter(t => t.parentApp && (t.parentApp === appName) && NavigationHelper.isInternalURL(t.path));
        if (tabData && tabData.length > 0) {
            tabData.forEach((obj, index) => {
                tabsList.push(new TabsItem(index, obj.label, obj.path));
            });
        }
        // Setting TabListData to cache variabe
        this.applicationTabDataCache.set(appName, tabsList);
        return tabsList;
    }

    /**
     * which returns the application base path
     * @param resource
     */
    private getBasePath(resource: string): string {
        return resource && resource.split('/').length > 1 ? resource.split('/')[1] : null;
    }

    /**
    * which returns the application name
    * @param basePath
    */
    private getCurrentAppName(basePath: string): string {
        if (this.menuDataCache) {
            let menus = this.menuDataCache.filter(t => t.path === basePath && t.applicationName && t.applicationName.length > 0);
            return menus && menus.length > 0 ? menus[0].applicationName : null;
        }
        return null;
    }
}
