import { Injectable, Inject, InjectionToken } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LoggerService } from '../../logger';
import { ApplicationSettings } from '../../common/services/application.settings.service';
import { SessionStrategy } from './session_strategy';
import { DialogService } from '../../common/services/dialog.service';

export const GET_TIME_LEFT_URL = new InjectionToken<string>('get_time_left_url');

@Injectable()
export class OpenAMSessionStrategy implements SessionStrategy {

    timeLeft: number = 0;
    WARNING_TIME: number = 0;
    AUTO_LOGOUT_MIN_TIME: number = 0;
    SESSION_CHECK: number = 0;
    REALM: string;
    private warningDialogShown: boolean = false;
    constructor(private _http: HttpClient,
        private _logger: LoggerService,
        private _appSettings: ApplicationSettings,
        private _dialogService: DialogService,
        @Inject(GET_TIME_LEFT_URL) public getTimeLeftUrl: any) {
        this.WARNING_TIME = (this._appSettings.getIntValue('AUTO_LOGOUT_WARNING_TIME') || 15) * 60;
        this.AUTO_LOGOUT_MIN_TIME = (this._appSettings.getIntValue('AUTO_LOGOUT_MIN_TIME') || 1) * 60;
        this.SESSION_CHECK = (this._appSettings.getIntValue('SESSION_CHECK') || 30) * 1000;
        this.REALM = this._appSettings.getStringValue('REALM');
    }

    getExpiry() {
        return this._http.get(this.getTimeLeftUrl).catch(this.handleError);
    }

    init() {
        this.startTracking();
    }

    startTracking() {
        setTimeout(() => {
            this.getExpiry().subscribe(
                (result: ITimeLeftResponse) => {
                    // remaining time response
                    this.timeLeft = result.maxtime;
                    if (this.WARNING_TIME > this.timeLeft && this.timeLeft > this.AUTO_LOGOUT_MIN_TIME
                        && !this.warningDialogShown) {
                        this._dialogService.showLogoutAlert(this.getTimeLeft()) // triggers warning before 300 sec of session timeout
                        this.warningDialogShown = true;
                    }
                    // session expired, redirect to logout page
                    if (this.AUTO_LOGOUT_MIN_TIME > this.timeLeft) {
                        this.logout(false);
                    } else {
                        // do the next rest call
                        this.startTracking();
                    }
                }, (error) => {
                    // 401 or 403 error handling
                    if (error.status === 0 && !error.url && error.statusText === '') {
                        this.navigateToLogin();
                    } else if (error.status === 401 || error.status === 403 || error.status === 500) {
                        this._logger.error(`Session timeout rest service failed with error code ${error.status}.`);
                    }
                }
            );
        }, this.SESSION_CHECK); // session timeout check happens every 30 seconds
    }

    /*
    Handle errors from autoLogout() rest call
    */
    private handleError(error: Response) {
        return Observable.throw(error);
    }

    /*
    * Get time left
    */
    private getTimeLeft(): number {
        return Math.ceil(this.timeLeft / 60);
    }

    /**
     * Navigate to Login if session fails
     */
    navigateToLogin(): void {
        let logoutUrl: string = this._appSettings.getStringValue('LOGOUT_URL');
        if (logoutUrl) {
            let currentUrl = encodeURIComponent(window.location.href);
            let loginUrl = `${logoutUrl}?goto=${currentUrl}&&realm=${this.REALM}`;
            window.location.href = loginUrl;
        }
    }

    /**
     * Navigate to Logout
     */
    navigateToLogout() {
        this.navigateToLogin();
    }

    /**
    * Navigate to Logout without alert if sessiontimeouts else show alert if logged out manually
    */
    logout(showConfirmation): void {
        if (showConfirmation) {
            this._dialogService.showLogoutConfirmationAlert().subscribe((canLogout) => {
                if (canLogout) {
                    this.navigateToLogout();
                }
            });
        } else {
            this.navigateToLogout();
        }
    }
}

interface ITimeLeftResponse {
    maxtime: number;
}
