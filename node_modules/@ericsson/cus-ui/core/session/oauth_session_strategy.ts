import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';
import { SessionStrategy } from './session_strategy';
import { ApplicationSettings } from '../../common/services/application.settings.service';
import { DialogService } from '../../common/services/dialog.service'
import { Observable } from 'rxjs/Observable';
import { UserProfileService } from '../../common/services/user.profile.service';
import { User } from '../../common/models/user.model';

@Injectable()
export class OAuthSessionStrategy implements SessionStrategy {
    warningDialogShown: boolean = false;
    private _renderer: Renderer2;
    timeLeft: number = 0;
    WARNING_TIME: number = 0;
    expiryTime: any;

    constructor(
        private rendererFactory: RendererFactory2,
        private _appSettings: ApplicationSettings,
        private _dialogService: DialogService,
        private _userProfileService: UserProfileService
    ) {
        this.WARNING_TIME = (this._appSettings.getIntValue('AUTO_LOGOUT_WARNING_TIME') || 15) * 60;
        this._renderer = this.rendererFactory.createRenderer(null, null);
        document.addEventListener('sessionChange', (event: CustomEvent) => {
            this.onSessionChange(event.detail);
        });

        this._userProfileService.getProfileData().subscribe((user: User) => {
            if (user && user.profile && user.session && user.session.expiry) {
                this.expiryTime = parseInt(user.session.expiry, 10);
            }
        });
    }

    init(): void {
        this.injectIframe('./session-management.html', 'rp_session_mgmt');
        this.injectIframe(this._appSettings.getStringValue('OP_IFRAME_URL'), 'op_session_mgmt');
    }

    /**
     * Creates an iframe with the given src and id
     * @param src
     * @param id
     */
    private injectIframe(src: string, id: string): void {
        if (src) {
            let iframe = this._renderer.createElement('iframe') as HTMLElement;
            iframe.setAttribute('src', src);
            iframe.setAttribute('id', id);
            iframe.style.width = '0';
            iframe.style.height = '0';
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
        }
    }

    private onSessionChange(data): void {
        if (data && data.isSessionActive) {
            this.getExpiry().subscribe(timeLeft => {
                this.timeLeft = timeLeft;
                if (this.timeLeft && (this.WARNING_TIME > this.timeLeft) && !this.warningDialogShown) {
                    this._dialogService.showLogoutAlert(this.getTimeLeft());
                    this.warningDialogShown = true;
                }
            });
        } else {
            this.logout(false);
        }
    }

    /**
     * Returns date difference in minutes
     * @param expiryTime
     * @param timeNow
     */
    getExpiry(): Observable<any> {
        let expiryTime = this.expiryTime;
        let timeLeft = 0;
        if (expiryTime) {
            let diff = Math.floor(new Date(expiryTime).getTime() - new Date().getTime());
            timeLeft = Math.floor(diff / 1000);
        }
        return Observable.fromPromise(Promise.resolve(timeLeft));
    }

    /**
     * Returns timeleft in minutes
     */
    getTimeLeft() {
        return Math.ceil(this.timeLeft / 60);
    }

    /**
     * Navigate to Logout
     */
    navigateToLogout() {
        localStorage.removeItem('JWT_TOKEN');
        localStorage.removeItem('SESSION_STATE');
        let logoutURL = this._appSettings.getStringValue('LOGOUT_URL');
        if (logoutURL) {
            window.location.href = document.getElementsByTagName('base')[0].href + logoutURL;
        }
    }

    logout(showConfirmation): void {
        if (showConfirmation) {
            this._dialogService.showLogoutConfirmationAlert().subscribe((canLogout) => {
                if (canLogout) {
                    this.navigateToLogout();
                }
            });
        } else {
            this.navigateToLogout();
        }
    }
}
