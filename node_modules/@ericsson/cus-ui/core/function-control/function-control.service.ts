import { Injectable, Inject, InjectionToken } from '@angular/core';
import { FunctionControlCacheService } from './function-control-cache.service';
import { Observable, Subscriber } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { FunctionControlStatusResult, FunctionControlStatus } from './models';
export const FUNCTION_CONTROL_STATUS_URL = new InjectionToken<string>('function_control_status_url');

@Injectable()
export class FunctionControlService {

    constructor(private _cacheService: FunctionControlCacheService,
        private http: HttpClient,
        @Inject(FUNCTION_CONTROL_STATUS_URL) private functionControlUrl: string
    ) {
    }

    /**
     * API that gets function control data
     * @param requestedFunctionIds
     */
    private getFunctionControlData(requestedFunctionIds: string[]): Observable<FunctionControlStatusResult[]> {

        // rest api with query params
        let params = new HttpParams().set('id', requestedFunctionIds.toString());
        let httpOptions = { params: params };

        return this.http.get<FunctionControlStatusResult[]>(this.functionControlUrl, httpOptions)
            .map((res) => {
                this._cacheService.set(res);
                return res;
            })
            .catch((error: Response) => { return Observable.throw(error); });
    }

    /**
     * Method returns function control status for queried function ids
     * @param functionIds
     * @returns {Observable<FunctionControlStatus | boolean>}
     */
    isFunctionActive(functionIds: string[] | string): Observable<FunctionControlStatus | boolean> {
        if (functionIds && functionIds.length === 0) {
            return Observable.empty<FunctionControlStatus>();
        }

        if (typeof functionIds === 'string') {
            return new Observable<boolean>(observer => {
                this.checkFunctionActive([functionIds], observer, false);
            })
        } else {
            return new Observable<FunctionControlStatus>(observer => {
                this.checkFunctionActive(functionIds, observer, true);
            })
        }
    }

    /**
     * Checks Function Active status
     * @param functionIds
     * @param observer
     * @param multi
     */
    private checkFunctionActive(functionIds: string[], observer: Subscriber<any>, multi: boolean) {
        this._cacheService.get(functionIds).subscribe(
            (data) => {
                // data holds cachedFunctionIdResults and requestedFunctionIds
                let result: FunctionControlStatus;
                if (data.unCachedIds.length > 0) {
                    this.getFunctionControlData(data.unCachedIds).subscribe(
                        (response) => {
                            let results = data.cachedResults.concat(response);
                            result = new FunctionControlStatus(results);
                            if (multi) {
                                observer.next(result);
                            } else {
                                observer.next(result.get(functionIds[0]));
                            }
                        }, (error) => {
                            throw new Error(`Error in getting requested function ids : ${error}`);
                        }
                    );
                } else {
                    result = new FunctionControlStatus(data.cachedResults);
                    if (multi) {
                        observer.next(result);
                    } else {
                        observer.next(result.get(functionIds[0]));
                    }
                }
            }, (error) => {
                throw new Error(`Error in getting cached function ids : ${error}`);
            }
        );
    }
}
