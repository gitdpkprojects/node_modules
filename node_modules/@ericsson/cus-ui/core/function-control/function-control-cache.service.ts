import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { FunctionControlStatusResult } from './models';

@Injectable()
export class FunctionControlCacheService {
    private dataCache: FunctionControlStatusResult[] = [];
    constructor() {
    }

    /**
    * Get function control Data - cachedFunctionIdResults and requestedFunctionIds
    * @param functionId
    */
    get(functionIds: string[]): Observable<any> {
        return new Observable<any>(observer => {
            let cachedResults = [];
            if (this.dataCache && this.dataCache.length > 0) {
                cachedResults = this.getCachedResults(functionIds, this.dataCache);
            }
            let unCachedIds = this.getUncachedIds(functionIds, cachedResults);
            if (cachedResults && unCachedIds) {
                observer.next({ 'cachedResults': cachedResults, 'unCachedIds': unCachedIds });
            }
        });
    };

    /**
     * Set function control Data
     * @param fuctionId
     * @param data
     */
    set(data: FunctionControlStatusResult[]): void {
        if (data && data.length > 0) {
            data.forEach((item) => {
                let functionId = this.dataCache.find((t) => t.functionId === item.functionId);
                if (!functionId) {
                    this.dataCache.push(item);
                }
            });
        }
    }

    /**
     * Gets function ids after caching
     * @param functionIds
     * @param cachedFunctionIdResults
     */
    private getUncachedIds(functionIds, cachedResults) {
        let matchedFunctionIds = cachedResults.map((item) => item.functionId);
        return functionIds.filter(function (fnId) {
            return matchedFunctionIds.indexOf(fnId) < 0;
        });
    }

    /**
     * Gets cached function id results
     * @param functionIds
     * @param dataCache
     */
    private getCachedResults(functionIds, dataCache) {
        return dataCache.filter(function (fnStatus) {
            return functionIds.indexOf(fnStatus.functionId) >= 0;
        });
    }

}
