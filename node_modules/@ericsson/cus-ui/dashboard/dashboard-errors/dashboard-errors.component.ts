import { Component, Output, EventEmitter, Input, OnChanges, SimpleChanges } from '@angular/core';
import { ActionItem, ElementOverlayConfig } from '@ericsson/oden/core';
import { ELEMENT_OVERLAY_STATE } from '@ericsson/oden/constants';
import { TranslationService } from '../../i18n';

@Component({
  selector: 'cus-dashboard-errors',
  templateUrl: './dashboard-errors.component.html',
  styleUrls: ['./dashboard-errors.component.scss']
})

export class DashboardErrorComponent implements OnChanges {
  @Input() errorText?: string;
  @Input() noDataTitle?: string;
  @Input() actionType: string;
  public isDashboardError: boolean;
  private actionItems: Array<any>;

  @Output() onRetryClicked: EventEmitter<null> = new EventEmitter<null>();
  overlayConfig: ElementOverlayConfig = new ElementOverlayConfig({ state: ELEMENT_OVERLAY_STATE.NONE });

  constructor(private translate: TranslationService) {

  }

  ngOnChanges(_changes: SimpleChanges) {
    switch (this.actionType) {
      case 'serverError':
        this.setOverlayProperties(ELEMENT_OVERLAY_STATE.ERROR,
          this.translate.instant('com.ericsson.bss.rm.common.system_error_title'),
          this.errorText,
          true,
          true,
          []);
        break;
      case 'noDataError':
        this.setOverlayProperties(ELEMENT_OVERLAY_STATE.NOTICE,
          this.translate.instant('com.ericsson.bss.rm.cus.dashboard.nowidgets_configured_title'),
          this.translate.instant('com.ericsson.bss.rm.cus.dashboard.nowidgets_configured_message'),
          true,
          true,
          []);
        break;
      case 'widgetServerError':
        this.actionItems = [new ActionItem({ label: this.translate.instant('com.ericsson.bss.rm.cus.retry'), action: '' })];
        this.setOverlayProperties(ELEMENT_OVERLAY_STATE.ERROR,
          this.translate.instant('com.ericsson.bss.rm.cus.dashboard.error_title'),
          this.errorText,
          false,
          false,
          this.actionItems);
        break;
      case 'widgetNoDataError':
        this.setOverlayProperties(ELEMENT_OVERLAY_STATE.NOTICE,
          this.noDataTitle,
          null,
          false,
          false,
          []);
        break;
      default:

    }
  }
  /**
    Triggers on click of retry button
   */
  retryCall() {
    this.onRetryClicked.emit();
  }
  /**
   * @param state
   * @param label
   * @param errorTxt
   * @param placeHolder
   * @param isDashboardError
   * @param actionItem
   * setting overlay properties
   */
  setOverlayProperties(state, label, errorTxt, placeHolder, isDashboardError, actionItem) {
    this.overlayConfig.state = state;
    this.overlayConfig.label = label;
    this.overlayConfig.text = errorTxt;
    this.overlayConfig.inlinePlaceholder = placeHolder;
    this.isDashboardError = isDashboardError;
    this.overlayConfig.actions = actionItem;
  }
}

