import { Component, OnInit, EventEmitter, HostBinding, ViewEncapsulation, OnChanges, Input, SimpleChanges } from '@angular/core';
import { Addon, OptionItem } from '@ericsson/oden';
import { BCOService } from '../services';
import { BCOChartData } from '../bco.model';
import { TYPE } from '../bco.constants';
import { TranslationService } from '../../../../i18n';
import * as _ from 'lodash';

@Component({
    selector: 'cus-areachart',
    templateUrl: './areachart.component.html',
    styleUrls: ['areachart.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class AreachartComponent implements OnInit, OnChanges {

    @HostBinding('class.area-chart') addClass: boolean = true;
    @Input() areaChartData: Array<BCOChartData> = [];
    @Input() areaChartAddons: Array<Addon> = [];
    onItemSelected$: EventEmitter<BCOChartData> = new EventEmitter<BCOChartData>();
    chartHeader: Array<OptionItem> = [
        new OptionItem({
            label: this._translate.instant('com.ericsson.bss.rm.cus.dashboard.bco_widget_area_chart_title')
        })
    ];
    defaultHeader: OptionItem = this.chartHeader[0];

    constructor(private _bcoService: BCOService,
        private _translate: TranslationService) {

    }

    ngOnInit() {
        // when active area changed using area selector dropdown then update areachart data respectively
        // and make sure that if you select any slice in areachart it should not reload areachart again
        this._bcoService.onActiveAreaChange$.subscribe(changedArea => {
            let activeArea = _.find(this.areaChartData, { 'active': true });
            if (activeArea && activeArea.id !== changedArea.id) { // check if changed area and active area are different
                this.areaChartData = this.areaChartData.map(areaChart => {
                    areaChart.selected = areaChart.id === changedArea.id;
                    return areaChart;
                });
            }
        })
    }
    ngOnChanges(changes: SimpleChanges) {
        if (changes['areaChartData'] && changes['areaChartData'].previousValue !== changes['areaChartData'].currentValue) {
            this.areaChartData = changes['areaChartData'].currentValue;
        }
        if (changes['areaChartAddons'] && changes['areaChartAddons'].previousValue !== changes['areaChartAddons'].currentValue) {
            this.areaChartAddons = changes['areaChartAddons'].currentValue;
        }
    }
    /**
     * triggers event when any section selected in chart
     * @param activeArea
     */
    onItemSelected(activeArea: BCOChartData) {
        if (activeArea) {
            // set active slice based on current selection
            this.areaChartData.forEach(chartData => {
                return chartData.active = chartData.id === activeArea.id;
            })
            // set active area in service, based on this app chart will load data
            this._bcoService.setActiveItem(activeArea, TYPE.AREA);
        }
    }
}
