import { Component, OnInit, ViewEncapsulation, HostBinding, Input, OnChanges, SimpleChanges } from '@angular/core';
import { Addon, OptionItem, UniversalService } from '@ericsson/oden';
import { BCOService } from '../services';
import { BCOChartData } from '../bco.model';
import { TYPE } from '../bco.constants';
import { Router } from '@angular/router';
import { NavigationHelper } from '@ericsson/oden/core';

@Component({
    selector: 'cus-entitychart',
    templateUrl: './entitychart.component.html',
    styleUrls: ['./entitychart.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class EntitychartComponent implements OnInit, OnChanges {

    @HostBinding('class.entity-chart') addClass: boolean = true;
    @Input() entitiesChartData: Array<BCOChartData> = [];
    @Input() entitiesChartAddons: Array<Addon> = [];
    appSelectorOptions: Array<OptionItem> = [];
    selectedApp: OptionItem;

    constructor(private _bcoService: BCOService,
        private _router: Router,
        private _universalService: UniversalService) {

    }

    ngOnInit() {
        this.loadAppSelector(); // adds app selector dropdown
        // when active app changed in appChart then update the same in app selector dropdown
        this._bcoService.onActiveAppChange$.subscribe(selectedApp => {
            this.selectedApp = this.appSelectorOptions.find(config => {
                return config.id === selectedApp.id;
            })
        })
    }
    ngOnChanges(changes: SimpleChanges) {
        if (changes['entitiesChartData'] && changes['entitiesChartData'].previousValue !== changes['entitiesChartData'].currentValue) {
            this.entitiesChartData = changes['entitiesChartData'].currentValue;
        }
        if (changes['entitiesChartAddons'] &&
            changes['entitiesChartAddons'].previousValue !== changes['entitiesChartAddons'].currentValue) {
            this.entitiesChartAddons = changes['entitiesChartAddons'].currentValue;
        }
    }
    /**
     * adds application selector option
     */
    loadAppSelector() {
        this._bcoService.appChartData$.subscribe((appChart) => {
            this.appSelectorOptions = appChart.map(app => {
                return new OptionItem({
                    label: app.label,
                    id: app.id,
                    selected: app.selected
                })
            });
            this.selectedApp = this.appSelectorOptions.find(group => {
                return group.selected;
            });
        });
    }
    /**
     * triggers event when any section selected in chart
     * @param activeEntity
     */
    onItemSelected() {
        // to-do: include what should happen when entity clicked
    }
    /**
     * OnChange event of dropdown
     * @param selectedApp
     */
    onChange(app: OptionItem) {
        // update active app in service, it will reload appchart based on active area
        let activeApp = this._bcoService.appChartDataStream.find(appChart => {
            return appChart.id === app.id;
        });
        this._bcoService.setActiveItem(activeApp, TYPE.APP);
    }
    /**
     * When link clicked, navigate to corresponding tpg screen
     * @param item
     */
    onLinkClick(item: BCOChartData) {
        const route = {
            path: item.link,
            externalApp: item.externalApp
        }
        NavigationHelper.navigateToRoute(route, this._router);
        if (route.externalApp) { // if externalApp then close universal layer
            this._universalService.hideUniversalOverlay();
        }
    }
}
