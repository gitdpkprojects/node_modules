import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';
import { BCOService } from './services/bco.service';
import { BCOChartData } from './bco.model';
import { Addon, SumAddon, LegendAddon, LoaderConfig } from '@ericsson/oden';

@Component({
    selector: 'cus-bco',
    styleUrls: ['bco.component.scss'],
    templateUrl: 'bco.component.html',
    encapsulation: ViewEncapsulation.None
})

export class BCOComponent implements OnInit {

    appChartData: Array<BCOChartData> = [];
    appChartLoaderConfig: LoaderConfig = new LoaderConfig();
    areaChartData: Array<BCOChartData> = [];
    areaChartLoaderConfig: LoaderConfig = new LoaderConfig();
    entitiesChartData: Array<BCOChartData> = [];
    entitiesChartLoaderConfig: LoaderConfig = new LoaderConfig();
    addOns: Array<Addon> = [];
    @Input() isVertical: boolean = true;

    constructor(private _bcoService: BCOService) {
        this.appChartLoaderConfig.visible = true;
        this.areaChartLoaderConfig.visible = true;
        this.entitiesChartLoaderConfig.visible = true;
    }

    ngOnInit() {
        // if latest configuration is not available dispaly in horizontal
        this.isVertical = document.querySelector(`cus-widget:nth-child(1) cus-bco`) ? false : true;
        this._bcoService.loadCharts();
        this.addOns = this.createAddons();
        // subscribe to areaChart data
        this._bcoService.areaChartData$.subscribe(value => {
            this.areaChartData = value;
            setTimeout(() => { // loader expects some delay else loader is always visible
                this.areaChartLoaderConfig.visible = false;
            })
        })
        // subscribe to appChart data
        this._bcoService.appChartData$.subscribe(value => {
            this.appChartData = value;
            setTimeout(() => {
                this.appChartLoaderConfig.visible = false;
            })
        })
        // subscribe to entityChart data
        this._bcoService.entitiesChartData$.subscribe(value => {
            this.entitiesChartData = value;
            setTimeout(() => {
                this.entitiesChartLoaderConfig.visible = false;
            })
        })
    }
    /**
     * Includes addons for charts
     */
    createAddons(): Array<Addon> {
        return [
            new SumAddon({
                label: 'Total Configurations'
            }),
            new LegendAddon()
        ]
    }
}
