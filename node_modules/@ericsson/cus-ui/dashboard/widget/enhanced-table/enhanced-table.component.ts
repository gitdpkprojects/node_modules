import { Component, Input, OnInit, AfterViewInit, ViewChild, ElementRef, ViewEncapsulation } from '@angular/core';
import { ActionItem } from '@ericsson/oden/core';
import { TableDataItem } from '../../models/table.data.item';
import { TableHeaderItem } from '@ericsson/oden/core/models'
import { FilterService } from '@ericsson/oden/core/services';
import * as _ from 'lodash';
import { ListControllerCategoryFilterGroup } from '@ericsson/oden/core/models';
import { EnhancedTableService } from './enhanced-table.service';
import { EnhancedTableDataModel } from './enhanced-table-data.model';
import { LoaderConfig } from '@ericsson/oden';

@Component({
    selector: 'cus-enhanced-table',
    templateUrl: 'enhanced-table.component.html',
    styleUrls: ['enhanced-table.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class EnhancedTableComponent implements OnInit, AfterViewInit {

    @ViewChild('enhancedTable') enhancedTable: ElementRef;

    @Input() set data(data: Array<any>) {
        if (data) {
            this._data = data;
            this.getCategoryItems();
            this.displayTableData = _.cloneDeep(data);
        } else {
            this._data = [];
            this.displayTableData = [];
        }
    }

    get data() {
        return this._data;
    }

    @Input() set headers(header: any[]) {
        if (header && header.length > 0) {
            this._header = header;
            this.getCategoryItems();
        } else {
            this._header = [];
        }
    }

    get headers() {
        return this._header;
    }

    private _data: Array<TableDataItem> = [];
    private _header: Array<TableHeaderItem> = [];
    loaderVisible: LoaderConfig = new LoaderConfig();
    currentFilterString: string = '';
    currentCategoryFilter: Array<any> = []
    displayTableData: TableDataItem[] = [];
    categoryFilterGroups: Array<ListControllerCategoryFilterGroup> = [];
    groupByFilter: ActionItem[];

    constructor(private filterService: FilterService, private enhancedTableService: EnhancedTableService) {
        this.loaderVisible.visible = true;
        this.enhancedTableService.getTableData();
        this.enhancedTableService.enhancedTabaleData$.subscribe(
            (result: EnhancedTableDataModel) => {
                if (result) {
                    this.loaderVisible.visible = false;
                    this.headers = result.headers || [];
                    this.data = result.data || [];
                }
            }, () => {
            });
    }

    getCategoryItems() {
        if (this.headers && this.headers.length > 0 && this.data && this.data.length > 0) {
            let categoryItems = this.enhancedTableService.populateCategoryFilters(this.data, this.headers);
            this.categoryFilterGroups = [
                new ListControllerCategoryFilterGroup({
                    label: 'State',
                    field: 'state',
                    items: categoryItems
                })
            ];
        }
    }

    ngOnInit(): void {
        this.filterService.empty();
    }

    // Callbacks for table
    onFilterTable(filter: string): void {
        this.currentFilterString = filter;
        this.displayTableData = this.enhancedTableService.filterData(this.data, this.currentFilterString, this.headers);

    }

    /**
     * Callbacks for category filtering table
     * @param object Consists of 'group' and 'ngModel'
     */
    onCategoryFilterTable(object: any): void {
        if (object.group.field === 'state') {
            let field = this.enhancedTableService.getCategoryFilterField(this.headers);
            const states = object.ngModel.map((o) => o['searchField']);
            this.filterService.setFilter('state', this.enhancedTableService.getCategoryFilterField(this.headers), function (_item) {
                let flag = false;
                states.forEach((state) => {
                    if (state === _item[field].state) {
                        flag = true;
                    }
                });
                if (flag) {
                    return _item;
                }
            });
        }
        this.displayTableData = this.enhancedTableService.filterData(this.data, this.currentFilterString, this.headers);
    }

    ngAfterViewInit() {
        setTimeout(() => {
            this.updateTableScrollHeight(); // update table's scroll height only if bco chart available
        }, 1000);
    }
    /**
     * update table scroll height based on bco-container height
     */
    private updateTableScrollHeight(): void {
        let bco = document.querySelector(`cus-widget:nth-child(2) .bco-container`);
        if (bco && window.innerWidth > 1023) { // update height only if BCO and Enhanced table are in same row
            this.enhancedTable.nativeElement.style.height = bco.clientHeight + 'px';
        }
    }
}
