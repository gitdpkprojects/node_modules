import { Component, OnInit, Input } from '@angular/core';
import { LoaderConfig } from '@ericsson/oden/modules';
import { ColorHelper } from '@ericsson/oden/core';
import { Widget } from './widget.model';
import { WidgetContainer } from './widget-container/widget-container.model';
import { WidgetService } from './widget.service';
import { Helpers } from '../helpers/helpers';
import { TranslationService } from '../../i18n';

@Component({
  selector: 'cus-widget',
  templateUrl: 'widget.component.html',
  styleUrls: ['widget.component.scss'],
  providers: [WidgetService]
})

export class WidgetComponent implements OnInit {

  @Input() widget: Widget;

  loaderConfig: LoaderConfig;
  containers: WidgetContainer[];
  errorText: string;
  noDataTitle: string;
  errorType: string;

  constructor(private _widgetService: WidgetService,
    private translate: TranslationService) {
    this.loaderConfig = new LoaderConfig();
    this.loaderConfig.visible = true;
  }

  ngOnInit() {
    this.updateLoaderStatus();
    this.containers = this.widget.containers.map((container) => {
      // Fallback to size 12
      container.size = container.size ? container.size : 12;
      return new WidgetContainer(container);
    });
    this._widgetService.widget = this.widget;
    this.getWidgetServiceData();
  }
  /**
   * Decides whether loader should be visible or not
   */
  updateLoaderStatus() {
    let type = this.widget.containers[0].sets[0].type;
    if (type === 'bco' || type === 'table') { // if BCO chart or table don't show loader
      this.loaderConfig.visible = false;
    } else {
      this.loaderConfig.visible = true;
    }
  }
  /**
    Method that subscribes for Widget Data
   */
  getWidgetServiceData() {
    this.updateLoaderStatus();
    this.errorType = '';
    this._widgetService.data.subscribe((data) => {
      this.loaderConfig.visible = false;
      if ((data && data.hasOwnProperty('length') && data.length === 0) || (!data)) {
        this.errorType = 'widgetNoDataError';
        this.noDataTitle = (this.widget.noDataTitle) ? this.translate.instant(this.widget.noDataTitle) :
          this.translate.instant('com.ericsson.bss.rm.cus.dashboard.nodata_title');
      }

    }, (error) => {
      setTimeout(() => {
        this.loaderConfig.visible = false;
        this.errorType = 'widgetServerError';
        let errorText = Helpers.getErrorText(error);
        errorText = errorText.length > 0 ? `${errorText},` : '';
        this.errorText = this.translate.instant('com.ericsson.bss.rm.cus.dashboard.error_message', { errorText: errorText });
      }, 1000 * 2);
    });
  }

  /**
    Getting color for each widget
   */
  getColor(index: number): string {
    let colors = ColorHelper.getBrandColors();
    return colors[index % colors.length];
  }

  /**
    Retry loading widget after initial loading
   */
  retryLoadingData(_e) {
    this.getWidgetServiceData();
  }
}
