/**
    Returns a value x-levels down in the map. IE: map-get-deep($colors, base-color, dark)
    returns $colors.base-color.dark value
*/
@function map-get-deep($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/**
    Returns the specific color form a map

    $color - The color to blend with $colors.base-color.dark
    $percentage - How much percent to blend
*/
@function get-color($map: base-color, $theme: light) {
    @return map-get-deep($colors, $map, $theme);
}

/**
    Returns a tinted color based on $colors.base-color

    $color - The color to blend with $colors.base-color.dark
    $percentage - How much percent to blend
*/
@function tint($color, $percentage) {
    @return mix(#fff, $color, $percentage * 100);
}

/**
    Returns a shaded color based on $colors.base-color

    $color - The color to blend with $colors.base-color.light
    $percentage - How much percent to blend
*/
@function shade($color, $percentage) {
    @return mix(#000, $color, $percentage * 100);
}

/**
    Returnes mixed color

    $palette - Nested map with 3 levels, last level should be colors
    $color-name - Name of color in $colors
    $color-theme - Name of theming type (ie: light/dark)
    $opacity - Sets the alpha channel in the color
    $color-mix - A mix function for color (ie: tint/shade)
    $color-mix-value - Value used in $color-mix function
*/
@function color-blender($palette, $color-name, $color-theme, $opacity, $color-mix, $color-mix-value) {
    @return transparentize(
        call(
            $color-mix, /* Color mixin (ie: tint or shade) */
            map-get-deep(
                $palette, /* Global map with colors */
                $color-name, /* Name of color in $colors (ie: brand-color) */
                $color-theme /* Name of theming in $color in $colors (light/dark) */
            ),
            $color-mix-value
        ),
        1 - $opacity
    );
}
