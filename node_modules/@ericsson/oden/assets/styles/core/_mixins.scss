@mixin text-selection($val) {
    -webkit-touch-callout: $val;
    -webkit-user-select: $val;
    -moz-user-select: $val;
    -ms-user-select: $val;
    -khtml-user-select: $val;
    user-select: $val;
}

@mixin box-shadow($hoff,$voff,$blur,$color) {
    -webkit-box-shadow: $hoff $voff $blur $color;
    -moz-box-shadow: $hoff $voff $blur $color;
    box-shadow: $hoff $voff $blur $color;
}

@mixin box-shadows($shadow...) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin transform($string){
    transform: $string;
    -webkit-transform: $string;
    -moz-transform: $string;
    -ms-transform: $string;
    -o-transform: $string;
}

@mixin animation($arguments) {
    -webkit-animation: $arguments;
    -moz-animation: $arguments;
    animation: $arguments;
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@mixin nested-table-list() {
    margin: 0 -16px;
    max-width: none;
    .cui-pagination {
        margin: 0 8px;
    }
}

@mixin overflow-auto() {
    overflow: auto;
    @include ie-scroll();
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        overflow: overlay;
    }
}
@mixin overflow-x-auto() {
    overflow-x: auto;
    @include ie-scroll();
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        overflow-x: overlay;
    }
}
@mixin overflow-y-auto() {
    overflow-y: auto;
    @include ie-scroll();
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        overflow-y: overlay;
    }
}

@mixin ie-scroll() {
    -ms-overflow-style: -ms-autohiding-scrollbar;
    scrollbar-base-color: #808080;
    scrollbar-track-color: #e5e5e5;
    scrollbar-shadow-color: #e5e5e5;
}

@mixin siblings-count-width($selector, $repeat: 0, $i: 1, $percent: 100) {
    > #{$selector}:nth-last-child(#{$i}),
    > #{$selector}:nth-last-child(#{$i}) ~ #{$selector} {
        width: calc(#{$percent / $i}% - 16px);
    }
    @if $i < $repeat {
        @include siblings-count-width($selector, $repeat, $i + 1, $percent);
    }
}

@mixin transition-delay($selector, $delay, $repeat: 0, $i: 1) {
    > #{$selector}:nth-child(#{$i}) {
        transition-delay: #{$delay * ($i - 1)}ms;
    }
    @if $i < $repeat {
        @include transition-delay($selector, $delay, $repeat, $i + 1);
    }
}

@mixin falling-zindex($selector, $startIndex, $repeat: 0, $i: 1) {
    > #{$selector}:nth-child(#{$i}) {
        z-index: #{$startIndex - $i};
    }
    @if $i < $repeat {
        @include falling-zindex($selector, $startIndex, $repeat, $i + 1);
    }
}
/*
    Decision made by Daniel N to have a custom color instead of the framework
    transparance colors, due to overlaps
*/
@mixin index-panel($background-color: $lightgrey4) {
    font-size:9px;
    position:absolute;
    transform: translateX(-100%);
    top: 15px;
    text-align: right;
    left: 8px;
    padding: 2px 3px 3px 6px;
    text-align: center;
    min-width: 10px;
    border-top-left-radius: 14px;
    border-bottom-left-radius: 14px;
    content: attr(data-index);
    background-color: $background-color;
    color: $darkgrey4;
    opacity: 0;
}

/*
Mixin for truncate text
*/
@mixin truncate-text() {
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/**
    Sets dark and light theme colors on a property

    $property - CSS selector to style
    $map-or-value - Name of color map inside $colors or map of values with one or more names of colors maps inside $colors
    $opacity - Sets the alpha channel in the color
    $color-mix-value - One of the values passed to the $color-mix function
    $color-mix - Function that takes 2 arguments and manipulates the color
*/
@mixin theming($property, $map-or-value: base-color, $opacity: 1, $color-mix-value: 0, $color-mix: tint) {
    $light: null;
    $dark: null;
    // If $map-or-color is not a map
    @if type-of($map-or-value) == 'map' {
        $light: transparentize(map-get-deep($colors, $map-or-value, light), 1 - $opacity);
        $dark: transparentize(map-get-deep($colors, $map-or-value, dark), 1 - $opacity);
    } @else {
        $map-light: ();
        $map-dark: ();
        // Loop all keys in map, if value is found Ã­n $colors then mix the color else append it as is
        @each $attr in $map-or-value {
            @if map-has-key($colors, $attr) {
                $map-light: append($map-light, color-blender($colors, $attr, light, $opacity, $color-mix, $color-mix-value));
                @if $color-mix == 'tint' {
                    $map-dark: append($map-dark, color-blender($colors, $attr, dark, $opacity, 'shade', $color-mix-value));
                }
                @if $color-mix == 'shade' {
                    $map-dark: append($map-dark, color-blender($colors, $attr, dark, $opacity, 'tint', $color-mix-value));
                }
            } @else {
                $map-light: append($map-light, $attr);
                $map-dark: append($map-dark, $attr);
            }
        }
        $light: $map-light;
        $dark: $map-dark;
    }

    // Set light and dark theme for the property
    #{$property}: $light;
    [theme=dark] & {
        #{$property}: $dark;
    }
}

/**
    Sets a specific color (from a map, ie base-color light theme) on an element

    $property - CSS property to set color on
    $map - The map of $colors the color should be based on (ie: base-color map)
    $theme - The theme to pick the color from light/dark
    $opacity - Sets the alpha channel in the color

    Usage: @include set-color(color, base-color, dark);
*/
@mixin set-color($property, $map: base-color, $theme: light, $opacity: 1) {
    #{$property}: transparentize(map-get-deep($colors, $map, $theme), 1 - $opacity);
}

/**
    Sets a tint of a color in dark and light theme, if light theme is used, the color gets lighter,
    if the dark theme is used the color get darker

    $property - CSS property to set color on
    $map - The map of $colors the color should be based on (ie: base-color map)
    $tint - Tint the color against dark and light colors, accepts values between 0-1
    $opacity - Sets the alpha channel in the color

    Usage: @include theming-tint(background-color, $base-color, $tint-20);
*/
@mixin theming-tint($property, $map: base-color, $tint: $opaque-100, $opacity: 1) {
    #{$property}: transparentize(tint(map-get-deep($colors, $map, light), $tint), 1 - $opacity);
    [theme=dark] & {
        #{$property}: transparentize(tint(map-get-deep($colors, $map, dark), $tint), 1 - $opacity);
    }
}

/**
    Tints a color from a map

    $property - CSS property to set color on
    $map - The map of $colors the color should be based on (ie: base-color map)
    $tint - Tint the color against dark and light colors, accepts values between 0-1
    $opacity - Sets the alpha channel in the color
*/
@mixin tint($property, $map: base-color, $tint: $opaque-100, $opacity: 1) {
    #{$property}: transparentize(tint(map-get-deep($colors, $map, light), $tint), 1 - $opacity);
}

/**
    Sets a shade of a color in dark and light theme, if light theme is used, the color gets darker,
    if the dark theme is used the color get lighter

    $property - CSS property to set color on
    $map - The map of $colors the color should be based on (ie: base-color map)
    $tint - Tint the color against dark and light colors, accepts values between 0-1
    $opacity - Sets the alpha channel in the color

    Usage: @include theming-shade(background-color, $base-color, $tint-20);
*/
@mixin theming-shade($property, $map: base-color, $tint: $opaque-100, $transparency: 1) {
    #{$property}: transparentize(shade(map-get-deep($colors, $map, light), $tint), 1 - $transparency);
    [theme=dark] & {
        #{$property}: transparentize(shade(map-get-deep($colors, $map, dark), $tint), 1 - $transparency);
    }
}

/**
    Shades a color from a map

    $property - CSS property to set color on
    $map - The map of $colors the color should be based on (ie: base-color map)
    $shade - Tint the color against dark and light colors, accepts values between 0-1
    $opacity - Sets the alpha channel in the color
*/
@mixin shade($property, $map: base-color, $shade: $opaque-100, $opacity: 1) {
    #{$property}: transparentize(shade(map-get-deep($colors, $map, light), $shade), 1 - $opacity);
}

@mixin clear-icon() {
    display: block;
    cursor: pointer;
    position: absolute;
    height: 16px;
    width: 16px;
    right: 8px;
    bottom: 13px;
    color: $lightgrey;
    &:before {
        @extend .cui-icon;
        @extend .cui-icon.small;
        @extend .cui-icon.icon-clear:before;
        top: 0;
        left: 0;
        height: 16px;
        width: 16px;
        font-size: 20px;
    }
}
