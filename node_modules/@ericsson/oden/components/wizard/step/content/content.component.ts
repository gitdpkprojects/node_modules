import {
    Component,
    ViewEncapsulation,
    HostBinding,
    Host,
    Inject,
    forwardRef,
    OnInit
} from '@angular/core';
import { WizardService } from '../../wizard.service';
import { StepComponent } from '../step.component';
import { ANIMATION } from '../../../../core/constants/animation.constants';
import { WIZARD_TYPE, WIZARD_DISPLAY_TYPE } from '../../../../core/constants/wizard.constats';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { WizardComponent } from '../../wizard.component';

@Component({
    selector: 'cui-wizard-content',
    templateUrl: 'content.component.html',
    styleUrls: ['content.component.scss'],
    encapsulation: ViewEncapsulation.None,
    animations: [
        trigger('active', [
            state('false', style({
                height: 0,
                overflow: 'hidden'
            })),
            state('true', style({
                height: '*',

            })),
            state('isHorizontalActive', style({
                opacity: 1
            })),
            state('isHorizontalInactive', style({
                opacity: 0
            })),
            transition('false <=> true', animate('300ms ' + ANIMATION.EASE_OUT_QUAD)),
            transition('isHorizontalInactive <=> isHorizontalActive', animate('300ms ' + ANIMATION.EASE_OUT_QUAD))
        ])
    ]
})

export class ContentComponent implements OnInit {
    @HostBinding('class.cui-wizard-content') addClass: boolean = true;
    displayType: WIZARD_DISPLAY_TYPE;
    public buttonDisabled: boolean = false;
    public active: string;
    constructor(@Host() @Inject(forwardRef(() => StepComponent)) public step: StepComponent,
        @Host() @Inject(forwardRef(() => WizardComponent)) public wizardComponent: WizardComponent,
        private _wizardService: WizardService) { }

    ngOnInit(): void {
        this.setActive();
        this.displayType = this.wizardComponent.displayType;
        this.wizardComponent.onDisplayTypeChange$.subscribe((displayType) => {
            this.displayType = displayType;
            this.setActive();
        });
        this.step.onEnter.subscribe(() => this.setActive());
        this.step.onLeave.subscribe(() => this.setActive());
    }

    /**
     * Returns true if step is active.
     * @return {string}
     */
    setActive(): void {
        if (this.displayType === WIZARD_DISPLAY_TYPE.HORIZONTAL) {
            if (this.step.active) {
                this.active = 'isHorizontalActive';
            } else {
                this.active = 'isHorizontalInactive';
            }
        } else {
            this.active = this.step.active.toString();
        }
    }

    /**
     * Changes step to next
     */
    previousStep() {
        this._wizardService.previousStep();
    }

    /**
     * Changes step to next
     */
    nextStep() {
        this._wizardService.nextStep();
    }

    /**
     * Check if next button should be disabled
     * @returns {boolean}
     */
    isNextDisabled() {
        return (!this.step.completed && !this.step.optional) && this.wizardComponent.type !== WIZARD_TYPE.NON_LINEAR;
    }
}
