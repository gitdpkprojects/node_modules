import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, forwardRef, Host, HostBinding, Inject, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { ANIMATION } from '../../../../core/constants/animation.constants';
import { StepComponent } from '../step.component';
import { WizardComponent } from '../../wizard.component';

@Component({
    selector: 'cui-wizard-summary',
    templateUrl: 'summary.component.html',
    styleUrls: ['summary.component.scss'],
    encapsulation: ViewEncapsulation.None,
    animations: [
        trigger('status', [
            state('*', style({
                height: '0px'
            })),
            state('completed', style({
                height: '*'
            })),
            transition('ongoing => completed', animate('300ms ' + ANIMATION.EASE_OUT_QUAD)),
            transition('completed => ongoing', animate('300ms ' + ANIMATION.EASE_OUT_QUAD))
        ])
    ]
})

export class SummaryComponent {
    @HostBinding('class.cui-wizard-summary') addClass: boolean = true;
    @ViewChild('template') template: TemplateRef<any>;

    constructor (@Host() @Inject(forwardRef(() => StepComponent))
    public step: StepComponent, @Inject(forwardRef(() => WizardComponent))
        private _wizardComponent: WizardComponent) { }

    /**
     * Returns status (if current step is completed or ongoing)
     * @return {string}
     */
    get status(): string {
        const status: boolean = ((this.step.completed || this._wizardComponent.isTimeline) && !this.step.active);
        if (status) {
            return 'completed';
        }
        return 'ongoing';
    }
}
