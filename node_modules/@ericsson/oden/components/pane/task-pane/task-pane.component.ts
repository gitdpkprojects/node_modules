import {
    Component,
    ComponentFactoryResolver,
    ComponentRef,
    EventEmitter,
    HostBinding,
    Output,
    ViewChild,
    ViewContainerRef,
    ViewEncapsulation
} from '@angular/core';
import { ITabs, ITabsItem } from '../../../core/interfaces/tabs.interface';
import { IPaneContent } from '../../../core/interfaces/pane-content.interface';
import { ComponentType } from '../../../core/interfaces/component-type.interface';
import { AppHeaderService } from '../../app-header/app-header.service';
import { Subscription } from 'rxjs/Subscription';
import { UnSub } from '../../../core/classes';
import { WhitelabelService } from '../../../core/services/whitelabel.service';
import { COLORWHITELABEL } from '../../../core/constants/color.whitelabel';

@Component({
    selector: 'cui-task-pane',
    templateUrl: 'task-pane.component.html',
    styleUrls: ['task-pane.component.scss'],
    encapsulation: ViewEncapsulation.None
})
@UnSub()
export class TaskPaneComponent implements IPaneContent {
    @HostBinding('attr.id') id: string = 'cui-task-pane';
    @HostBinding('class.cui-task-pane') public addClass: boolean = true;
    @HostBinding('class.scroll-area') isScrollArea: boolean = true;
    @HostBinding('class.open') public open: boolean = false;
    @HostBinding('style.z-index') public zIndex: number;

    @Output() activeTabChanged: EventEmitter<ITabsItem> = new EventEmitter();
    @ViewChild('output', {read: ViewContainerRef}) output;

    public tabsColor: string = '#FFF';
    public tabsBackground: string;
    public componentFactoryResolver: ComponentFactoryResolver;
    public outputComponent: any;
    public tabs: ITabs = [];
    stickyZIndex: number = 10;
    private _subscriptions: Subscription[] = [];

    constructor(_appHeaderService: AppHeaderService,
                private _whitelabelService: WhitelabelService) {
        this._subscriptions.push(_appHeaderService.onStickyZIndexChange$.subscribe((zIndex) => {
            this.stickyZIndex = zIndex;
        }));
        // On whitelabel change
        this._subscriptions.push(this._whitelabelService._whitelabelingLoaded.subscribe(() => {
            this.setWhitelabelColor();
        }));
        this.setWhitelabelColor();
    }

    /**
     * Function that will run when a new tab is accessed
     * @param {ITabsItem} tab
     */
    setActiveTab(tab: ITabsItem): void {
        this.activeTabChanged.emit(tab);
    }

    /**
     * Function to set com ponent that will be displayed inside the TaskPaneComponent
     * @param {ComponentType<C>} componentType
     * @returns {ComponentRef<ComponentType<C>>}
     */
    setContentComponent<C>(componentType: ComponentType<C>): ComponentRef<ComponentType<C>> {
        this.output.clear();
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        const componentRef = this.output.createComponent(factory);
        this.outputComponent = componentRef.instance;
        return componentRef;
    }

    private setWhitelabelColor() {
        this.tabsBackground = this._whitelabelService.getPropertyValue(COLORWHITELABEL.BRAND_PRIMARY);
    }
}
