import { Injectable, ComponentFactoryResolver } from '@angular/core';
import { ModalActionItem } from '../../../core/models/button-action-item.model';
import { ModalHelperService } from '../../modal/modal-helper.service';
import { DialogConfig } from '../../modal/dialog/dialog.config';
import { DialogComponent } from '../../modal/dialog/dialog.component';
import { DIALOG_TYPE } from '../../modal/dialog/dialog.constants';
import { ExportCSVComponent } from './export-csv.component';
import { Subscription } from 'rxjs/Subscription';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { CSVHelper, CSVHeaderItem } from '../../../core/helpers/csv.helper';
import { UnSub } from '../../../core/classes/index';

@UnSub()
@Injectable()
export class ExportCSVService {

    private _dialogConfig: DialogConfig;
    private _dialog: DialogComponent;
    private _subscriptions: Array<Subscription> = [];
    private _transationText = null;

    constructor(private _modalHelperService: ModalHelperService,
        private _componentFactoryResolver: ComponentFactoryResolver,
        _translateService: TranslateService) {
        this._subscriptions.push(_translateService.stream([
            'ODEN.COMMON.CLOSE',
            'ODEN.COMMON.EXPORT',
            'ODEN.COMPONENTS.EXPORT.CSV_TITLE'
        ]).subscribe(res => {
            this._transationText = res;
        }));
    }

    /**
     * Open dialog to get the confirmation from tpg
     * @param {Array<any>} headers
     * @returns {Observable<{ export: boolean, columns: Array<CSVHeaderItem>}}
     */
    openDialog(headers: Array<any>): Observable<{
        export: boolean,
        columns: Array<CSVHeaderItem>
    }> {
        this._dialogConfig = new DialogConfig({
            title: this._transationText['ODEN.COMPONENTS.EXPORT.CSV_TITLE'],
            actions: [
                new ModalActionItem({
                    label: this._transationText['ODEN.COMMON.CLOSE'],
                    action: 'close',
                    cssClass: 'discard'
                }),
                new ModalActionItem({
                    label: this._transationText['ODEN.COMMON.EXPORT'],
                    action: 'export',
                    cssClass: 'primary',
                    disabled: false
                })
            ],
            component: ExportCSVComponent,
            type: DIALOG_TYPE.DIALOG
        });
        this._dialog = this._modalHelperService.createDialog(this._dialogConfig, this._componentFactoryResolver, false);
        // Pass headers as data to dialog component
        const exportCSVComponentInstance: ExportCSVComponent = this._dialog.customComponent as ExportCSVComponent;
        exportCSVComponentInstance.columns = headers;
        this._dialog.open();

        return new Observable((observer) => {
            this._subscriptions.push(this._dialog.onAction.subscribe((actionItem) => {
                this._dialog.close();
                observer.next({
                    export: actionItem.action === 'export',
                    columns: exportCSVComponentInstance.selectedColumns
                });
            }));
        });
    }

    /**
     * Export CSV
     * @param headers
     * @param data
     */
    doExport(headers: Array<any>, data: Array<any>) {
        const exportPromise = new Promise(resolve => {
            const exportedCSV = CSVHelper.jsonToCSV({
                headers: headers,
                data: data
            });
            CSVHelper.download(exportedCSV);
            resolve();
        });
        exportPromise.catch(error => console.log(error));
    }

    /**
    * Method to enable/disable export button in the dialog
    * @param {boolean} isDisabled
    */
    _toggleExportDisable(isDisabled: boolean = false): void {
        if (
            this._dialogConfig
            && this._dialogConfig.actions
            && this._dialogConfig.actions.length >= 1
        ) {
            this._dialogConfig.actions.forEach((action) => {
                if (action.action === 'export') {
                    action.disabled = isDisabled;
                }
            });
        }
    }
}
