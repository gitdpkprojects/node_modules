import {
    ChangeDetectionStrategy,
    Component,
    ElementRef,
    HostBinding,
    Input,
    OnChanges,
    SimpleChanges,
    Renderer2,
    ViewEncapsulation
} from '@angular/core';
import { ROW_ALIGNMENT } from '../../../core/constants';

@Component({
    selector: 'cui-row',
    templateUrl: 'row.component.html',
    styleUrls: ['row.component.scss'],
    encapsulation: ViewEncapsulation.None,
    changeDetection: ChangeDetectionStrategy.OnPush
})

export class RowComponent implements OnChanges {
    @Input() align: string | Array<string> = '';
    @HostBinding('class.keepSizeForMedium') @Input() keepSizeForMedium: boolean = false;
    @HostBinding('class.row') addClass: boolean = true;

    constructor(private _element: ElementRef, private _renderer: Renderer2) {
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['align']) {
            let align = this.align;
            if (typeof this.align === 'string') {
                align = [<string>this.align];
            }
            this._renderer.removeClass(this._element.nativeElement, 'between-xs');
            this._renderer.removeClass(this._element.nativeElement, 'center-xs');
            this._renderer.removeClass(this._element.nativeElement, 'end-xs');
            this._renderer.removeClass(this._element.nativeElement, 'bottom-xs');
            this._renderer.removeClass(this._element.nativeElement, 'middle-xs');
            this._renderer.removeClass(this._element.nativeElement, 'is-x-aligned');

            (<Array<string>>align).forEach((_align: string) => {
                switch (_align) {
                    case ROW_ALIGNMENT.END:
                        this._renderer.addClass(this._element.nativeElement, 'is-x-aligned');
                        this._renderer.addClass(this._element.nativeElement, 'end-xs');
                        break;
                    case ROW_ALIGNMENT.BOTTOM:
                        this._renderer.addClass(this._element.nativeElement, 'bottom-xs');
                        break;
                    case ROW_ALIGNMENT.BETWEEN:
                        this._renderer.addClass(this._element.nativeElement, 'is-x-aligned');
                        this._renderer.addClass(this._element.nativeElement, 'between-xs');
                        break;
                    case ROW_ALIGNMENT.CENTER:
                        this._renderer.addClass(this._element.nativeElement, 'is-x-aligned');
                        this._renderer.addClass(this._element.nativeElement, 'center-xs');
                        break;
                    case ROW_ALIGNMENT.MIDDLE:
                        this._renderer.addClass(this._element.nativeElement, 'middle-xs');
                        break;
                }
            });

            // fix max-width attribute on its columns
            if (!this.keepSizeForMedium && !this._element.nativeElement.classList.contains('is-x-aligned')) {
                [].map.call(this._element.nativeElement.querySelectorAll('.col-xs'), (_el) => {
                    if (_el.classList.contains('no-max-width')) {
                        this._renderer.removeStyle(_el, 'maxWidth');
                    } else {
                        this._renderer.setStyle(_el, 'maxWidth', '100%');
                    }
                });
            } else {
                [].map.call(this._element.nativeElement.querySelectorAll('.col-xs'), (_el) => {
                    this._renderer.removeStyle(_el, 'maxWidth');
                });
            }
        }
    }
}
