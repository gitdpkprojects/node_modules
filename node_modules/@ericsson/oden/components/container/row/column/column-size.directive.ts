/* tslint:disable:directive-selector-prefix */
/* tslint:disable:directive-selector */
/* tslint:disable:no-input-rename */

import { AfterViewInit, Directive, ElementRef, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { DOMHelper } from '../../../../core/helpers/dom.helper';

@Directive({ selector: '[column-size],cui-column' })

export class ColumnSizeDirective implements AfterViewInit, OnChanges {
    @Input('column-size') columnSize: Number;
    private _keepSizeForMedium: boolean;
    private _hasSpecialAlignment: boolean;

    constructor(private _element: ElementRef, private _renderer: Renderer2) { }

    /**
     * Sets grid css class by it's column size
     */
    ngAfterViewInit(): void {
        this._setColumnSize(this.columnSize);
    }

    /**
     * Updates column size grid class on element
     */
    ngOnChanges(changes: SimpleChanges): void {
        if (changes['columnSize']) {
            this._setColumnSize(this.columnSize);
        }
    }

    /**
     * Sets a column size on element
     * for Mixed: Mobile, Tablet And Desktop
     * @param size - Number
     * @private
     */
    private _setColumnSize(size: Number): void {
        // first, remove old size classes
        this._removeColumnSizes(size);

        // xs&sm (phones), md (tablets), lg (desktops)
        this._renderer.addClass(this._element.nativeElement, `col-lg`);
        this._renderer.addClass(this._element.nativeElement, `col-md`);
        this._renderer.addClass(this._element.nativeElement, `col-xs`);
        this._renderer.addClass(this._element.nativeElement, `col-sm`);

        if (this._isValidColumnSize(size)) {
            // to override default column balance for medium screens. Default value is always true.
            const rowcontainer = DOMHelper.closestParent(this._element.nativeElement, 'row');
            this._keepSizeForMedium = rowcontainer && rowcontainer.classList.contains('keepSizeForMedium');
            this._hasSpecialAlignment = rowcontainer && rowcontainer.classList.contains('is-x-aligned');
            if (!this._keepSizeForMedium && !this._hasSpecialAlignment && !this._element.nativeElement.classList.contains('no-max-width')
                && !document.body.classList.contains('ie')) {
                this._renderer.setStyle(this._element.nativeElement, 'maxWidth', '100%');
            } else {
                this._renderer.removeStyle(this._element.nativeElement, 'maxWidth');
            }

            this._renderer.addClass(this._element.nativeElement, 'col-xs-12');
            this._renderer.addClass(this._element.nativeElement, 'col-sm-12');

            if (size > 3 && !this._keepSizeForMedium) {
                this._renderer.addClass(this._element.nativeElement, 'col-md-12');
            } else if (size <= 3 && !this._keepSizeForMedium) {
                this._renderer.addClass(this._element.nativeElement, 'col-md-6');
            } else {
                this._renderer.addClass(this._element.nativeElement, 'col-md-' + size);
            }
            this._renderer.addClass(this._element.nativeElement, 'col-lg-' + size);
        }
    }

    /**
     * Removes all column sizes from a element
     *
     * @param size - Number
     * @private
     */
    private _removeColumnSizes(size: Number): void {
        if (this._isValidColumnSize(size) && this._element.nativeElement && this._element.nativeElement.classList.length > 0) {
            const removeThese = [];
            [].map.call(this._element.nativeElement.classList, (_className) => {
                if (_className && _className.indexOf('col-') === 0) {
                    removeThese.push(_className);
                }
            });
            removeThese.forEach((_className) => {
                this._renderer.removeClass(this._element.nativeElement, _className);
            });
        }
    }

    /**
     * Validates if column size value is between 0-12
     *
     * @param size - Number
     * @returns {boolean}
     * @private
     */
    private _isValidColumnSize(size: Number): boolean {
        return size <= 12 && size > 0;
    }
}
