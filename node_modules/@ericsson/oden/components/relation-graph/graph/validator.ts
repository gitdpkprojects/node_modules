import { RelationGraph, Ref } from '../relation-graph.model';

export class RelationGraphComponentValidator {

    constructor() { }

    validate(graph: RelationGraph): void {
        this.validateTypes(graph);
        this.validateNodes(graph);
        this.validateRelations(graph);
        this.validatePresence(graph.rootRef, 'requires root ref');
        this.validateRef(graph.rootRef, graph.nodes, 'requires valid root ref');
    }

    private validateTypes(graph: RelationGraph): void {
        this.validateNotEmpty(graph.types, 'requires types');
        graph.types.forEach(type => {
            this.validatePresence(type, 'type must be defined');
            this.validatePresence(type.name, 'type requires name');
        });
    }

    private validateNodes(graph: RelationGraph): void {
        this.validateNotEmpty(graph.nodes, 'requires nodes');
        graph.nodes.forEach(node => {
            this.validatePresence(node, 'node must be defined');
            this.validatePresence(node.id, 'node requires id');
            this.validatePresence(node.name, 'node requires name');
            this.validatePresence(node.typeRef, 'node requires type ref');
            this.validateRef(node.typeRef, graph.types, 'node requires valid type ref');
        });
    }

    private validateRelations(graph: RelationGraph): void {
        this.validatePresence(graph.relations, 'requires relations');
        graph.relations.forEach(relation => {
            this.validatePresence(relation, 'relation must be defined');
            this.validatePresence(relation.sourceRef, 'relation requires source ref');
            this.validatePresence(relation.targetRef, 'relation requires target ref');
            this.validateRef(relation.sourceRef, graph.nodes, 'relation requires valid source ref');
            this.validateRef(relation.targetRef, graph.nodes, 'relation requires valid target ref');
            if (relation.typeRef !== null && relation.typeRef !== undefined) {
                this.validateRef(relation.typeRef, graph.types, 'relation requires valid type ref');
            }
        });
    }

    private validateRef<T>(ref: Ref, arr: Array<T>, message: string): void {
        if (ref < 0 || ref >= arr.length || !arr[ref]) {
            throw new Error(message);
        }
    }

    private validateNotEmpty<T>(arr: Array<T>, message: string): void {
        this.validatePresence(arr, message);
        if (!arr.length) {
            throw new Error(message);
        }
    }

    private validatePresence(obj: any, message: string): void {
        if (obj === null || obj === undefined) {
            throw new Error(message);
        }
    }
}
