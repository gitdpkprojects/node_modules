import { Ref, RelationGraphRelation } from '../relation-graph.model';
import { RelationGraphComponentRoot } from './root';
import { RelationGraphComponentType } from './type';
import { RelationGraphComponentNode } from './node';
import { D3Group, D3Path } from './types';
import { RelationGraphComponentConstants as Constants } from './constants';
import { RelationGraphComponentState } from './state';

export class RelationGraphComponentRelation extends RelationGraphComponentState {
    private _source: RelationGraphComponentNode = null;
    private _target: RelationGraphComponentNode = null;
    private _type: RelationGraphComponentType = null;
    private _p: D3Path;
    private _d: string = null;

    constructor(private _root: RelationGraphComponentRoot, private _relation: RelationGraphRelation) {
        super('relation');
    }

    get sourceRef(): Ref {
        return this._relation.sourceRef;
    }

    get targetRef(): Ref {
        return this._relation.targetRef;
    }

    get source(): RelationGraphComponentNode {
        if (this._source === null) {
            this._source = this._root.findNode(this._relation.sourceRef);
        }
        return this._source;
    }

    get target(): RelationGraphComponentNode {
        if (this._target === null) {
            this._target = this._root.findNode(this._relation.targetRef);
        }
        return this._target;
    }

    get type(): RelationGraphComponentType {
        if (this._type === null && this._relation.typeRef !== null && this._relation.typeRef !== undefined) {
            this._type = this._root.findType(this._relation.typeRef);
        }
        return this._type;
    }

    appendTo(parent: D3Group): void {
        this._p = <D3Path>parent.append('path');
        this._p.attr('class', this.class);
    }

    raise(): void {
        this._p.raise();
    }

    update(): void {
        this.updateLink();
        this._p.attr('class', this.class)
            .attr('opacity', this.visible ? 1 : 0)
            .attr('d', this._d);
    }

    animate(): void {
        this.updateLink();
        this._p.transition()
            .duration(Constants.TRANSITION.DURATION)
            .attr('class', this.class)
            .attr('opacity', this.visible ? 1 : 0)
            .attr('d', this._d);
    }

    cleanup(): void {
        this._source = null;
        this._target = null;
        this._type = null;
        this._p = null;
        this._root = null;
    }

    toString(): string {
        return `${this.sourceRef}-${this.targetRef}`;
    }

    private updateLink(): void {
        if (!this._d || this.source.dirty || this.target.dirty) {
            this._d = this.linkBetween(this.source, this.target);
        }
    }

    private linkBetween(source: RelationGraphComponentNode, target: RelationGraphComponentNode): string {
        const sourcePosition = source.relationSourcePosition;
        const targetPosition = target.relationTargetPosition;
        return this.link(sourcePosition.x, sourcePosition.y, targetPosition.x, targetPosition.y);
    }

    private link(x1: number, y1: number, x2: number, y2: number): string {
        const d = 12;
        return `M ${x1},${y1} C ${(x1 + x2) * 0.5 + d},${y1} ${(x1 + x2) * 0.5 - d},${y2} ${x2},${y2}`;
    }
}
