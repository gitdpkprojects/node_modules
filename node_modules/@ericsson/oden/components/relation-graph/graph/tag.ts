import { D3Group, D3Polygon, D3Text } from './types';
import { RelationGraphComponentState } from './state';
import { RelationGraphComponentConstants as Constants } from './constants';

export class RelationGraphComponentTag extends RelationGraphComponentState {
    private _g: D3Group;
    private _text: string = null;

    constructor(private _align: number = Constants.NODE.TAG.ALIGN, private _dx: number = Constants.NODE.TAG.DX) {
        super('tag');
    }

    get text(): string {
        return this._text;
    }

    set text(text: string) {
        this._text = text;
        this.hidden = !text;
        this.updateText();
    }

    hide(): void {
        this.hidden = true;
    }

    appendTo(parent: D3Group): void {
        this.hidden = true;

        this._g = <D3Group>parent.append('g');
        this._g.attr('class', this.class);
        this._g.append('polygon');
        this._g.append('text')
            .attr('dx', Constants.NODE.TAG.PADDING_LEFT)
            .attr('dy', '.3em')
            .attr('text-anchor', 'start');

        this.updateText();
    }

    update(): void {
        this._g.attr('class', this.class)
            .attr('opacity', this.hidden ? 0 : 1);
    }

    animate(): void {
        this._g.transition()
            .duration(Constants.TRANSITION.DURATION)
            .attr('class', this.class)
            .attr('opacity', this.hidden ? 0 : 1);
    }

    cleanup(): void {
        this._g = null;
    }

    updateText(): void {
        if (!this.hidden) {
            const bg = <D3Polygon>this._g.select('polygon');
            const text = <D3Text>this._g.select('text');
            text.text(this._text || '');
            const width = text.node().getComputedTextLength() + Constants.NODE.TAG.PADDING_LEFT + Constants.NODE.TAG.PADDING_RIGHT;
            const height = Constants.NODE.TAG.HEIGHT;
            bg.attr('points',
                `0,${-height * 0.5} ${width + 2},-${height * 0.5} ${width + 8},0 ${width + 2},${height * 0.5}, 0,${height * 0.5}`);
            const x = this._align * width * 0.5;
            this._g.attr('transform',
                `translate(${x + this._dx}, ${Constants.NODE.HEIGHT * 0.5 + 2})`);
        }
    }
}
