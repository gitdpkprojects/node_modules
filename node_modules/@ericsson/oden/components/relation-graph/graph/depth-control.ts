import { D3Group } from './types';
import { RelationGraphComponentConstants as Constants } from './constants';
import { RelationGraphComponentRoot } from './root';
import { RelationGraphComponentState } from './state';
import * as D3 from 'd3';
import { Subject, Observable } from 'rxjs';
import { RelationGraphComponentPosition } from './position';

export abstract class RelationGraphComponentDepthControl extends RelationGraphComponentState {
    readonly position: RelationGraphComponentPosition = { x: 0, y: 0 };
    private _onChangeSubject: Subject<void> = new Subject();
    private _onChangeObservable = this._onChangeSubject.asObservable();
    private _g: D3Group;

    constructor(private _root: RelationGraphComponentRoot, readonly depth: number) {
        super('depth-control');
    }

    get onChange(): Observable<void> {
        return this._onChangeObservable;
    }

    appendTo(parent: D3Group): void {
        this._g = <D3Group>parent.append('g');
        this._g.attr('class', this.class);
        this._g.attr('opacity', (this.hidden || this.overflowed) ? 0 : 1);
        const r = Constants.DEPTH_CONTROLLER.DEPTH_CONTROL.RADIUS;
        const p = Constants.DEPTH_CONTROLLER.DEPTH_CONTROL.PADDING;

        this._g.append('circle')
            .attr('cx', 0)
            .attr('cy', 0)
            .attr('r', r);

        this._g.append('line')
            .attr('class', 'h')
            .attr('x1', -r + p).attr('y1', 0)
            .attr('x2', r - p).attr('y2', 0);

        this._g.append('line')
            .attr('class', 'v')
            .attr('x1', 0).attr('y1', -r + p)
            .attr('x2', 0).attr('y2', r - p);

        this._g.on('mousedown', this.ignoredEventHandler.bind(this));
        this._g.on('mouseover', this.ignoredEventHandler.bind(this));
        this._g.on('mouseout', this.ignoredEventHandler.bind(this));
        this._g.on('dblclick', this.ignoredEventHandler.bind(this));
        this._g.on('click', this.clickEventHandler.bind(this));
    }

    updateState(): void {
        if (this._g) {
            this._g.attr('class', this.class);
            this._g.attr('opacity', (this.hidden || this.overflowed) ? 0 : 1);
        }
    }

    animateState(): void {
        if (this._g) {
            this._g.transition()
                .duration(Constants.TRANSITION.DURATION)
                .attr('class', this.class)
                .attr('opacity', (this.hidden || this.overflowed) ? 0 : 1);
        }
    }

    updatePosition(): void {
        if (this._g) {
            const direction = this.direction;
            const grid = this._root.grid;
            this.position.x = Math.round(direction * (Constants.ROOT_NODE.WIDTH + Constants.ROOT_NODE.PADDING) * 0.5 +
                this.depth * direction * grid.width * grid.scale + this._root.translate.x -
                (this.depth === 0 ? direction * Constants.ROOT_NODE.PADDING * 0.5 : 0));
            this.position.y = Constants.DEPTH_CONTROLLER.HEIGHT * 0.5;
            this._g.attr('transform', `translate(${this.position.x}, ${this.position.y})`);
        }
    }

    update(): void {
        if (this._g) {
            this._g.attr('class', this.class);
            this._g.attr('transform', `translate(${this.position.x}, ${this.position.y})`);
        }
    }

    cleanup(): void {
        this._onChangeSubject.complete();
        this._g.on('mousedown', null);
        this._g.on('mouseover', null);
        this._g.on('mouseout', null);
        this._g.on('dblclick', null);
        this._g.on('click', null);
        this._g = null;
        this._root = null;
    }

    abstract get direction(): number;

    private clickEventHandler(): void {
        D3.event.stopPropagation();
        D3.event.preventDefault();
        this.collapsed = !this.collapsed;
        this.animateState();
        this._onChangeSubject.next();
    }

    private ignoredEventHandler(): void {
        D3.event.stopPropagation();
        D3.event.preventDefault();
    }
}

export class RelationGraphComponentDownstreamDepthControl extends RelationGraphComponentDepthControl {
    constructor(root: RelationGraphComponentRoot, depth: number) {
        super(root, depth);
    }

    get direction(): number { return 1; }
}

export class RelationGraphComponentUpstreamDepthControl extends RelationGraphComponentDepthControl {
    constructor(root: RelationGraphComponentRoot, depth: number) {
        super(root, depth);
    }

    get direction(): number { return -1; }
}
