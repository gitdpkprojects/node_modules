interface RelationGraphComponentStateFlags {
    readonly highlighted: boolean;
    readonly collapsed: boolean;
    readonly hidden: boolean;
}

class RelationGraphComponentStateClass {
    private static _stateClasses: { [baseClass: string]: RelationGraphComponentStateClass } = {};
    private _base: Array<string>;
    private _lit: Array<string>;
    private _selected: Array<string>;
    private _faded: Array<string>;
    private _overflowed: Array<string>;

    static of(baseClass: string): RelationGraphComponentStateClass {
        if (!RelationGraphComponentStateClass._stateClasses[baseClass]) {
            RelationGraphComponentStateClass._stateClasses[baseClass] = new RelationGraphComponentStateClass(baseClass);
        }
        return RelationGraphComponentStateClass._stateClasses[baseClass];
    }

    private constructor(baseClass: string) {
        this._base = this.generate(baseClass);
        this._lit = this.generate(baseClass, 'lit');
        this._selected = this.generate(baseClass, 'selected');
        this._faded = this.generate(baseClass, 'faded');
        this._overflowed = this.generate(baseClass, 'overflowed');
    }

    base(flags: RelationGraphComponentStateFlags): string {
        return this._base[this.indexOf(flags)];
    }

    lit(flags: RelationGraphComponentStateFlags): string {
        return this._lit[this.indexOf(flags)];
    }

    selected(flags: RelationGraphComponentStateFlags): string {
        return this._selected[this.indexOf(flags)];
    }

    faded(flags: RelationGraphComponentStateFlags): string {
        return this._faded[this.indexOf(flags)];
    }

    overflowed(flags: RelationGraphComponentStateFlags): string {
        return this._overflowed[this.indexOf(flags)];
    }

    private indexOf(flags: RelationGraphComponentStateFlags): number {
        return (flags.highlighted ? 1 : 0) + (flags.hidden ? 2 : 0) + (flags.collapsed ? 4 : 0);
    }

    private generate(baseClass: string, subClass?: string): Array<string> {
        const base = subClass ? `${baseClass} ${subClass}` : baseClass;
        return [
            `${base}`,
            `${base} highlighted`,
            `${base} hidden`,
            `${base} highlighted hidden`,
            `${base} collapsed`,
            `${base} highlighted collapsed`,
            `${base} hidden collapsed`,
            `${base} highlighted hidden collapsed`
        ];
    }
}

export abstract class RelationGraphComponentState implements RelationGraphComponentStateFlags {
    highlighted: boolean = false;
    hidden: boolean = false;
    selected: boolean = false;
    lit: boolean = false;
    faded: boolean = false;
    collapsed: boolean = false;
    overflowed: boolean = false;
    private _stateClass: RelationGraphComponentStateClass;

    constructor(baseClass: string) {
        this._stateClass = RelationGraphComponentStateClass.of(baseClass);
    }

    get class(): string {
        if (this.overflowed) {
            return this._stateClass.overflowed(this);
        } else if (this.selected) {
            return this._stateClass.selected(this);
        } else if (this.lit) {
            return this._stateClass.lit(this);
        } else if (this.faded) {
            return this._stateClass.faded(this);
        } else {
            return this._stateClass.base(this);
        }
    }

    get visible(): boolean { return !this.hidden && !this.collapsed; }
}
