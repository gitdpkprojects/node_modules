export class RelationGraphComponentTraversable<T> {
    constructor(private root: T, private next: (e: T) => Array<T>, private end: (e: T) => boolean) {

    }

    get first(): Array<T> {
        return this.next(this.root);
    }

    forEach(callbackfn: (e: T) => void): void {
        const first = this.next(this.root);
        first.forEach(e => this._forEach(e, callbackfn));
    }

    some(callbackfn: (e: T) => boolean): boolean {
        const first = this.next(this.root);
        return first.some(e => this._some(e, callbackfn));
    }

    find(callbackfn: (e: T) => boolean): T {
        const first = this.next(this.root);
        return this._find(first, callbackfn);
    }

    reduce<U>(callbackfn: (value: U, e: T) => U, initial: U): U {
        const first = this.next(this.root);
        return first.reduce((r, e) => {
            return this._reduce(e, callbackfn, r);
        }, initial);
    }

    private _forEach(e: T, callbackfn: (e: T) => void): void {
        callbackfn(e);
        if (!this.end(e)) {
            const next = this.next(e);
            next.forEach(n => this._forEach(n, callbackfn));
        }
    }

    private _find(a: Array<T>, callbackfn: (e: T) => boolean): T {
        for (let i = 0; i < a.length; ++i) {
            const e = a[i];
            if (callbackfn(e)) {
                return e;
            }
            if (!this.end(e)) {
                const next = this.next(e);
                const r = this._find(next, callbackfn);
                if (r) {
                    return r;
                }
            }
        }
        return null;
    }

    private _some(e: T, callbackfn: (e: T) => boolean): boolean {
        if (callbackfn(e)) {
            return true;
        } else if (!this.end(e)) {
            const next = this.next(e);
            return next.some(n => this._some(n, callbackfn));
        } else {
            return false;
        }
    }

    private _reduce<U>(e: T, callbackfn: (value: U, e: T) => U, initial: U): U {
        if (this.end(e)) {
            return callbackfn(initial, e);
        }
        const next = this.next(e);
        return next.reduce((acc, n) => {
            return this._reduce(n, callbackfn, acc);
        }, callbackfn(initial, e));
    }
}
