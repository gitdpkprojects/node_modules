import { ElementRef } from '@angular/core';

export type Ref = number;

/**
 * Node or relation type.
 */
export interface RelationGraphType {
    readonly name: string;
    readonly acronym?: string;
}

/**
 * Node.
 */
export interface RelationGraphNode {
    readonly id: string;
    readonly name: string;
    /** Index of node type in graph's types array */
    readonly typeRef: Ref;
    /** Set to true to display node with "link away" icon */
    readonly linkAway?: boolean;
}

/**
 * Relation.
 */
export interface RelationGraphRelation {
    /** Index of relation source node in graph's nodes array */
    readonly sourceRef: Ref;
    /** Index of relation target node in graph's nodes array */
    readonly targetRef: Ref;
    /** Index of relation type in graph's types array */
    readonly typeRef?: Ref;
}

/**
 * Relation graph.
 */
export interface RelationGraph {
    /** Array of all types used by either nodes or relations */
    readonly types: Array<RelationGraphType>;
    /** Array of all nodes */
    readonly nodes: Array<RelationGraphNode>;
    /** Array of all relations */
    readonly relations: Array<RelationGraphRelation>;
    /** Index of root node in graph's nodes array */
    readonly rootRef: Ref;
}

/**
 * Relation graph predicate, used for finding and filtering nodes.
 */
export type RelationGraphPredicate = (node: RelationGraphNode, type: RelationGraphType) => boolean;

/**
 * Relation graph event.
 */
export interface RelationGraphEvent {
    /** Affected node */
    readonly node: RelationGraphNode;
    /** Affected node type */
    readonly type: RelationGraphType;
    /** Used as source of focus shifts */
    readonly elementRef: ElementRef;
}
