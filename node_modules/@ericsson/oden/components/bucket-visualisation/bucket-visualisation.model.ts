import { BUCKET_MODE, STATUS_ORDER } from './../../core/constants/bucket-visualisation.constants';
import { UUID } from '../../core/helpers/uuid.class';


/** Interface for any external values, i.e. thresholds or range intervals */
export interface ExternalValue {
    id: string;
    name: string;
    value: BucketValue;
}

/**
 * Class for holding a value.
 * It is possible to set a displayValue which will be used instead of the value whenever this value is shown in the bucket.
 */
export class BucketValue {
    value: number;
    displayValue?: string;

    constructor(obj: {
        value: number,
        displayValue?: string
    }) {
        this.value = +obj.value;
        this.displayValue = obj.displayValue;
    }

    toString(): string {
        if (this.displayValue) {
            return this.displayValue;
        } else {
            return this.value.toString();
        }
    }
}

/**
 * Representation of a threshold specification
 * Used for selection (configuration) of thresholds and also showing thresholds.
 */
export class BucketThreshold implements ExternalValue {
    id: string = UUID.create();
    name: string = '';
    value: BucketValue;
    order?: number;

    constructor(obj: {
        id?: string,
        name?: string,
        value: BucketValue,
        order?: number
    }) {
        Object.assign(this, obj);
    }

    toString(): string {
        const value = this.value.toString();
        if (this.name) {
            return `${this.name} (${value})`;
        } else {
            return value;
        }
    }
}

/**
 * Specifies an en point in a bucket interval.
 * The end point can be inclusive or exclusive
 */
export class EndPoint implements ExternalValue {
    id: string;
    name: string;
    value: BucketValue;
    inclusive: boolean;

    constructor(obj: {
        id: string,
        name: string,
        value?: BucketValue,
        inclusive: boolean
    }) {
        Object.assign(this, obj);
    }

    isFinite(): boolean {
        return Boolean(this.value) && isFinite(+this.value.value);
    }
}

/**
 * Represents an interval of a bucket.
 * An interval must have an upper and lower bound.
 */
export class BucketInterval {
    upperBound: EndPoint;
    lowerBound: EndPoint;

    constructor(obj: {
        upperBound: EndPoint,
        lowerBound: EndPoint
    }) {
        Object.assign(this, obj);
    }
}

/**
 * Class representation of the bucket holding the main values
 * which threshold and statuses will use for position calculation.
 */
export class Bucket {
    id: string = UUID.create();
    name: string = '';
    minValue?: BucketValue;
    maxValue?: BucketValue;
    initialValue?: BucketValue;
    actualValue?: BucketValue;

    constructor(obj: {
        id?: string,
        name?: string,
        minValue?: BucketValue,
        maxValue?: BucketValue,
        initialValue?: BucketValue,
        actualValue?: BucketValue
    }) {
        Object.assign(this, obj);
    }

    hasMaxValue(): boolean {
        return Boolean(this.maxValue);
    }

    hasMinValue(): boolean {
        return Boolean(this.minValue);
    }

    hasInitialValue(): boolean {
        return Boolean(this.initialValue);
    }

    hasActualValue(): boolean {
        return Boolean(this.actualValue);
    }
}

/**
 * Only applicable when the bucket is in BUCKET_MODE.SHOW_STATUSES_AND_SELECT_THRESHOLDS
 *
 * Used for showing error messages to specific thresholds based on their IDs.
 * The error will be displayed as a tooltip of the dropdown where the threshold is selected.
 */
export class ThresholdError {
    thresholdId: string;
    message: string;

    constructor(obj: {
        thresholdId: string,
        message: string
    }) {
        Object.assign(this, obj);
    }
}

/** Options for the bucket visualisation, used for changing behavior of the bucket */
export class VisualisationOptions {
    disabled?: boolean;
    /** @deprecated use displayValue of the threshold to display the unit */
    showUnitOnThreshold?: boolean;
    noneSelection?: boolean;
    bucketMode?: BUCKET_MODE = BUCKET_MODE.SHOW_STATUSES_AND_SELECT_THRESHOLDS;
    statusOrder?: STATUS_ORDER = STATUS_ORDER.ASCENDING;
    bucketHeight?: number;

    constructor(obj?: {
        disabled?: boolean,
        showUnitOnThreshold?: boolean,
        noneSelection?: boolean,
        bucketMode?: BUCKET_MODE,
        statusOrder?: STATUS_ORDER,
        bucketHeight?: number
    }) {
        Object.assign(this, obj);
    }
}

/** Representation of a status value */
export class Status {
    id: string = UUID.create();
    orderIndex: number;
    name: string;

    constructor(obj: {
        id?: string,
        orderIndex: number,
        name: string
    }) {
        Object.assign(this, obj);
    }
}






/**
 * Class for holding value and matching unit when working with objects which
 * have value in multiple units.
 * @deprecated use BucketValue instead
 */
export class ValueWithUnit {
    value: number;
    unit: string;

    constructor(obj: {
        value: number,
        unit: string
    }) {
        this.value = +obj.value;
        this.unit = obj.unit;
    }

    toBucketValue(valueInBucketUnit: ValueWithUnit): BucketValue {
        return new BucketValue({
            value: valueInBucketUnit ? +valueInBucketUnit.value : +this.value,
            displayValue: this.toString()
        });
    }

    toString(): string {
        if (this.unit !== null && this.unit !== undefined) {
            return `${this.value.toString()} ${this.unit}`;
        } else {
            return this.value.toString();
        }
    }
}

/**
 * Representation of a threshold specification
 * Used for selection (configuration) of thresholds and also showing thresholds.
 * @deprecated use BucketThreshold instead
 */
export class Threshold {
    id: string = UUID.create();
    name: string = '';
    value: ValueWithUnit;
    valueInBucketUnit?: ValueWithUnit; // Used for bucket mode thresholds relative
    /** @deprecated no longer used */
    focused?: boolean;
    order?: number;

    constructor(obj: {
        id?: string,
        name?: string,
        value: ValueWithUnit,
        valueInBucketUnit?: ValueWithUnit,
        focused?: boolean,
        order?: number
    }) {
        Object.assign(this, obj);
    }

    toBucketThreshold(): BucketThreshold {
        return new BucketThreshold({
            id: this.id,
            name: this.name,
            value: this.value ? this.value.toBucketValue(this.valueInBucketUnit) : undefined,
            order: this.order
        });
    }
}

/**
 * Class representation of the bucket holding the main values
 * which threshold and statuses will use for position calculation.
 * @deprecated Use Bucket instead
 */
export class BucketInformation {
    id: string = UUID.create();
    name: string;
    unit: string;

    minValue?: ValueWithUnit;
    minValueInBucketUnit?: ValueWithUnit;

    maxValue?: ValueWithUnit;
    maxValueInBucketUnit?: ValueWithUnit;

    initialValue?: ValueWithUnit;
    initialValueInBucketUnit?: ValueWithUnit;

    constructor(obj: {
        id?: string,
        name: string,
        unit: string,
        minValue?: ValueWithUnit,
        minValueInBucketUnit?: ValueWithUnit,
        maxValue?: ValueWithUnit,
        maxValueInBucketUnit?: ValueWithUnit,
        initialValue?: ValueWithUnit,
        initialValueInBucketUnit?: ValueWithUnit
    }) {
        Object.assign(this, obj);
    }

    toBucket(): Bucket {
        return new Bucket({
            id: this.id,
            name: this.name,
            minValue: this.minValue ? this.minValue.toBucketValue(this.minValueInBucketUnit) : undefined,
            maxValue: this.maxValue ? this.maxValue.toBucketValue(this.maxValueInBucketUnit) : undefined,
            initialValue: this.initialValue ? this.initialValue.toBucketValue(this.initialValueInBucketUnit) : undefined
        });
    }

    hasMaxValue(): boolean {
        return Boolean(this.maxValue && this.maxValueInBucketUnit);
    }

    hasMinValue(): boolean {
        return Boolean(this.minValue && this.minValueInBucketUnit);
    }

    hasInitialValue(): boolean {
        return Boolean(this.initialValue && this.initialValueInBucketUnit);
    }
}

/**
 * Used for showing error message either in configuration with the bucket (thresholds)
 * and marking the thresholds. Or also showing error message related to the bucket.
 *
 * @deprecated Use ThresholdError class instead to be able to give each individual threshold a specific error message
 */
export class BucketError {
    thresholdIds?: Array<string>;
    message: string;

    constructor(obj: {
        thresholdIds?: Array<string>,
        message: string
    }) {
        Object.assign(this, obj);
    }
}
