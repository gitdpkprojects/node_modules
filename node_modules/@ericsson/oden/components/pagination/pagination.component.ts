import { Component, EventEmitter, HostBinding, ViewEncapsulation, Input, Output } from '@angular/core';
import { PaginationData } from './pagination.model';

@Component({
    selector: 'cui-pagination',
    templateUrl: 'pagination.component.html',
    styleUrls: [ 'pagination.component.scss' ],
    encapsulation: ViewEncapsulation.None
})

export class PaginationComponent {
    @HostBinding('class.cui-pagination') addClass: boolean = true;
    @Input() paginationData: PaginationData;
    @Output() onPagination: EventEmitter<PaginationData> = new EventEmitter<PaginationData>();

    /**
     * Emits the onPagination event - is exectued from paginateToPrevPage, paginateToNextPage & onItemsPerPageChange
     */
    paginationChange(): void {
        this.onPagination.emit(this.paginationData);
    }

    /**
     * A presentable indication on the current pagination
     * @returns {string} - startIndex - endIndex
     */
    getCurrentDisplayIndex(): string {
        let startIndex = this.paginationData.currentPage * this.paginationData.itemsPerPage + 1;
        let endIndex = startIndex + this.paginationData.itemsPerPage - 1;
        if (endIndex > this.paginationData.totalItems) {
            endIndex = this.paginationData.totalItems;
        }
        if (this.paginationData.totalItems === 0) {
            startIndex = 0;
        }
        return `${startIndex}-${endIndex}`;
    }

    /**
     * Go to previous page. Doesn't paginate if the currentpage is already at zero. emits paginationChange
     */
    paginateToPrevPage(): void {
        if (this.prevPageAvailable()) {
            this.paginationData.currentPage--;
            this.paginationChange();
        }
    }
    /**
     * Go to previous page. Doesn't paginate if the currentpage is already at max. emits paginationChange
     */
    paginateToNextPage(): void {
        if (this.nextPageAvailable()) {
            this.paginationData.currentPage++;
            this.paginationChange();
        }
    }

    /**
     * Checks if the user can click on the previous button
     * @returns {boolean}
     */
    prevPageAvailable(): boolean {
        return (this.paginationData.currentPage > 0);
    }

    /**
     * Go to previous page. Doesn't paginate if the currentpage is already at max. emits paginationChange
     */
    nextPageAvailable(): boolean {
        return (this.paginationData.currentPage < this.paginationData.getTotalPages());
    }

    /**
     * Changes the current page to 0. emits paginationChange
     */
    onItemsPerPageChange(): void {
        /**
         *  TODO: It is possible that this should be set to a dynamic value depending on values from itemsPerPage
         *  and currentPage
         */
        this.paginationData.currentPage = 0;
        this.paginationChange();
    }
}
