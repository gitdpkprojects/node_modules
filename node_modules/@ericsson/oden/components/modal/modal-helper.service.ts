import { ComponentFactoryResolver, Injectable } from '@angular/core';
import { DialogConfig } from './dialog/dialog.config';
import { ModalService } from './modal.service';
import { DialogComponent } from './dialog/dialog.component';
import { ProgressModalComponent } from './progress-modal/progress-modal.component';
import { ProgressModalConfig } from './progress-modal/progress-modal.config';

@Injectable()
export class ModalHelperService {
    constructor( private _modalService: ModalService,
                 private _componentFactoryResolver: ComponentFactoryResolver) {}

    /**
     * Creates a DialogComponent and opens it.
     * @param {DialogConfig} config
     * @param {ComponentFactoryResolver} componentFactoryResolver
     * @param {boolean} open
     * @returns {DialogComponent}
     */
    createDialog(config: DialogConfig, componentFactoryResolver:
        ComponentFactoryResolver = this._componentFactoryResolver, open: boolean = true, callingElement?: Element): DialogComponent {
        const dialogRef = this._modalService.create(DialogComponent, !callingElement);
        dialogRef.instance.componentFactoryResolver = componentFactoryResolver;
        dialogRef.instance.config = config;
        if (open) {
            dialogRef.instance.open();
        }
        if ( callingElement) {
            setTimeout(() => {
                dialogRef.instance.setPositioned(true, callingElement);
            });
        }
        return dialogRef.instance;
    }

    /**
     * Creates a ProgressModal and opens it
     * @param {ProgressModalConfig} config
     * @param {boolean} open
     * @returns {ProgressModalComponent}
     */
    createProgressModal(config: ProgressModalConfig, open: boolean = true): ProgressModalComponent {
        const dialogRef = this._modalService.create(ProgressModalComponent);
        dialogRef.instance.config = config;
        if (open) {
            dialogRef.instance.open();
        }
        return dialogRef.instance;
    }
}
