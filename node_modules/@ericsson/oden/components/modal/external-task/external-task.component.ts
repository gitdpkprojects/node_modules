/* tslint:disable:component-selector */
import { Component, ElementRef, HostBinding, Renderer2, ViewChild, ViewEncapsulation, OnInit, OnDestroy } from '@angular/core';
import { FocusShiftBaseComponent } from '../focus-shift/focus-shift-base.component';
import { FOCUS_SHIFT } from '../../../core/constants/focus-shift.constants';
import { SnackBarService } from '../../snack-bar/snack-bar.service';
import { LoaderConfig } from '../../loader/loader.config';
import { DomSanitizer } from '@angular/platform-browser';
import { ITaskShortcut } from '../../../core/interfaces/task-shortcut.interface';

@Component({
    selector: 'external-task',
    templateUrl: 'external-task.component.html',
    styleUrls: ['external-task.component.scss'],
    animations: [FOCUS_SHIFT.ANIMATION_FULL],
    encapsulation: ViewEncapsulation.None
})

export class ExternalTaskComponent extends FocusShiftBaseComponent implements OnInit, OnDestroy {
    @HostBinding('@shiftAnimation') shiftAnimation: string;
    @HostBinding('class.cui-external-task') addClass: boolean = true;
    @ViewChild('iframe') iframe: ElementRef;
    loader: LoaderConfig = new LoaderConfig();
    private _resolve: (any) => void;
    initIframe: boolean = true;
    url: any = 'about:blank';
    private _messageListener: Function;
    private _browserListener: Function;

    constructor(
        public element: ElementRef,
        public renderer: Renderer2,
        private _snackBarService: SnackBarService,
        private _sanitizer: DomSanitizer
    ) {
        super(element, renderer);
        this.loader.visible = true;
        setTimeout(() => {
            // Close loading spinner after 2 seconds
            this.loader.visible = false;
        }, 2000);
        this.url = this._sanitizer.bypassSecurityTrustResourceUrl(this.url);
    }

    ngOnInit(): void {
        this.renderer.addClass(document.body, 'cui-external-task-visible');
        /** Get the url from browser and create a duplicate entry in browser history.
        To handle if user will click the browser back button */
        history.pushState(null, null, window.location.href);
    }

    ngOnDestroy(): void {
        this.renderer.removeClass(document.body, 'cui-external-task-visible');
        if (typeof (this._messageListener) === 'function') {
            this._messageListener(); // Unbinds to any events
        }
        if (typeof (this._browserListener) === 'function') {
            this._browserListener(); // Unbinds to any events
        }
    }

    /**
     * Navigates the iFrame to the desired url and posts the data via postMessage
     * @param url
     * @param data any object, can't send functions
     */
    goto(url: string, data: Partial<ITaskShortcut>): Promise<any> {
        const disposer = this.renderer.listen('window', 'message', event => {
            if (event.data === 'LISTENER_ESTABLISHED') {
                disposer();
                if (this.initIframe) {
                    if (data.openMessage) {
                        this._snackBarService.open(data.openMessage);
                    }
                    setTimeout(() => {
                        this.loader.visible = false;
                    }, 200);
                    this.iframe.nativeElement.contentWindow.postMessage(data, '*');
                }
            }
        });
        return new Promise(resolve => {
            this._resolve = resolve;
            this.initIframe = true;
            Object.assign(data, {
                isOden: true,
            });
            this.startListener();
            this.browserListener();
            this.url = this._sanitizer.bypassSecurityTrustResourceUrl(url);
        });
    }

    /**
     * Listens for message, this will make the external task close
     */
    startListener(): void {
        if (this._messageListener) { this._messageListener(); }
        this._messageListener = this.renderer.listen('window', 'message', event => {
            if (!event.data.isOden) {
                return;
            }
            if (event.data.snackbar) {
                this._snackBarService.open(event.data.snackbar);
            }
            this.initIframe = false;
            this.url = this._sanitizer.bypassSecurityTrustResourceUrl('about:blank');
            if (this._resolve && typeof this._resolve === 'function') {
                this._resolve(event.data);
                this._resolve = undefined;
            }
            this.close();
        });
    }

    /**
     * Listener for close the external task if user click browser back button
     */
    browserListener(): void {
        if (this._browserListener) { this._browserListener(); }
        this._browserListener = this.renderer.listen('window', 'popstate', event => {
            if (event) {
                this.close();
            }
        });
    }

}
