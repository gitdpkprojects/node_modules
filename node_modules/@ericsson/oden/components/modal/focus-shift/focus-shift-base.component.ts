import { AfterViewInit, ComponentRef, ElementRef, EventEmitter, HostBinding, Renderer, Renderer2 } from '@angular/core';
import { BackdropComponent } from '../../backdrop/backdrop.component';
import { IFocusShift } from './focus-shift.interface';
import { ComponentType } from '../../../core/interfaces/component-type.interface';

/**
 * Extend this class from in your component.
 * Be sure to use super.*() in your component if you overwrite anything in this class.
 */
export class FocusShiftBaseComponent implements IFocusShift, AfterViewInit {
    @HostBinding('class.scroll-area') isScrollArea: boolean = true;
    @HostBinding('tabindex') tabindex: number = 0;
    backdrop: ComponentRef<BackdropComponent>;
    onClose: EventEmitter<IFocusShift> = new EventEmitter<IFocusShift>();
    onOpen: EventEmitter<IFocusShift> = new EventEmitter<IFocusShift>();
    isOpen: boolean = false;
    drawerType: any;
    drawer: any;
    drawerTypes: Array<ComponentType<any>> = [];
    drawers: Array<ComponentRef<any>> = [];
    private _classList = [];
    private _lastFocus: HTMLElement;

    @HostBinding('style.z-index') zIndex: number;

    /**
     * Be sure to call this (super(ElementRef, Renderer) in your constructor
     * @param {ElementRef} element
     * @param {Renderer} renderer
     */
    constructor(public element: ElementRef, public renderer: Renderer2|Renderer|any) {
    }

    /**
     * Adds focus-shift-block class to the component.
     */
    ngAfterViewInit(): void {
        if (typeof(this.renderer.setStyle) !== 'undefined') {
            // Renderer2 API
            this.renderer.addClass(this.element.nativeElement, 'focus-shift-block');
        } else {
            // Renderer API
            // ToDo this part will be removed later
            console.warn('Deprecation warning! Use Renderer2 in FocusShiftBaseComponent');
            this.renderer.setElementClass(this.element.nativeElement, 'focus-shift-block', true);
        }
        this._applyClasses();
    }

    /**
     * A method for setting your own classes
     */
    setClass(htmlClass: string): void {
        this._classList.push(htmlClass);
        this._applyClasses();
    }

    /**
     * Sets all the classes to the component
     */
    private _applyClasses(): void {
        if (this.element) {
            this._classList.forEach((_class) => {
                if (typeof(this.renderer.setStyle) !== 'undefined') {
                    // Renderer2 API
                    this.renderer.addClass(this.element.nativeElement, _class);
                } else {
                    // Renderer API
                    // ToDo this part will be removed later
                    console.warn('Deprecation warning! Use Renderer2 in FocusShiftBaseComponent');
                    this.renderer.setElementClass(this.element.nativeElement, _class, true);
                }
            });
        }
    }

    /**
     * Closes if the component is opened. Emits onClose event.
     */
    close(): void {
        if (!this.isOpen) {
            return;
        }
        this.isOpen = false;
        this.onClose.emit();
        if (this._lastFocus) {
            setTimeout(() => {
                this._lastFocus.focus();
            }, 1);
        }
    }

    /**
     * Opens the focus shift component. Emits onOpen event.
     */
    open(): void {
        // save last focus
        this._lastFocus = <HTMLElement>document.activeElement;
        this.isOpen = true;
        this.zIndex = this.backdrop.instance.zIndex + 2;
        if (this.element) {
            setTimeout(() => {
                this.onOpen.emit();
                if (typeof(this.renderer.setStyle) !== 'undefined') {
                    // Renderer2 API
                    this.renderer.addClass(this.element.nativeElement, 'fade-in');
                } else {
                    // Renderer API
                    // ToDo this part will be removed later
                    console.warn('Deprecation warning! Use Renderer2 in FocusShiftBaseComponent');
                    this.renderer.setElementClass(this.element.nativeElement, 'fade-in', true);
                }
                this.element.nativeElement.style.zIndex = this.zIndex;
                this.element.nativeElement.focus();
            }, 1);
        }
    }
}
