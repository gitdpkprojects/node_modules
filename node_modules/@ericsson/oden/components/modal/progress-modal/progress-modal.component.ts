import { Component, ElementRef, EventEmitter, HostBinding, Renderer2, ViewEncapsulation } from '@angular/core';
import { ModalBase } from '../modal-base.class';
import { IModal } from '../modal.interface';
import { ModalActionItem } from '../../../core/models/button-action-item.model';
import { ProgressModalConfig } from './progress-modal.config';

@Component({
    selector: 'cui-progress-modal',
    templateUrl: 'progress-modal.component.html',
    styleUrls: ['progress-modal.component.scss', '../dialog/dialog.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class ProgressModalComponent extends ModalBase implements IModal {
    onClose: EventEmitter<ProgressModalComponent> = new EventEmitter<ProgressModalComponent>();
    onOpen: EventEmitter<ProgressModalComponent> = new EventEmitter<ProgressModalComponent>();
    onAction: EventEmitter<ModalActionItem> = new EventEmitter<ModalActionItem>();

    config: ProgressModalConfig = new ProgressModalConfig();
    @HostBinding('class.cui-dialog') addClass: boolean = true;
    public title: string;

    constructor(public element: ElementRef, public renderer: Renderer2) {
        super(element, renderer);
    }

    /**
     * Emits ModalActionItem to the listener
     * @param item
     */
    actionClicked(item: ModalActionItem): void {
        this.onAction.emit(item);
    }

    /**
     * Returns progress in percentage formatted string
     * @returns {string} - progress %
     */
    getProgressPercentage(): string {
        let progress: number = Math.floor(this.config.progress);
        if (progress > 100) {
            progress = 100;
        }
        return progress + '%';
    }
}
