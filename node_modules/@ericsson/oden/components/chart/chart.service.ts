import { Injectable } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import { ChartData } from '../../core/models/chart.model';
import { Addon } from '../../core/models/addon.model';
import * as _ from 'lodash';

@Injectable()
export class ChartService {
    public data$: Observable<ChartData[]>;
    public stackedKeys$: Observable<Array<string>>;
    public stackedKeysExtra$: Observable<Array<string>>;
    public miscLabelSubject$: Observable<string>;
    public addons$: Observable<Addon[]>;
    public color$: Observable<string>;
    public colorSet$: Observable<Array<string>>;
    public activeItem$: Observable<ChartData | null>;
    public hoverItem$: Observable<ChartData | null>;
    public isInteractive$: Observable<boolean>;
    public showAll$: Observable<boolean>;
    public openLink$: Observable<ChartData | null>;

    private _dataSubject: Subject<ChartData[]>;
    private _stackedKeysSubject: Subject<Array<string>>;
    private _stackedExtraKeysSubject: Subject<Array<string>>;
    private _miscLabelSubject: Subject<string>;
    private _addonsSubject: Subject<Addon[]>;
    private _colorSubject: Subject<string>;
    private _colorSetSubject: Subject<Array<string>>;
    private _activeItemSubject: Subject<ChartData | null>;
    private _hoverItemSubject: Subject<ChartData | null>;
    private _isInteractiveSubject: Subject<boolean>;
    private _showAllSubject: Subject<boolean>;
    private _activeItem: ChartData;
    private _hoverItem: ChartData;
    private _openLink: ChartData;
    private _lastActiveItem: ChartData;
    private _openLinkSubject: Subject<ChartData | null>;
    private _data: ChartData[];
    private _stackedKeys: Array<string>;
    private _stackedExtraKeys: Array<string>;
    private _miscLabel: string;
    private _addons: Addon[];
    private _color: string;
    private _colorSet: Array<string>;
    private _isInteractive: boolean;
    private _showAll: boolean = false;
    private _middlewares: Array<DataSetMiddleware> = [];

    constructor() {
        this._dataSubject = new Subject<ChartData[]>();
        this._stackedKeysSubject = new Subject<Array<string>>();
        this._stackedExtraKeysSubject = new Subject<Array<string>>();
        this._addonsSubject = new Subject<Addon[]>();
        this._miscLabelSubject = new Subject<string>();
        this._colorSubject = new Subject<string>();
        this._colorSetSubject = new Subject<Array<string>>();
        this._activeItemSubject = new Subject<ChartData | null>();
        this._hoverItemSubject = new Subject<ChartData | null>();
        this._openLinkSubject = new Subject<ChartData | null>();
        this.data$ = this._dataSubject.asObservable();
        this.stackedKeys$ = this._stackedKeysSubject.asObservable();
        this.stackedKeysExtra$ = this._stackedExtraKeysSubject.asObservable();
        this.addons$ = this._addonsSubject.asObservable();
        this.miscLabelSubject$ = this._miscLabelSubject.asObservable();
        this.color$ = this._colorSubject.asObservable();
        this.colorSet$ = this._colorSetSubject.asObservable();
        this.activeItem$ = this._activeItemSubject.asObservable();
        this.hoverItem$ = this._hoverItemSubject.asObservable();
        this._isInteractiveSubject = new Subject<boolean>();
        this._showAllSubject = new Subject<boolean>();
        this.showAll$ = this._showAllSubject.asObservable();
        this.openLink$ = this._openLinkSubject.asObservable();
    }

    /**
     * Getter and setter for AddOns
     * @param addons
     */
    set addons(addons: Addon[]) {
        this._addons = addons;
        this._addonsSubject.next(this._addons);
    }

    get addons(): Addon[] {
        return this._addons;
    }

    /**
     * Getter and setter for ChartData, emits new data to addons
     * @param data
     */
    set data(data: ChartData[]) {
        data = this._middlewares.reduce(
            (dataSet, middleware) => middleware(dataSet), data
        );
        this._data = data;
        this._dataSubject.next(this._data);
    }

    get data(): ChartData[] {
        return this._data;
    }

    /**
     * Getter and setter for changing the color. Emits new color to addons
     * @param color
     */
    set color(color: string) {
        this._color = color;
        this._colorSubject.next(this._color);
    }

    get color(): string {
        return this._color;
    }

    /**
     * Getter and setter for changing the color set. Emits new color set to addons
     * @param colorSet
     */
    set colorSet(colorSet: Array<string>) {
        this._colorSet = colorSet;
        this._colorSetSubject.next(this._colorSet);
    }

    get colorSet(): Array<string> {
        return this._colorSet;
    }

    /**
     * Sets/gets hovered ChartData item and emit changes to addons
     * @param item
     */
    set hoverItem(item: ChartData | null) {
        this._hoverItem = item;
        this._hoverItemSubject.next(item);
    }
    get hoverItem(): ChartData {
        return this._hoverItem;
    }

    /**
     * Sets/gets selected ChartData item and emit changes to addons
     * @param item
     */
    set activeItem(item: ChartData | null) {
        const nextItem = item !== this._activeItem ? item : null;
        this._lastActiveItem = this._activeItem;
        this._activeItem = nextItem;
        this._activeItemSubject.next(nextItem);
    }

    get activeItem(): ChartData {
        return this._activeItem;
    }

    /**
     * Sets/gets selected ChartData item and emit changes to addons
     * @param item
     */
    set openLink(item: ChartData | null) {
        this._openLink = item;
        this._openLinkSubject.next(item);
    }

    get openLink(): ChartData {
        return this._openLink;
    }

    get lastActiveItem(): ChartData {
        return this._lastActiveItem;
    }

    /**
     * Getter and setter for changing the Interaction or non-Interactive.
     * @param isInteractive
     */
    set isInteractive(isInteractive: boolean) {
        this._isInteractive = isInteractive;
        this._isInteractiveSubject.next(this._isInteractive);
    }

    get isInteractive(): boolean {
        return this._isInteractive;
    }

    /**
     * Getter and setter for changing the showAll or not.
     * @param showAll
     */
    set showAll(showAll: boolean) {
        this._showAll = showAll;
        this._showAllSubject.next(this._showAll);
    }

    get showAll(): boolean {
        return this._showAll;
    }

    /**
     * Adds middleware to be run in the data setter
     * Use this to mold dataSet data
     * @param {DataSetMiddleware} fn The middleware function to be called
     */
    addMiddleware(fn: DataSetMiddleware): void {
        this._middlewares.push(fn);
    }

    /**
     * To sort and reverse the dataset by value
     * @param Array<ChartData>
     * @return any
     */
    reverseSort(data: Array<ChartData>): any {
        return _.orderBy(data, 'value', 'desc');
    }

    /**
     * Getter and setter for changing the stackedKeys
     * @param keys
     */
    set stackedKeys(keys: Array<string>) {
        this._stackedKeys = keys;
        this._stackedKeysSubject.next(this._stackedKeys);
    }

    get stackedKeys(): Array<string> {
        return this._stackedKeys;
    }

    /**
     * Getter and setter for changing the stackedExtraKeys
     * @param keys
     */
    set stackedExtraKeys(keys: Array<string>) {
        this._stackedExtraKeys = keys;
        this._stackedExtraKeysSubject.next(this._stackedExtraKeys);
    }

    get stackedExtraKeys(): Array<string> {
        return this._stackedExtraKeys;
    }


    /**
     * Getter and setter for changing the miscLable.
     * @param miscLable
     */
    set miscLabel(miscLabel: string) {
        this._miscLabel = miscLabel;
        this._miscLabelSubject.next(this._miscLabel);
    }

    get miscLabel(): string {
        return this._miscLabel;
    }

}

/**
 * @param {Array<ChartData>} data Dataset to be modified
 * @returns {Array<ChartData>} The modified array
 */
type DataSetMiddleware = (data: Array<ChartData>) => Array<ChartData>;
