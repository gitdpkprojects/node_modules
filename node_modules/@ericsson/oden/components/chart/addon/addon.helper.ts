import { Type } from '@angular/core';
import { CHART_ADDON } from '../../../core/constants/chart-addons.constants';
import { LegendAddonComponent } from './legend/legend-addon.component';
import { SumAddonComponent } from './sum/sum-addon.component';
import { LinkAddonComponent } from './link/link-addon.component';
import { TrendAddonComponent } from './trend/trend-addon.component';
import { SelectorAddonComponent } from './selector/selector-addon.component';
import { ChartData } from '../../../core/models/chart.model';
import * as _ from 'lodash';
import { CuiDecimalPipe } from '../../../core/pipes/cui-decimal.pipe';
import { TranslateService } from '@ngx-translate/core';


export class AddonHelper {
    /**
     * Returns chart addon component depending of CHART_ADDON type.
     * @param type
     * @return Type<{}>
     */
    public static getAddonComponent(type: CHART_ADDON): Type<{}> {
        switch (type) {
            case CHART_ADDON.SELECTOR: return SelectorAddonComponent;
            case CHART_ADDON.LEGEND: return LegendAddonComponent;
            case CHART_ADDON.LINK: return LinkAddonComponent;
            case CHART_ADDON.SUMMARY: return SumAddonComponent;
            case CHART_ADDON.TREND: return TrendAddonComponent;
            default : throw new Error(`Type ${type} is not a known addon type.`);
        }
    }

    /**
     * Returns summarized value of array values.
     * @param Array<ChartData>
     * @return number
     */
    public static getSummarizedValue(chartDataArray: Array<ChartData>): number {
        return _.sumBy(chartDataArray, (chartData: ChartData) => {
            return chartData.data ?
                this.getSummarizedValue(chartData.data) :
                chartData.value;
        });
    }

    /**
     * Returns a string with a formatted value if item.value is present.
     * @param {ChartData} item
     * @returns {string?}
     */
    public static getFormattedValue(item: ChartData, translateService: TranslateService): string | null {
        if (isNaN(item.value)) { return null; }
        const minFractionDigits = (typeof item.fractionDigits !== 'undefined') ? item.fractionDigits : 0;
        const maxFractionDigits = (typeof item.fractionDigits !== 'undefined') ? item.fractionDigits : 20;
        const digitsInfo = '1.' + minFractionDigits + '-' + maxFractionDigits;
        const cuiDecimalPipe = new CuiDecimalPipe(translateService);
        return cuiDecimalPipe.transform(item.value, digitsInfo);
    }
}
