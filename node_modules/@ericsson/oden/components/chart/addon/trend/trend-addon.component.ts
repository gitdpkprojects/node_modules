import { Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';
import { ChartService } from '../../chart.service';
import { CHART_ADDON } from '../../../../core/constants/chart-addons.constants';
import { Addon } from '../../../../core/models/addon.model';
import { TrendAddon } from '../../../../core/models/trend-addon.model';
import { Subscription } from 'rxjs/Subscription';
import { UnSub } from '../../../../core/classes';

@Component({
    selector: 'cui-trend-addon',
    templateUrl: 'trend-addon.component.html',
    styleUrls: ['trend-addon.component.scss'],
    encapsulation: ViewEncapsulation.None
})
@UnSub()
export class TrendAddonComponent {
    @HostBinding('class.cui-trend-addon') addClass: boolean = true;

    @Input() trend: any = '';
    @Input() label: string;

    private _subscription: Subscription;

    get trendFormatted(): string {
        const trend: number = parseInt(this.trend, 10);
        let prefix: string = '';
        let suffix: string = '';
        if (trend === 0) {
            prefix = '+-';
        } else if (trend > 0) {
            prefix = '+';
        }
        if (this.trend[this.trend.length - 1] === '%') {
            suffix = '%';
        }
        return `${prefix}${trend}${suffix}`;
    }

    get trendClass(): string {
        if (this.trend && parseInt(this.trend, 10) !== 0) {
            return parseInt(this.trend, 10) > 0 ? 'increased' : 'decreased';
        }
        return '';
    }

    constructor(_chartService: ChartService) {
        // Sets new trend/label when the addons data has changed
        this._subscription = _chartService.addons$.subscribe((addons: Array<Addon>) => {
            addons.forEach((addon: Addon) => {
                if (addon.type === CHART_ADDON.TREND) {
                    this.trend = (<TrendAddon>addon).trend;
                    this.label = (<TrendAddon>addon).label;
                }
            });
        });
    }
}
