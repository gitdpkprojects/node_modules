import { Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';
import { TileSection } from '../../../../core/models/tile-section.model';

@Component({
    selector: 'cui-tile-section',
    templateUrl: 'tile-section.component.html',
    styleUrls: ['tile-section.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class TileSectionComponent {
    @HostBinding('class.cui-tile-section') addClass: boolean = true;
    @Input() sectionData: TileSection;
    maxDataRowsInSection: number = 3;

    /**
     * Gets the section data that should be displayed, ignoring rows that surpasses maxDataRowsInSection
     * @param section:TileSection
     * @returns {Array<string>}
     */
    getSectionDisplayData(section: TileSection): Array<string> {
        let returnSections: Array<string> = [];
        if (this.maxDataRowsInSection < section.data.length) {
            returnSections = section.data.slice(0, this.maxDataRowsInSection - 1);
        } else {
            returnSections = section.data;
        }
        return returnSections;
    }

    /**
     * Gets the extra section data that surpasses maxDataRowsInSection
     * and returns it as string with row breaks for the tooltip
     * @param section:TileSection
     * @returns string
     */
    getSectionTooltip(section: TileSection): string {
        let returnSections: Array<string> = [];
        if (this.maxDataRowsInSection < section.data.length) {
            returnSections = this.getExtraSectionDisplayData(section);
        }
        let tooltip = '';
        returnSections.forEach((row) => {
            tooltip += row + '\n\r';
        });
        return tooltip;
    }

    /**
     * Gets the extra section data that surpasses maxDataRowsInSection
     * @param section:TileSection
     * @returns {Array<string>}
     */
    getExtraSectionDisplayData(section: TileSection): Array<string> {
        return section.data.slice(this.maxDataRowsInSection - 1);
    }
}
