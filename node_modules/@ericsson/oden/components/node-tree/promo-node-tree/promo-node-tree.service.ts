import { EventEmitter, Injectable } from '@angular/core';
import { INode, Nodes } from '../../../core/interfaces/node.interface';
import { NodeTreeService } from '../node-tree.service';

@Injectable()
export class PromoNodeTreeService extends NodeTreeService {

    nodes: Nodes = [];
    onPromoNodeSelect: EventEmitter<INode> = new EventEmitter<INode>();

    constructor(private _nodeTreeSerive: NodeTreeService) {
        super();
        this.onNodeSelect = this._nodeTreeSerive.onNodeSelect; // assign onNodeSelect event
    }

    /**
     * Activates node. Expands children. Deactivates other nodes which might be active
     * @param node
     */
    activateNode(node: INode): void {
        node.active = true;
        node.activeParent = true;
        node.open = true;
        this.nodeComponents.forEach((n) => {
            if ((n.node.active || n.node.activeParent) && n.node.uuid !== node.uuid) {
                this.deactivateNode(n.node, false);
                this.collapseNode(n.node);
            }
        });
        const activeNode = this._nodeTreeSerive.getActiveNode(); // fetch active node from child tree
        if (activeNode) { // deactivate existing active child node
            activeNode.active = false;
        }
        this.onPromoNodeSelect.emit(node); // to plot child node tree
        this.onNodeSelect.emit(node);
    }
    /**
     * Deactives node
     * @param node
     * @param emitEvent
     */
    deactivateNode(node: INode, emitEvent = true): void {
        super.deactivateNode(node, emitEvent);
        node.activeParent = false;
        if (emitEvent) {
            this.onPromoNodeSelect.emit(null);
        }
    }
    /**
     * Checks any node is active in the current parent node
     * @param node
     */
    isAnyChildNodeActive(node: INode): boolean {
        let isActive = node.active;
        if (node.children) {
            node.children.forEach(childNode => {
                if (this.isAnyChildNodeActive(childNode)) {
                    isActive = true;
                }
            });
        }
        return isActive;
    }
}
