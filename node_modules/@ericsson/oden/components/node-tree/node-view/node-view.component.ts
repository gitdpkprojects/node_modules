/* tslint:disable:component-selector */
import {
    Component,
    HostBinding,
    Input,
    OnDestroy,
    OnInit,
    ViewEncapsulation
} from '@angular/core';
import { INode } from '../../../core/interfaces/node.interface';
import { ANIMATION } from '../../../core/constants/animation.constants';
import { NodeTreeService } from '../node-tree.service';
import { UUID } from '../../../core/helpers/uuid.class';
import { animate, state, style, transition, trigger } from '@angular/animations';

@Component({
    selector: '[cui-node-view]',
    templateUrl: './node-view.component.html',
    styleUrls: ['./node-view.component.scss'],
    animations: [
        trigger('state', [
            state('inactive', style({
                height: 0,
                padding: 0,
                marginBottom: 0
            })),
            state('active', style({
                height: '*'
            })),
            transition('inactive => active', animate('100ms ' + ANIMATION.EASE_OUT_QUAD)),
            transition('active => inactive', animate('100ms ' + ANIMATION.EASE_OUT_QUAD))
        ])
    ],
    encapsulation: ViewEncapsulation.None
})

export class NodeViewComponent implements OnInit, OnDestroy {
    @HostBinding('class.cui-node-view') addClass: boolean = true;
    @HostBinding('class.is-hidden') get isHidden(): boolean {
        return this.node && this.node.hidden;
    }
    @HostBinding('class.no-children') get noChildren(): boolean {
        return this.node && (!this.node.children || this.node.children.length < 1);
    }
    @HostBinding('class.no-opener') @Input() hideOpener?: boolean = false;
    @Input() node: INode;
    @Input() parentComponent: NodeViewComponent;

    @HostBinding('attr.id') get uuid(): string {
        return this._uuid;
    }

    // Label that's updated via service on filter.
    displayLabel: string;
    noVisibleChildren: boolean;

    protected _uuid = UUID.create();

    constructor(private _nodeTreeService: NodeTreeService) { }

    ngOnInit(): void {
        this.displayLabel = this.node.label;
        this.node.component = this;
        this.node.uuid = this.uuid;
        this.node.children = this.node.children || [];
        this._nodeTreeService.addNodeComponent(this.node);
    }

    ngOnDestroy(): void {
        this._nodeTreeService.removeNodeComponent(this.uuid);
    }
    /**
     * Toggles activate value for node
     */
    toggleActive(): void {
        this._nodeTreeService.toggleActivate(this.node);
        if (this.hideOpener) {
            this.toggleOpen();
        }
    }

    /**
     * Toggles open value for node
     */
    toggleOpen(): void {
        this._nodeTreeService.toggleOpen(this.node);

    }

    get state(): string {
        return this.node.open ? 'active' : 'inactive';
    }
}
