import {
    Component,
    ElementRef,
    EventEmitter,
    HostBinding,
    Input,
    OnChanges,
    OnInit,
    Optional,
    Output,
    SimpleChanges,
    SkipSelf,
    TemplateRef,
    ViewChild,
    ViewEncapsulation
} from '@angular/core';
import { ListControllerCategoryFilterGroup } from '../../../core/models/list-controller-category-filter-group.model';
import { ListControllerCategoryFilterItem } from '../../../core/models/list-controller-category-filter-item.model';
import { Base } from './../../../core/classes/base';
import { CATEGORY_FILTER_LAYOUT } from './../../../core/constants/category-filter.constants';
import { DrawerComponent } from './../../drawer/drawer.component';
import { MultiDrawerComponent } from './../../drawer/multi-drawer/multi-drawer.component';
import { LibraryComponent } from './../../library/library.component';
import { TableComponent } from './../../table/table.component';
import { Table2Component } from './../../table2/table.component';

@Component({
    selector: 'cui-list-controller-category-filter',
    templateUrl: 'list-controller-category-filter.component.html',
    styleUrls: ['list-controller-category-filter.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class ListControllerCategoryFilterComponent
    implements OnInit, OnChanges {
    @ViewChild('checkboxTemplate') checkboxTemplate: TemplateRef<any>;
    @ViewChild('multiSelectTemplate') multiSelectTemplate: TemplateRef<any>;

    @Input() ngModel: Array<ListControllerCategoryFilterItem>;
    @Input() filterGroup: ListControllerCategoryFilterGroup;
    @Input() blockStyle: boolean = false;
    @Input() width: string;
    @Input() layout: CATEGORY_FILTER_LAYOUT;
    @Input() expanded: boolean = false;
    @Input() numberOfVisibleFilters: number = 3;

    @Output() onCategoryFilterChange: EventEmitter<any> = new EventEmitter<
        any
    >();

    @HostBinding('attr.data-e2e') public get dataE2e() {
        if (this.filterGroup && this.filterGroup.label) {
            return this.filterGroup.label;
        }
        return '';
    }
    @HostBinding('class.table-layout') addTableLayoutClass = false;
    @HostBinding('class.library-layout') addLibraryLayoutClass = false;
    @HostBinding('class.drawer-layout') addDrawerLayoutClass = false;
    @HostBinding('class.canvas-layout') addCanvasLayoutClass = false;
    @HostBinding('class.cui-list-controller-category-filter')
    @HostBinding('class.cui-list-controller-component')
    public addClass: boolean = true;
    public template: TemplateRef<any>;

    get allSelected(): boolean {
        return (
            this.ngModel &&
            this.filterGroup.items &&
            this.ngModel.length === this.filterGroup.items.length
        );
    }
    get placeholder(): string {
        return this.allSelected ? 'ODEN.COMMON.ALL' : 'ODEN.COMMON.NONE';
    }
    public get _numberOfVisibleFilters(): number {
        return this.filterGroup.items.length > this.numberOfVisibleFilters
            ? this.numberOfVisibleFilters
            : 0;
    }
    public get _numberOfHiddenFilters(): number {
        return this.filterGroup.items.length - this._numberOfVisibleFilters >= 0
            ? this.filterGroup.items.length - this._numberOfVisibleFilters
            : 0;
    }

    constructor(
        public elementRef: ElementRef,
        @SkipSelf() @Optional() private _parent: Base
    ) { }

    /**
     * Set ngModel to equal all items at start (making all items selected)
     */
    ngOnInit(): void {
        this.ngModel = this.filterGroup.items.filter(
            (item: ListControllerCategoryFilterItem) => item.selected
        );
        // emit a change if not all filtergroup.Items are selected
        Promise.resolve().then(() => {
            if (this.ngModel.length !== this.filterGroup.items.length) {
                this.filterChange();
            }
        });

        this.setTemplate();
    }

    ngOnChanges(changes: SimpleChanges) {
        if (
            changes['ngModel'] &&
            !changes['ngModel'].firstChange &&
            changes['ngModel'].currentValue !== changes['ngModel'].previousValue
        ) {
            this.setModel(changes['ngModel'].currentValue);
        }
        if (changes['filterGroup']) {
            this.ngModel = this.filterGroup.items.filter(
                (item: ListControllerCategoryFilterItem) => item.selected
            );
        }
        if (
            changes['layout'] &&
            !changes['layout'].firstChange &&
            changes['layout'].currentValue !== changes['layout'].previousValue
        ) {
            this.setTemplate();
        }
    }

    setTemplate(): void {
        if (this._parent) {
            if (this.isPlacedInTable()) {
                this.addTableLayoutClass = true;
                this.template = this.multiSelectTemplate;
            } else if (this.isPlacedInLibrary()) {
                this.addLibraryLayoutClass = true;
                this.template = this.multiSelectTemplate;
            } else if (this.isPlacedInDrawer()) {
                this.addDrawerLayoutClass = true;
                switch (this.layout) {
                    case CATEGORY_FILTER_LAYOUT.MULTISELECT:
                        this.template = this.multiSelectTemplate;
                        break;
                    case CATEGORY_FILTER_LAYOUT.CHECKBOXES:
                        this.template = this.checkboxTemplate;
                        break;
                    default:
                        this.template = this.multiSelectTemplate;
                        break;
                }
            } else {
                this.addCanvasLayoutClass = true;
                this.template = this.multiSelectTemplate;
            }
        } else {
            this.addCanvasLayoutClass = true;
            this.template = this.multiSelectTemplate;
        }
    }

    isPlacedInTable(): boolean {
        return (
            this._parent instanceof TableComponent ||
            this._parent instanceof Table2Component
        );
    }

    isPlacedInLibrary(): boolean {
        return this._parent instanceof LibraryComponent;
    }

    isPlacedInDrawer(): boolean {
        return (
            this._parent instanceof DrawerComponent ||
            this._parent instanceof MultiDrawerComponent
        );
    }

    /**
     * When a category filter is changed from a checkbox, filter out all selected items and pass
     * them to setModel method that handles the multiselect event.
     */
    checkboxChanged(): void {
        this.setModel(
            this.filterGroup.items.filter(
                (item: ListControllerCategoryFilterItem) => item.selected
            )
        );
    }

    /**
     * emits onOrderChange event
     */
    filterChange(): void {
        this.onCategoryFilterChange.emit({
            group: this.filterGroup,
            ngModel: this.ngModel
        });
    }

    /**
     * Check all checkboxes, set all items.selected to true.
     */
    checkAll(): void {
        if (!this.filterGroup.disabled) {
            this.filterGroup.items.forEach((item: ListControllerCategoryFilterItem) => {
                item.selected = true;
            });
            this.ngModel = this.filterGroup.items;
        }
    }

    /**
     * sets the model when combo box has been changed
     * @param model
     */
    setModel(model: Array<ListControllerCategoryFilterItem>): void {
        this.ngModel = model;
        this.filterGroup.items.forEach(
            (item: ListControllerCategoryFilterItem) => {
                item.selected =
                    this.ngModel.filter(
                        (_item: ListControllerCategoryFilterItem) =>
                            _item.field === item.field
                    ).length > 0;
            }
        );
        this.filterChange();
    }
}
