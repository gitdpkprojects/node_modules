import { Component, Input, Output, EventEmitter, ViewEncapsulation, HostBinding } from '@angular/core';
import { ActionItem } from '../../../core/models/action-item.model';
import { Divider } from '../../../core/models/divider.model';

@Component({
    selector: 'cui-list-controller-action',
    templateUrl: 'list-controller-action.component.html',
    encapsulation: ViewEncapsulation.None
})

export class ListControllerActionComponent {
    @Input() actions: Array<ActionItem | Divider>;
    // Default action
    @Input() action: ActionItem;
    @Input() label: string;
    @Output() onActionSelect: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    @Output() isUnOrderedChange = new EventEmitter();
    set isUnOrdered(v: boolean) {
        this._isUnOrdered = v;
        this.isUnOrderedChange.emit(v);
    }
    @Input() get isUnOrdered(): boolean {
        return this._isUnOrdered;
    }

    @HostBinding('class.cui-list-controller-action')
    @HostBinding('class.cui-list-controller-component')
    addClass: boolean = true;
    _isUnOrdered: boolean = false;

    dividerClass: object = Divider;
    actionClass: object = ActionItem;

    constructor() { }

    /**
     * Event emitter for action click
     * @param item
     */
    onActionClick(item: ActionItem) {
        this.isUnOrdered = false;
        this.onActionSelect.emit(item);
    }
}
