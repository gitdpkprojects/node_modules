import { MultiDrawerComponent } from './../drawer/multi-drawer/multi-drawer.component';
import { Base } from './../../core/classes/base';
import {
    Component,
    ViewEncapsulation,
    HostBinding,
    ComponentFactoryResolver,
    ViewChild,
    TemplateRef,
    Input,
    Optional,
    SkipSelf,
    OnInit,
    AfterViewInit,
    ChangeDetectorRef,
    ElementRef,
    ContentChild,
    ContentChildren,
    QueryList
} from '@angular/core';
import { DialogConfig } from '../modal/dialog/dialog.config';
import { ModalActionItem } from '../../core/models/button-action-item.model';
import { DIALOG_TYPE } from '../modal/dialog/dialog.constants';
import { ModalHelperService } from '../modal/modal-helper.service';
import { DialogComponent } from '../modal/dialog/dialog.component';
import { Subscription } from 'rxjs/Subscription';
import { TranslateService } from '@ngx-translate/core';
import { LibraryComponent } from '../library/library.component';
import { DrawerComponent } from '../drawer/drawer.component';
import { TableComponent } from '../table/table.component';
import { Table2Component } from '../table2/table.component';
import { LIST_CONTROLLER_CONTEXT } from '../../core/constants/list-controller-context.constants';
import { ResizeService } from '../../core/services/resize.service';
import { UniversalAppsComponent } from '../universal/universal-apps/universal-apps.component';
import { ListControllerCategoryFilterComponent } from './list-controller-category-filter/list-controller-category-filter.component';
import { ListControllerGeneralComponent } from './list-controller-general';
import { ListControllerOrderComponent } from './list-controller-order';
import { ListControllerActionComponent } from './list-controller-action';
import { ListControllerNumberOfResultsComponent } from './list-controller-number-of-results/list-controller-number-of-results.component';

@Component({
    selector: 'cui-list-controller',
    templateUrl: 'list-controller.component.html',
    styleUrls: ['list-controller.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class ListControllerComponent implements OnInit, AfterViewInit {
    @HostBinding('class.cui-list-controller') addClass: boolean = true;
    @HostBinding('class.cui-list-controller-block-style')
    @Input()
    blockStyle: boolean = false;
    @Input()
    isFiltersExpanded: boolean = false;
    @Input()
    context: LIST_CONTROLLER_CONTEXT = LIST_CONTROLLER_CONTEXT.DEFAULT;
    @ViewChild('defaultModalFiltersTemplate')
    defaultModalFiltersTemplate: TemplateRef<any>;
    @ViewChild('tableModalFiltersTemplate')
    tableModalFiltersTemplate: TemplateRef<any>;
    @ViewChild('defaultFilterSection') defaultFilterSection: ElementRef;
    @ViewChild('defaultSortingSection') defaultSortingSection: ElementRef;
    @ViewChild('filterSortingWrapper') filterSortingWrapper: ElementRef;
    @ViewChild('defaultFilterRightPosition')
    defaultFilterRightPosition: ElementRef;

    @ContentChildren(ListControllerCategoryFilterComponent)
    cuiListControllerCategoryFilterQueryList: QueryList<
        ListControllerCategoryFilterComponent
    >;
    @ContentChildren(ListControllerGeneralComponent)
    cuiListControllerGeneralQueryList: QueryList<
        ListControllerGeneralComponent
    >;
    @ContentChildren(ListControllerOrderComponent)
    cuiListControllerOrderQueryList: QueryList<ListControllerOrderComponent>;
    @ContentChildren(ListControllerActionComponent)
    cuiListControllerActionQueryList: QueryList<ListControllerActionComponent>;
    @ContentChildren(ListControllerNumberOfResultsComponent)
    cuiListControllerNumberOfResultsQueryList: QueryList<ListControllerNumberOfResultsComponent>;

    @ContentChild('cuiListControllerGeneral')
    cuiListControllerGeneralElementRef: ElementRef;
    @ContentChild('cuiListControllerOrder')
    cuiListControllerOrderElementRef: ElementRef;
    @ContentChild('cuiListControllerAction')
    cuiListControllerActionElementRef: ElementRef;

    _modalHeader: string = '';
    _dialog: DialogComponent;
    _modalActions: ModalActionItem[] = [];
    _subscriptions: Array<Subscription> = [];
    _context: LIST_CONTROLLER_CONTEXT;
    _isModalOpen = false;
    _isFiltersHidden: boolean = false;
    _loading: boolean = false;
    _fullWidth: boolean = false;

    constructor(
        @SkipSelf() @Optional() private _parent: Base,
        private _modalHelperService: ModalHelperService,
        private _componentFactoryResolver: ComponentFactoryResolver,
        private _translateService: TranslateService,
        private _resizeService: ResizeService,
        private _changeDetectorRef: ChangeDetectorRef
    ) { }

    ngOnInit(): void {
        this._translateService
            .stream([
                'ODEN.COMPONENTS.LIST_CONTROLLER.LIST_CONTROLLER_FILTER_MODAL.HEADER',
                'ODEN.COMPONENTS.LIST_CONTROLLER.LIST_CONTROLLER_FILTER_MODAL.DONE'
            ])
            .subscribe(res => {
                this._modalHeader =
                    res[
                    'ODEN.COMPONENTS.LIST_CONTROLLER.LIST_CONTROLLER_FILTER_MODAL.HEADER'
                    ];
                this._modalActions = [
                    new ModalActionItem({
                        label:
                            res[
                            'ODEN.COMPONENTS.LIST_CONTROLLER.LIST_CONTROLLER_FILTER_MODAL.DONE'
                            ],
                        action: 'done',
                        cssClass: 'primary'
                    })
                ];
            });
        this._subscriptions.push(
            this._resizeService.resize$.subscribe(() => this._onResize())
        );
    }

    ngAfterViewInit(): void {
        // Set the correct context variable depending on parent component
        this._context = LIST_CONTROLLER_CONTEXT.DEFAULT;
        if (this._parent || this.context !== LIST_CONTROLLER_CONTEXT.DEFAULT) {
            if (
                this._parent instanceof TableComponent ||
                this._parent instanceof Table2Component ||
                this.context === LIST_CONTROLLER_CONTEXT.TABLE
            ) {
                this._context = LIST_CONTROLLER_CONTEXT.TABLE;
            } else if (this._parent instanceof LibraryComponent ||
                this.context === LIST_CONTROLLER_CONTEXT.LIBRARY) {
                this._context = LIST_CONTROLLER_CONTEXT.LIBRARY;
            } else if (
                this._parent instanceof DrawerComponent ||
                this._parent instanceof MultiDrawerComponent ||
                this.context === LIST_CONTROLLER_CONTEXT.DRAWER
            ) {
                this._context = LIST_CONTROLLER_CONTEXT.DRAWER;
            } else if (this._parent instanceof UniversalAppsComponent ||
                this.context === LIST_CONTROLLER_CONTEXT.UNIVERSALAPPS) {
                this._context = LIST_CONTROLLER_CONTEXT.UNIVERSALAPPS;
            }
        }
        this.calculateLayout();
        this._changeDetectorRef.detectChanges();
    }

    _onResize(): void {
        this.calculateLayout();
    }

    /**
     * Renders layout and measures sizes to determine the correct layout
     * @returns void
     */
    calculateLayout(): void {
        // Only do this for default context
        if (this._context === LIST_CONTROLLER_CONTEXT.DEFAULT) {
            // Show filters initally to get correct widths
            this._isFiltersHidden = false;
            this.removeFullWidthClass();
            this._handleLoder();

            setTimeout(() => {
                // Move category/general-filters to dialog if filter-section and sorting-section doesn't fit in one row.
                if (this.filterSortingWrapper.nativeElement.offsetHeight >
                    this.defaultFilterSection.nativeElement.offsetHeight) {
                    // Hide filters with More filter action
                    this._isFiltersHidden = true;
                    this.removeFullWidthClass();

                    setTimeout(() => {
                        // Check if filter-section and sorting-section width is greater than wrapper with
                        // even if category/general-filters is hidden. Then place sorting-section on new row.
                        if (this.filterSortingWrapper.nativeElement.offsetHeight >
                            this.defaultFilterSection.nativeElement.offsetHeight) {
                            this._isFiltersHidden = false;
                            this.addFullWidthClass();

                            setTimeout(() => {
                                // If Filter section is not fit in one row then switch it to with more filter action
                                if (this.defaultFilterRightPosition.nativeElement.getBoundingClientRect().left >=
                                    this.filterSortingWrapper.nativeElement.getBoundingClientRect().left +
                                    this.filterSortingWrapper.nativeElement.getBoundingClientRect().width) {
                                    // Hide filters with More filter action
                                    this._isFiltersHidden = true;
                                }
                            });
                        }
                    });
                }
            });
        }
    }

    /**
     * Function that on and off loader during rendering time
     */
    private _handleLoder(): void {
        this.startLoading();
        // Time between rendering and measuring things
        setTimeout(() => {
            this.stopLoading();
        }, 4000);
    }

    /**
     * Adds class 'loading' to list controller to hide all ugly pre-rendering
     * @returns void
     */
    startLoading(): void {
        this._loading = true;
    }

    /**
     * Removes class 'loading' from list controller
     * @returns void
     */
    stopLoading(): void {
        this._loading = false;
    }

    /**
     * Adds class 'full-width' to filterSortingWrapper
     * @returns void
     */
    addFullWidthClass(): void {
        this._fullWidth = true;
    }

    /**
     * Removes class 'full-width' from filterSortingWrapper
     * @returns void
     */
    removeFullWidthClass(): void {
        this._fullWidth = false;
    }

    /**
     * Opens a dialog with additional filters
     * @returns void
     */
    openFilterDialog(): void {
        this._isModalOpen = true;
        let template = this.defaultModalFiltersTemplate;
        if (this._context === LIST_CONTROLLER_CONTEXT.TABLE) {
            template = this.tableModalFiltersTemplate;
        }
        const config: DialogConfig = new DialogConfig({
            title: this._modalHeader,
            actions: this._modalActions,
            type: DIALOG_TYPE.DIALOG,
            template: template
        });
        this._dialog = this._modalHelperService.createDialog(
            config,
            this._componentFactoryResolver,
            false
        );
        this._subscriptions.push(
            this._dialog.onClose.subscribe(() => {
                this._isModalOpen = false;
            })
        );
        this._subscriptions.push(
            this._dialog.onAction.subscribe(actionItem => {
                switch (actionItem.action) {
                    case 'done':
                        this._dialog.close();
                        this._isModalOpen = false;
                        break;
                }
            })
        );
        this._dialog.open();
    }
}
