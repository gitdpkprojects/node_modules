import {
    Component,
    EventEmitter,
    HostBinding,
    Input,
    OnChanges,
    Output, SimpleChanges,
    ViewEncapsulation
} from '@angular/core';
import { ORDER } from '../../../core/constants/order.constants';
import { ListControllerOrderItem } from './list-controller-order-item.model';

@Component({
    selector: 'cui-list-controller-order',
    templateUrl: 'list-controller-order.component.html',
    encapsulation: ViewEncapsulation.None
})

export class ListControllerOrderComponent implements OnChanges {
    @Input() label: string;
    @Input() orderItems: Array<ListControllerOrderItem> = [];
    @Input() selectFirstItem: boolean = true;
    // Default order item
    @Output() onOrderChange: EventEmitter<ListControllerOrderItem> = new EventEmitter<ListControllerOrderItem>();
    @Output() isUnOrderedChange = new EventEmitter();
    set isUnOrdered(v: boolean) {
        this._isUnOrdered = v;
        this.isUnOrderedChange.emit(v);
    }
    @Input() get isUnOrdered(): boolean {
        return this._isUnOrdered;
    }
    @Input() orderItem: ListControllerOrderItem;

    @HostBinding('class.cui-list-controller-order')
    @HostBinding('class.cui-list-controller-component')
    addClass: boolean = true;
    _isUnOrdered: boolean = false;

    constructor() { }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['orderItems'] && !changes['orderItems'].firstChange && !this.orderItem && this.orderItems.length > 0) {
            // set orderItem to first orderItem/option, only if required is true
            if (this.selectFirstItem) {
                this.orderItem = this.orderItems[0];
            }
            this.orderChange();
        }
    }

    /**
     * emits onOrderChange event
     */
    orderChange(): void {
        this.onOrderChange.emit(this.orderItem);
    }

    /**
     * Changes order of table. Is sent to <cui-table> in view
     */
    toggleOrder(): void {
        const sortOrders = this.orderItem.sortOrders;
        if (sortOrders != null) {
            let index = sortOrders.indexOf(this.orderItem.order);
            if (index + 1 === sortOrders.length || index === -1) {
                index = 0;
            } else {
                index++;
            }
            this.orderItem.order = sortOrders[index];
        } else {
            this.orderItem.order = this.orderItem.order === ORDER.ASCENDING ? ORDER.DESCENDING : ORDER.ASCENDING;
        }
        this.orderChange();
    }

    /**
     * changes the orderItem and runs either toggleOrder or orderChange
     * @param orderItem
     */
    setOrderItem(orderItem: ListControllerOrderItem) {
        this.orderItem = orderItem;
        this.isUnOrdered = false;
        if (this.orderItem && this.orderItem.order === ORDER.NONE) {
            this.toggleOrder();
        } else {
            this.orderChange();
        }
    }

    /**
     * Gets icon name corresponding current sorting value of header.
     *
     * @returns {string} - arrow-up, arrow-down or ''
     */
    getOrderIcon(): string {
        if (this.orderItem && this.orderItem.order === ORDER.ASCENDING) {
            return 'arrow-up';
        } else if (this.orderItem && this.orderItem.order === ORDER.DESCENDING) {
            return 'arrow-down';
        }

        return '';
    }


}
