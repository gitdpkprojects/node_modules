import { Component, OnChanges, Input, ViewEncapsulation, ElementRef, OnInit } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Characteristic } from '../../core/models/characteristic.model';
import { UI_HINTS } from '../../core/constants/characteristic-ui-hints.constants';
import { PaginationData } from '../pagination/pagination.model';
import { CharacteristicHelperService } from './characteristic.helper.service';
import { DOMHelper } from '../../core/helpers';
import { ElementOverlayConfig } from '../../core/models';
import { ELEMENT_OVERLAY_STATE } from '../../core/constants';
import { UnSub } from '../../core/classes';
import { Subscription } from 'rxjs';

@Component({
  selector: 'cui-characteristics',
  templateUrl: 'characteristics.component.html',
  styleUrls: ['characteristics.component.scss'],
  encapsulation: ViewEncapsulation.None
})
@UnSub()
export class CharacteristicsComponent implements OnChanges, OnInit {

  @Input() data: Characteristic[];
  isData: boolean = false;
  humanReadableId: string = '';
  description: string = '';
  overlayConfig: ElementOverlayConfig = new ElementOverlayConfig();
  _paginationData: PaginationData;
  isInDrawer: any;
  private _visibleData: Characteristic[] = [];
  private _subscriptions: Array<Subscription> = [];

  constructor(private _CharacteristicHelper: CharacteristicHelperService,
    private _translate: TranslateService,
    private _element: ElementRef) {
    this._subscriptions.push(
      this._translate.stream(['ODEN.COMMON.ID', 'ODEN.COMMON.DESCRIPTION',
        'ODEN.COMMON.NO_CHARACTERISTIC']).subscribe((values) => {
          this.humanReadableId = values['ODEN.COMMON.ID'];
          this.description = values['ODEN.COMMON.DESCRIPTION'];
          this.overlayConfig.state = ELEMENT_OVERLAY_STATE.NOTICE;
          this.overlayConfig.label = values['ODEN.COMMON.NO_CHARACTERISTIC'];
        })
    );
  }

  ngOnInit() {
    this.isInDrawer = DOMHelper.closestParent(this._element.nativeElement, 'cui-multi-drawer');
    this.isData = this.data.length > 0;
  }

  ngOnChanges() {
    // Set visibility of characteristics with UI_HINTS visibility
    this._setVisibility();
    // Sort Data based on UI_HINTS priority
    this._sortData();
    // Always set data to be displayed in a page
    this._setPaginationData(this.data);
  }

  /**
   * Sets dat to display within a page
   * @param data
   */
  private _setPaginationData(data: Array<Characteristic>): void {
    if (!this._paginationData) {
      // Creates a new instance of PaginationData with the defaults values.
      this._paginationData = new PaginationData({
        totalItems: data.filter((t) => t.visible).length
      });
    }
    this.paginatedData();
  }

  /**
   * Sort data based on ui hints priority
   */
  private _sortData() {
    this.data.sort(this.sortByPriority.bind(this));
  }

  /**
   * Set visibile property on each characteristic from ui hints visibility
   */
  private _setVisibility() {
    this.data.forEach((item) => {
      item.visible = this._CharacteristicHelper.getVisibility(item);
    });
  }

  /**
   * Returns either paginated data
   * @returns {Array<Characteristic>}
   */
  paginatedData() {
    const pData = this._paginationData;
    // visible data holds items that can be displayed
    const visibleData = this.data.filter((t) => t.visible);
    const startIndex = pData.currentPage * pData.itemsPerPage;
    let endIndex = startIndex + pData.itemsPerPage;
    if (endIndex > visibleData.length) {
      endIndex = visibleData.length;
    }

    // reset pagination
    this._visibleData.forEach((t) => t.inPage = false);
    this._visibleData = visibleData.slice(startIndex, endIndex);
    // set pagination
    this._visibleData.forEach((t) => t.inPage = true);
  }

  /**
   * Sort by priority
   * @param a
   * @param b
   * @returns {number}
   */
  private sortByPriority(a, b): number {
    const x = this._CharacteristicHelper.getPropertyValue(a.properties, UI_HINTS.PRIORITY) || 999;
    const y = this._CharacteristicHelper.getPropertyValue(b.properties, UI_HINTS.PRIORITY) || 999;

    return (x === y) ? this.sortByLabel(a.name, b.name) : x - y;
  }

  /**
   * Sort by label
   * @param a
   * @param b
   * @returns {number}
   */
  private sortByLabel(a, b): number {
    if (a < b) {
      return -1;
    }
    if (a > b) {
      return 1;
    }
    return 0;
  }

}
