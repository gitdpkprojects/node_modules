import { Injectable } from '@angular/core';
import { Characteristic } from '../../core/models/characteristic.model';
import { CharacteristicProperty } from '../../core/models/characteristic-property.model';
import { CharacteristicValue } from '../../core/models/characteristic-value.model';
import { TranslateService } from '@ngx-translate/core';
import { UI_HINTS } from '../../core/constants/characteristic-ui-hints.constants';

@Injectable()
export class CharacteristicHelperService {
    private notAvailable: string = '';

    constructor(private _translate: TranslateService) {
        this._translate.stream('ODEN.COMMON.NOT_AVAILABLE').subscribe(value => this.notAvailable = value);
    }

    /**
     * Get property value based on input key
     * @param {CharacteristicProperty[]} characteristicProperties
     * @param {string} key
     * @returns {any}
     */
    getPropertyValue(characteristicProperties: CharacteristicProperty[], key: string): any {
        if (characteristicProperties) {
            const property = characteristicProperties.find((t) => t.name === key);
            return property ? property.value : null;
        }
        return null;
    }

    /**
    * Get visibility based on characteristic properties
    * @param {Characteristic} characeristic
    */
    getVisibility(characeristic: Characteristic): boolean {
        return this.getPropertyValue(characeristic.properties, UI_HINTS.VISIBLE);
    }

    /**
     * Get characteristic values based on isMulti or not
     * @param {Characteristic} characteristic
     * @return {Array<CharacteristicValue>}
     */
    getCharacteristicValue(characteristic: Characteristic): Array<CharacteristicValue> {
        if (characteristic.isMultiValued()) {
            // Get multi value
            return this.getMutiDisplayValue(characteristic);
        } else {
            // Get single value
            return [
                this.getSingleDisplayValue(characteristic)
            ];
        }
    }

    /**
     * Get single characterisic display values
     * @param {Characteristic} characteristic
     * @returns {string}
     */
    getSingleDisplayValue(characteristic: Characteristic): CharacteristicValue {
        let value: any = null, valueFrom: any = null, valueTo: any = null;
        let unitOfMeasure = characteristic.unitOfMeasure;
        const selectedValue = characteristic.displayValue || characteristic.value;
        const selectedRange = characteristic.valueFrom || characteristic.valueTo;

        if (selectedValue || selectedRange) {
            value = selectedValue;
            valueFrom = characteristic.valueFrom;
            valueTo = characteristic.valueTo;
        } else if (characteristic.characteristicValues) {

            const selectedItem = characteristic.characteristicValues.find((t) => t.isSelected === true);
            if (selectedItem) {
                // If any selected
                unitOfMeasure = selectedItem.unitOfMeasure;
                value = selectedItem.displayValue || selectedItem.value;
                valueFrom = selectedItem.valueFrom;
                valueTo = selectedItem.valueTo;
            } else {
                // If any default
                const defaultItem = characteristic.characteristicValues.find((t) => t.isDefault === true);
                if (defaultItem) {
                    unitOfMeasure = defaultItem.unitOfMeasure;
                    value = defaultItem.displayValue || defaultItem.value;
                    valueFrom = defaultItem.valueFrom;
                    valueTo = defaultItem.valueTo;
                }
            }
        }

        return new CharacteristicValue({
            displayValue: value || this.notAvailable,
            unitOfMeasure: unitOfMeasure,
            valueFrom: valueFrom || this.notAvailable,
            valueTo: valueTo || this.notAvailable
        });
    }

    /**
    * Get multi characterisic display values
    * @param {Characteristic} characteristic
    * @returns {CharacteristicValue[]}
    */
    getMutiDisplayValue(characteristic: Characteristic): CharacteristicValue[] {
        const value: CharacteristicValue[] = [];

        if (characteristic.characteristicValues) {

            // If any selected items
            const selectedItems = characteristic.characteristicValues.filter((t) => t.isSelected === true);

            // If any default items
            const defaultItems = characteristic.characteristicValues.filter((t) => t.isDefault === true);

            const items = (selectedItems && selectedItems.length > 0) ? selectedItems : defaultItems;
            if (items) {
                items.forEach((item) => {
                    const displayValue = item.displayValue || item.value || this.notAvailable;
                    value.push(new CharacteristicValue({
                        displayValue: displayValue,
                        unitOfMeasure: item.unitOfMeasure,
                        valueFrom: item.valueFrom || this.notAvailable,
                        valueTo: item.valueTo || this.notAvailable
                    }));
                });
            }
        }
        return value;
    }
}
