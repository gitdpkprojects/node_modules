import { ValidationSummaryItemType, ValidationSummaryItem } from '../../core/models/validation-summary-item.model';

export class ValidationSummaryTab {
    static readonly MIN_INDEX: number = 1;
    static readonly DEFAULT_MESSAGE: string = '';
    static readonly DEFAULT_ITEMS: Array<ValidationSummaryItem> = [];
    items: Array<ValidationSummaryItem> = [];
    numberOfItems: number = 0;
    previousHidden: boolean = true;
    hidden: boolean = true;
    selected: boolean = false;
    index: number = 1;
    transitionDelay: boolean = false;

    constructor(
        public readonly type: ValidationSummaryItemType | string,
        public title: string,
        public icon: string,
        public color: string) {
    }

    get hasItems(): boolean {
        return this.items.length !== 0;
    }

    update(items: Array<ValidationSummaryItem>): void {
        const previousMessage = this.message;
        this.previousHidden = this.hidden;
        this.transitionDelay = false;
        this.items = items.length !== 0 ? items.filter(item => item.type === this.type) : ValidationSummaryTab.DEFAULT_ITEMS;
        this.numberOfItems = this.items.length !== 0 ? this.items.length : this.numberOfItems;
        this.hidden = this.items.length === 0;
        if (this.index < ValidationSummaryTab.MIN_INDEX ||
            this.index > this.items.length ||
            this.items[this.index - 1].message !== previousMessage) {
            this.index = Math.max(1, this.items.findIndex(item => item.message === previousMessage) + 1);
        }
    }

    clear(): void {
        this.items = ValidationSummaryTab.DEFAULT_ITEMS;
    }

    next(): void {
        this.index = Math.min(this.index + 1, this.numberOfItems);
    }

    previous(): void {
        this.index = Math.max(this.index - 1, ValidationSummaryTab.MIN_INDEX);
    }

    get item(): ValidationSummaryItem {
        if (this.index <= this.items.length) {
            return this.items[this.index - 1];
        } else {
            return null;
        }
    }

    get message(): string {
        const item = this.item;
        return (item ? item.message : null) || ValidationSummaryTab.DEFAULT_MESSAGE;
    }

    get hasGoTo(): boolean {
        const item = this.item;
        return item ? !!item.goTo || !!item.goToPath : false;
    }
}
