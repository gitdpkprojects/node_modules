import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { ValidationSummaryItem, ValidationSummaryItemGroup } from '../../core/models/validation-summary-item.model';

@Injectable()
export class ValidationSummaryService {
    readonly onItemsChange$: Observable<Array<ValidationSummaryItem>>;
    readonly onGroupsChange$: Observable<Array<ValidationSummaryItemGroup>>;
    readonly onGoTo$: Observable<ValidationSummaryItem>;
    private _items: BehaviorSubject<Array<ValidationSummaryItem>>;
    private _groups: BehaviorSubject<Array<ValidationSummaryItemGroup>>;
    private _onGoTo: Subject<ValidationSummaryItem>;

    constructor() {
        this._items = new BehaviorSubject<Array<ValidationSummaryItem>>([]);
        this.onItemsChange$ = this._items.asObservable();
        this._groups = new BehaviorSubject<Array<ValidationSummaryItemGroup>>([]);
        this.onGroupsChange$ = this._groups.asObservable();
        this._onGoTo = new Subject();
        this.onGoTo$ = this._onGoTo.asObservable();
    }

    /**
     * Set items
     * @param items Items to display
     */
    set items(items: Array<ValidationSummaryItem>) {
        this._items.next(this._cloneItems(items || []));
    }

    /**
     * Set groups
     * @param groups Groups to display
     */
    set groups(groups: Array<ValidationSummaryItemGroup>) {
        this._groups.next(this._cloneGroups(groups || []));
    }

    /**
     * Emit go to event
     * @param item Item to go to
     */
    _goTo(item: ValidationSummaryItem): void {
        if (item) {
            this._onGoTo.next(item);
        }
    }

    /**
     * Clone all items
     * @param items Items to clone
     */
    private _cloneItems(items: Array<ValidationSummaryItem>): Array<ValidationSummaryItem> {
        return items.map(item => new ValidationSummaryItem(item));
    }

    /**
     * Clone all groups
     * @param groups Groups to clone
     */
    private _cloneGroups(groups: Array<ValidationSummaryItemGroup>): Array<ValidationSummaryItemGroup> {
        return groups.map(group => new ValidationSummaryItemGroup(group));
    }
}
