import {
    Component,
    ViewEncapsulation,
    OnInit,
    OnDestroy,
    ComponentFactoryResolver,
    ChangeDetectionStrategy,
    ChangeDetectorRef,
    Renderer2,
    HostBinding
} from '@angular/core';
import { ValidationSummaryService } from './validation-summary.service';
import { OverlayService } from '../overlay/overlay.service';
import { Subscription } from 'rxjs/Subscription';
import {
    ValidationSummaryItem,
    ValidationSummaryItemGroup,
    ValidationSummaryItemType
} from '../../core/models/validation-summary-item.model';
import { ValidationSummaryTab } from './validation-summary-tab.model';

import { ApplicationService, WhitelabelService } from '../../core/services';
import { ModalHelperService } from '../modal';
import { DialogConfig, DialogComponent } from '../modal/dialog';
import { SeeAllDialogComponent } from './see-all-dialog/see-all-dialog.component';
import { Observable } from 'rxjs';
import { COLORWHITELABEL } from '../../core/constants/color.whitelabel';

@Component({
    selector: 'cui-validation-summary',
    templateUrl: 'validation-summary.component.html',
    styleUrls: ['validation-summary.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    encapsulation: ViewEncapsulation.None
})
export class ValidationSummaryComponent implements OnInit, OnDestroy {
    _expanded: boolean = false;
    _errors: ValidationSummaryTab;
    _warnings: ValidationSummaryTab;
    _tabs: Array<ValidationSummaryTab>;
    _selected: boolean = false;
    _message: string = ValidationSummaryTab.DEFAULT_MESSAGE;
    _index: number = 1;
    _maxIndex: number = 1;
    _color: string = null;
    _hasGoTo: boolean = false;
    _items: Array<ValidationSummaryItem> = [];
    _icon: string = null;
    _selectedTab: ValidationSummaryTab = null;
    _throttleTime: number = 680;
    _type = null;
    @HostBinding('class.cui-validation-summary') addClass: boolean = true;
    @HostBinding('style.zIndex') _zIndex: number = 0;
    @HostBinding('class.visible') _visible: boolean = false;
    @HostBinding('class.expanded') get _visibleAndExpanded(): boolean {
        return this._visible && this._expanded;
    }

    private _subscriptions: Array<Subscription> = [];
    private _seeAllDialogComponent: DialogComponent;

    constructor(
        private _renderer: Renderer2,
        private _validationSummaryService: ValidationSummaryService,
        private _overlayService: OverlayService,
        private _applicationService: ApplicationService,
        private _modalHelperService: ModalHelperService,
        private _componentFactoryResolver: ComponentFactoryResolver,
        private _changeDetectorRef: ChangeDetectorRef,
        private _whitelabelService: WhitelabelService) {
    }

    ngOnInit(): void {
        const errorColor = this._whitelabelService.getPropertyValue(COLORWHITELABEL.CRITICAL, {
            toRgb: false
        });
        const warningColor = this._whitelabelService.getPropertyValue(COLORWHITELABEL.WARNING,
        {
            toRgb: false
        });
        this._errors = new ValidationSummaryTab(ValidationSummaryItemType.ERROR,
            'ODEN.COMPONENTS.VALIDATION_SUMMARY.ERROR_MESSAGES', 'error', errorColor);
        this._warnings = new ValidationSummaryTab(ValidationSummaryItemType.WARNING,
            'ODEN.COMPONENTS.VALIDATION_SUMMARY.WARNING_MESSAGES', 'warning', warningColor);
        this._tabs = [this._errors, this._warnings];
        this._zIndex = this._overlayService.highestZindex + 1;
        this._subscriptions.push(this._overlayService.onZIndexChange$.subscribe(_zIndex => {
            this._zIndex = this._overlayService.highestZindex + 1;
            this._notifyChanges();
        }));
        this._subscriptions.push(this._throttle(this._validationSummaryService.onItemsChange$).subscribe(items => {
            this._updateTabs(items || ValidationSummaryTab.DEFAULT_ITEMS);
        }));
        this._subscriptions.push(this._throttle(this._validationSummaryService.onGroupsChange$).subscribe(groups => {
            this._updateGroups(groups);
        }));
    }

    ngOnDestroy(): void {
        this._renderer.removeClass(document.body, 'cui-validation-summary-visible');
        this._renderer.removeClass(document.body, 'cui-validation-summary-expanded');
        this._subscriptions.forEach(subscription => subscription.unsubscribe());
        this._closeSeeAllDialog();
    }

    /**
     * Select tab
     * @param selectedTab Tab to be selected
     */
    _select(selectedTab: ValidationSummaryTab): void {
        if (this._visible) {
            if (selectedTab.selected && this._expanded) {
                selectedTab.selected = false;
                this._collapse();
            } else {
                this._unselectAllTabs();
                selectedTab.selected = true;
                this._selected = true;
                this._selectedTab = selectedTab;
                this._expand();
                this._updateInternalVariables();
                this._notifyChanges();
            }
        }
    }

    /**
     * Closes the summary
     */
    _close(): void {
        this._collapse();
    }

    /**
     * Move to next message
     */
    _next(): void {
        if (this._selectedTab && this._expanded && this._visible) {
            this._selectedTab.next();
            this._updateInternalVariables();
            this._notifyChanges();
        }
    }

    /**
     * Move to previous message
     */
    _previous(): void {
        if (this._selectedTab && this._expanded && this._visible) {
            this._selectedTab.previous();
            this._updateInternalVariables();
            this._notifyChanges();
        }
    }

    /**
     * Go to by event or navigation
     */
    _goTo(): void {
        if (this._selectedTab) {
            this._goToItem(this._selectedTab.item);
        }
    }

    /**
     * Display "see all" dialog
     */
    _seeAll(): void {
        this._closeSeeAllDialog();
        if (this._expanded && this._visible) {
            this._seeAllDialogComponent = this._modalHelperService.createDialog(new DialogConfig({
                width: '800px',
                component: SeeAllDialogComponent
            }), this._componentFactoryResolver);
            const seeAllDialog: SeeAllDialogComponent = this._seeAllDialogComponent.customComponent;
            seeAllDialog._title = this._selectedTab.title;
            seeAllDialog._icon = this._selectedTab.icon;
            seeAllDialog._items = this._selectedTab.items;
            seeAllDialog._onClose$.forEach(() => this._closeSeeAllDialog());
            seeAllDialog._onGoTo$.forEach(item => this._goToItem(item));
        }
    }

    /**
     * Go to by event or navigation
     * @param item item to go to
     */
    private _goToItem(item: ValidationSummaryItem): void {
        if (item && this._expanded && this._visible) {
            this._closeSeeAllDialog();
            if (item.goTo) {
                this._validationSummaryService._goTo(item);
            } else if (item.goToPath) {
                this._applicationService.navigateToPath(item.goToPath);
            }
        }
    }

    /**
     * Close "see all" dialog
     */
    private _closeSeeAllDialog(): void {
        if (this._seeAllDialogComponent) {
            this._seeAllDialogComponent.close();
            this._seeAllDialogComponent = null;
        }
    }

    /**
     * Mark all tabs as unselected
     */
    private _unselectAllTabs(): void {
        this._tabs.forEach(tab => tab.selected = false);
        this._selected = false;
        this._selectedTab = null;
    }

    /**
     * Update all tabs with items
     * @param items New uptimes to update tabs with
     */
    private _updateTabs(items: Array<ValidationSummaryItem>): void {
        if (items.length === 0 && this._visible) {
            this._hide();
        } else if (items.length !== 0) {
            this._tabs.forEach(tab => tab.update(items));
            this._update();
        }
    }

    /**
     * Update tabs for new groups
     * @param groups New groups to add, remove or update tabs
     */
    private _updateGroups(groups: Array<ValidationSummaryItemGroup>): void {
        const tabsToClear = this._tabs.filter(tab => !this._isStandard(tab.type) && !tab.hidden &&
            !groups.some(group => group.type === tab.type));
        const tabsToRemove = this._tabs.filter(tab => !this._isStandard(tab.type) && tab.hidden &&
            !groups.some(group => group.type === tab.type));
        const tabsToUpdate = this._tabs.filter(tab => !this._isStandard(tab.type) &&
            groups.some(group => group.type === tab.type));
        const groupsToAdd = groups.filter(group => !this._isStandard(group.type) && !this._tabs.some(tab => tab.type === group.type));
        tabsToClear.forEach(tab => tab.clear());
        tabsToUpdate.forEach(tab => {
            const group = groups.find(g => g.type === tab.type);
            tab.title = group.title;
            tab.icon = group.icon;
            tab.color = group.color;
        });
        const tabsToAdd = groupsToAdd.map(group => new ValidationSummaryTab(group.type, group.title, group.icon, group.color));
        this._tabs = this._tabs.concat(tabsToAdd).filter(tab => !tabsToRemove.some(tabToRemove => tabToRemove === tab));
        const newItems = this._tabs.reduce((items, tab) => items.concat(tab.items), []);
        this._updateTabs(newItems);
    }

    /**
     * Determine if type is a standard type or not
     */
    private _isStandard(type: ValidationSummaryItemType | string): boolean {
        return type === ValidationSummaryItemType.ERROR || type === ValidationSummaryItemType.WARNING;
    }

    /**
     * Update visablity and internal variables
     */
    private _update(): void {
        const previouslyVisible = this._visible;
        if (!previouslyVisible && this._expanded) {
            this._collapse();
        }
        this._visible = this._tabs.some(tab => tab.hasItems);
        this._toggleVisibilityClass();
        this._autoSelectTab();
        if (!previouslyVisible) {
            this._forceTabVisibility();
        }
        this._delayTabsSlidingDown();
        this._updateInternalVariables();
        this._notifyChanges();
    }

    /**
     * Force tab visability state
     */
    private _forceTabVisibility(): void {
        this._tabs.forEach(tab => tab.previousHidden = tab.hidden);
    }

    /**
     * Delay all tabs sliding down to allow new tabs to slide up
     */
    private _delayTabsSlidingDown(): void {
        const tabsSlidingUp = this._tabs.some(tab => tab.previousHidden && !tab.hidden);
        if (tabsSlidingUp) {
            this._tabs.forEach(tab => {
                if (!tab.previousHidden && tab.hidden) {
                    tab.transitionDelay = true;
                }
            });
        }
    }

    /**
     * Auto select first visible tab
     */
    private _autoSelectTab(): void {
        if (this._selectedTab && this._selectedTab.hidden) {
            this._selectedTab.selected = false;
            this._selectedTab = null;
            const firstVisibleTab = this._tabs.find(tab => !tab.hidden);
            if (firstVisibleTab) {
                firstVisibleTab.selected = true;
                this._selectedTab = firstVisibleTab;
            }
        }
    }

    /**
     * Hide summary
     */
    private _hide(): void {
        this._visible = false;
        this._tabs.forEach(tab => tab.clear());
        this._toggleVisibilityClass();
        this._toggleExpandedClass();
        this._notifyChanges();
    }

    /**
     * Update internal variables used in template
     */
    private _updateInternalVariables(): void {
        if (this._selectedTab) {
            this._message = this._selectedTab.message || ValidationSummaryTab.DEFAULT_MESSAGE;
            this._index = this._selectedTab.index || ValidationSummaryTab.MIN_INDEX;
            this._maxIndex = this._selectedTab.numberOfItems;
            this._hasGoTo = this._selectedTab.hasGoTo;
            this._items = this._selectedTab.items || ValidationSummaryTab.DEFAULT_ITEMS;
            this._icon = this._selectedTab.icon;
            this._type = this._selectedTab.type;
            this._color = null;
            if (this._type !== ValidationSummaryItemType.ERROR && this._type !== ValidationSummaryItemType.WARNING) {
                this._color = this._selectedTab.color;
            }
        }
    }

    /**
     * Expand message section
     */
    private _expand(): void {
        if (!this._expanded) {
            this._expanded = true;
            this._toggleExpandedClass();
        }
    }

    /**
     * Collapse message section
     */
    private _collapse(): void {
        if (this._expanded) {
            this._expanded = false;
            this._toggleExpandedClass();
        }
    }

    /**
     * Toggle class on body (used to control behaviour of snack bar)
     */
    private _toggleVisibilityClass(): void {
        if (this._visible) {
            this._renderer.addClass(document.body, 'cui-validation-summary-visible');
        } else {
            this._renderer.removeClass(document.body, 'cui-validation-summary-visible');
        }
    }

    /**
     * Toggle class on body (used to control behaviour of snack bar)
     */
    private _toggleExpandedClass(): void {
        if (this._expanded && this._visible) {
            this._renderer.addClass(document.body, 'cui-validation-summary-expanded');
        } else {
            this._renderer.removeClass(document.body, 'cui-validation-summary-expanded');
        }
    }

    /**
     * Push change notification
     */
    private _notifyChanges(): void {
        this._changeDetectorRef.detectChanges();
    }

    /**
     * Throttle events
     */
    private _throttle<T>(obervable: Observable<T>): Observable<T> {
        if (this._throttleTime > 0) {
            return obervable.throttleTime(this._throttleTime, undefined, { leading: true, trailing: true });
        } else {
            return obervable;
        }
    }
}
