/* tslint:disable:directive-selector */
import {
    ComponentFactoryResolver,
    ComponentRef,
    Directive,
    EventEmitter,
    Input,
    OnChanges,
    OnDestroy,
    OnInit,
    Output,
    SimpleChanges,
    ViewContainerRef
} from '@angular/core';
import { IElementOverlayConfig } from '../../core/interfaces/element-overlay-config.interface';
import { ELEMENT_OVERLAY_STATE } from '../../core/constants/element-overlay-state.constants';
import { ElementErrorOverlayComponent } from './error-overlay/error-overlay.component';
import { ActionItem } from '../../core/models/action-item.model';
import { Subscription } from 'rxjs/Subscription';
import { UnSub } from '../../core/classes';

@Directive({
    selector: '[cuiElementOverlay]'
})
@UnSub()
export class ElementOverlayDirective implements OnInit, OnDestroy, OnChanges {
    // Different local name because of readability. The input is the same as the directive
    // tslint:disable-next-line:no-input-rename
    @Input('cuiElementOverlay') elementOverlayConfig: IElementOverlayConfig;
    @Output() onElementOverlayAction: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    private _componentRef: ComponentRef<any>;
    private _subscriptions: Array<Subscription> = [];
    constructor(private _viewContainerRef: ViewContainerRef,
        private _componentFactoryResolver: ComponentFactoryResolver) { }

    ngOnInit() {
        this.createOverlay();
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['elementOverlayConfig'] && !changes['elementOverlayConfig'].firstChange) {
            this.createOverlay();
        }
    }

    createOverlay(): void {
        if (this._componentRef) {
            this._componentRef.destroy();
        }
        if (this.elementOverlayConfig) {
            let componentType;
            let settings;
            switch (this.elementOverlayConfig.state) {
                case ELEMENT_OVERLAY_STATE.ERROR:
                case ELEMENT_OVERLAY_STATE.NONE:
                case ELEMENT_OVERLAY_STATE.SYSTEM_ERROR:
                case ELEMENT_OVERLAY_STATE.LOADING:
                case ELEMENT_OVERLAY_STATE.NOTICE:
                    componentType = ElementErrorOverlayComponent;
                    settings = {
                        overlayConfig: this.elementOverlayConfig
                    };
                    break;
            }
            if (componentType) {
                const factory = this._componentFactoryResolver.resolveComponentFactory(componentType);
                this._componentRef = this._viewContainerRef.createComponent(factory);
                Object.assign(this._componentRef.instance, settings);
                if (this._componentRef.instance.hasOwnProperty('onActionClick')) {
                    this._subscriptions.push(this._componentRef.instance.onActionClick.subscribe((action: ActionItem) => {
                        this.onElementOverlayAction.emit(action);
                    }));
                }
            }
        }
    }

    ngOnDestroy(): void {
        if (this._componentRef) {
            this._componentRef.destroy();
        }
    }
}
