import { OnChanges, OnDestroy, HostBinding } from '@angular/core';
import { TabViewService } from './tab-view.service';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { UnSub } from '../../core/classes';

@UnSub()
export class TabView implements OnChanges, OnDestroy {
    public tabIndex?: number;
    @HostBinding('@routeAnimation')
    animationDirection: string;
    @HostBinding('class')
    tabViewClass: string = 'tab-view';
    private _index: number;
    _subscriptions: Array<Subscription> = [];
    _subscription: Subscription;

    /**
     * Injects Tab View Service and activated router from subclass
     * @param _tabService
     * @param _route
     */
    constructor(private _tabService: TabViewService, private _route: ActivatedRoute) {
        // Sets animation direction for screen when leaving view.
        this._subscriptions.push(this._tabService.animationDirection$.subscribe((d) => {
            this.animationDirection = d[this._index];
        }));
        this.setIndexAndDirection();
    }

    /**
     * Sets index and direction on change, will only trigger for inline tabs (when tabIndex changes)
     */
    ngOnChanges(): void {
        this.setIndexAndDirection();
    }

    setIndexAndDirection(): void {
        // Stores tab index for view. tabIndex param specified in router or via tabIndex (for inline tabs that doesn't use routing)
        this._index = this.tabIndex > -1 ? this.tabIndex : this._route.snapshot.data['tabIndex'];
        if (this._index > -1) {
            this.animationDirection = this._tabService.getAnimationForIndex(this._index);
        }
    }

    ngOnDestroy(): void {
    }
}
