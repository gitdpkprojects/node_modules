/* tslint:disable:directive-selector-name */
import {
    AfterViewInit, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, Output,
    Renderer2
} from '@angular/core';

@Directive({selector: '[cui-search]'})

export class InputSearchDirective implements AfterViewInit, OnDestroy {
    @HostBinding('class.cui-input-search') addClass: boolean = true;
    @Input() ngModel;
    @Output() ngModelChange = new EventEmitter();

    label: HTMLLabelElement;
    clearIcon: HTMLSpanElement;
    listener: any;

    constructor(private _element: ElementRef, private _renderer: Renderer2) {
    }

    /**
     * Create as a clear search icon, similar to the native HTML5 one (but this one works in Firefox that lacks that feature).
     */
    ngAfterViewInit(): void {
        const id: string = this._element.nativeElement.id;
        if (id) {
            this.label = <HTMLLabelElement> document.querySelector(`label[for='${id}']`);
        }
        if (!this.label) {
            const closest_label = <HTMLLabelElement> this._element.nativeElement.parentNode.querySelector('label');
            if (closest_label) {
                this.label = closest_label;
            }
        }
        setTimeout(() => {
            if (this.label && !this.clearIcon) {
                this.clearIcon = document.createElement('span');
                this.clearIcon.className = 'clear-search';
                this.label.parentNode.insertBefore(this.clearIcon, this.label.nextSibling);
                this.listener = this._renderer.listen(this.clearIcon, 'click', () => {
                    this._element.nativeElement.value = '';
                    this._element.nativeElement.focus();
                    this.ngModelChange.emit('');
                });
            }
        }, 1);
    }

    ngOnDestroy(): void {
        if (typeof(this.listener) === 'function') {
            this.listener(); // Unbinds to any events
        }
    }

}
