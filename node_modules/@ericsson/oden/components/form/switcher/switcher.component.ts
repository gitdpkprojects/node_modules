import {
    Component, ElementRef, forwardRef, HostBinding, HostListener, Input, OnChanges, SimpleChanges,
    ViewChild
} from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOMHelper } from '../../../core/helpers/dom.helper';

@Component({
    selector: 'cui-switcher',
    templateUrl: 'switcher.component.html',
    providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => SwitcherComponent),
        multi: true
    }]
})

export class SwitcherComponent implements ControlValueAccessor, OnChanges {

    @Input() disabled: boolean = false;
    @HostBinding() tabindex: number = 0;
    @Input() ngModel: any;
    @Input() labelLeft: string;
    @Input() labelRight: string;
    @ViewChild('checkbox') checkboxElement: ElementRef;
    @ViewChild('leverSpan') spanElement: ElementRef;
    @HostBinding('class.state') get addStateClass(): boolean {
        return !!this.labelRight;
    }
    @HostBinding('class.a-b-switcher') get addABClass(): boolean {
        return !!this.labelLeft || !!this.labelRight;
    }
    @HostBinding('class.cui-switcher') addClass: boolean = true;
    /**
     * Private variables and callbacks
     */
    // The internal data model
    private _value: any = null;
    // Placeholders for the callbacks
    private _onTouchedCallback: (_: any) => void = () => { };
    private _onChangeCallback: (_: any) => void = () => { };

    /**
     * Getter and setter for _value
     */
    get value(): any { return this._value; }

    // set accessor including call the onchange callback
    @Input() set value(v: any) {
        this._value = v;
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes['ngModel']) {
            this.value = changes['ngModel'].currentValue;
        }
        if (changes['disabled']) {
            this.tabindex = this.disabled ? -1 : 1;
        }
    }

    /**
     * Listener for changes on checkbox
     * @param checked
     */
    checkboxChange(checked: boolean) {
        this.value = checked;
        this._onChangeCallback(checked);
    }

    /**
     * Remove tabbed class when we leave the switcher.
     */
    @HostListener('blur')
    blur(): void {
        this._onTouchedCallback(true);
    }

    @HostListener('click', ['$event'])
    click(event): void {
        if (!this.disabled) {
            this.checkboxElement.nativeElement.click();
        }
        if ((event.target && (event.target === this.spanElement.nativeElement))
            || (DOMHelper.closestParent(this.checkboxElement.nativeElement, 'cui-tactile-block'))
            || (DOMHelper.closestParent(this.checkboxElement.nativeElement, 'cui-block-tree'))) {
            event.stopPropagation();
        }
    }

    @HostListener('keydown.space', ['$event'])
    onSpaceDown(event: KeyboardEvent): void {
        event.preventDefault();
        this.click(event);
        event.stopPropagation();
    }

    @HostListener('keydown.enter', ['$event'])
    onEnterDown(event: KeyboardEvent): void {
        this.click(event);
        event.stopPropagation();
    }

    /**
     * Implementation for ControlValueAccessor
     */
    writeValue(obj: any): void {
        this._value = obj;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnChange(fn: any): void {
        this._onChangeCallback = fn;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnTouched(fn: any): void {
        this._onTouchedCallback = fn;

    }
}
