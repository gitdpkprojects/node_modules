/* tslint:disable:directive-selector */

import { AfterViewInit, Directive, ElementRef, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';

@Directive({
    selector: '[required]'
})
export class RequiredDirective implements OnChanges, AfterViewInit {
    id: string;
    label: Element;
    @Input() required: any;
    private _isSet: boolean = false;
    private _id: string;

    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {
    }

    /**
     * Adds asterisk to nearest label or .field-header if form element is required
     * Removes the asterisk if it's no longer required
     */
    ngOnChanges(changes: SimpleChanges): void {
        const required = changes['required'].currentValue;
        if (required !== undefined && (required.toString().length === 0 || required.toString() === 'true')) {
            this.setRequired();
        } else if (this._isSet) {
            this.unsetRequired();
        }
    }

    ngAfterViewInit(): void {
        if (this.required !== undefined && (this.required.toString().length === 0 || this.required.toString() === 'true')) {
            this.setRequired();
        } else {
            this.unsetRequired();
        }
    }

    setRequired(): void {
        // The element ref is not avaiable yet.
        if (typeof(this._elementRef) === 'undefined') {
            return;
        }
        const element = this._elementRef.nativeElement;
        this.id = element.getAttribute('id');
        // If id isn't available yet, or if it's already set and doesn't dif.
        if (this.id === null || (this._isSet && this._id === this.id)) {
            return;
        }
        // Adds asterisk to nearest label or .field-header if form element is required
        if (this.id !== null) {
            this.label = document.querySelector(`label[for='${this.id}']`);
            this._id = this.id;
            this._isSet = true;
        }
        if (this.label) {
            this._renderer.addClass(this.label, 'required');
        } else {
            const closest_element = element.previousElementSibling;
            if (closest_element && (closest_element.tagName === 'LABEL' ||
                closest_element.classList.contains('field-header'))) {
                this._renderer.addClass(closest_element, 'required');
            }
        }
    }

    unsetRequired(): void {
        this._isSet = false;
        const element = this._elementRef.nativeElement;
        this.id = element.getAttribute('id');
        // Remove required asterisk if element is no longer required
        if (this.id) {
            this.label = document.querySelector(`label[for='${this.id}'].required`);
        }
        if (this.id && this.label) {
            this._renderer.removeClass(this.label, 'required');
        } else {
            const closest_element = element.previousElementSibling;
            if (closest_element && (closest_element.tagName === 'LABEL' ||
                closest_element.classList.contains('field-header'))) {
                this._renderer.removeClass(closest_element, 'required');
            }
        }

    }
}
