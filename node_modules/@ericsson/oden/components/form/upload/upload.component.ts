import {
    Component,
    ElementRef,
    forwardRef,
    HostBinding,
    HostListener,
    Input,
    OnChanges,
    Renderer2,
    ViewEncapsulation
} from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import { UUID } from '../../../core/helpers/uuid.class';

@Component({
    selector: 'cui-upload',
    templateUrl: 'upload.component.html',
    styleUrls: ['upload.component.scss'],
    encapsulation: ViewEncapsulation.None,
    providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => UploadComponent),
        multi: true
    }],
})

export class UploadComponent implements ControlValueAccessor, OnChanges {
    @HostBinding('class.cui-upload') addClass: boolean = true;

    @Input() label: string;
    @Input() file_id: string;
    @Input() multiple: boolean = false;
    @Input() accept: Array<string> = ['*'];
    @Input() required: boolean = false;
    filenames: string;
    uniqueId: string = 'upload-' + UUID.create();

    /**
     * Private variables and callbacks
     */
        // The internal data model
    private _value: any = null;
    // Placeholders for the callbacks
    private _onTouchedCallback: (_: any) => void = () => {};
    private _onChangeCallback: (_: any) => void = () => {};

    /**
     * Getter and setter for _value
     */
    get value(): any { return this._value; }

    // set accessor including call the onchange callback
    set value(v: any) {
        if (v !== this._value) {
            this._value = v;
            this._onChangeCallback(v);
        }
    }

    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {
    }

    /**
     * If user has defined their own file_id (or has native id), use that for our elements instead
     */
    ngOnChanges(): void {
        if (this.file_id) {
            this.uniqueId = this.file_id;
        }
   }

    /**
     * Whenever the user selects file(s) and presses Ok in their browser dialog this change event triggers.
     * We store the files in a FormData object that we set as the value for the component.
     * We store the file names in a `filenames` string that we output in a readonly input field.
     * @param event
     */
    @HostListener('change', ['$event'])
    change(event): void {
        const fileNames = [];
        [].map.call(event.target.files, function (f: File) {
            fileNames.push(f.name);
        });
        this._renderer.addClass(this._elementRef.nativeElement, 'ng-untouched');
        this._renderer.addClass(this._elementRef.nativeElement, 'ng-touched');
        if (fileNames.length > 0) {
            this.filenames = fileNames.join(', ');
            this.value = event.target.files ;
        } else {
            this.filenames = null;
            this.value = null;
        }
    }

    /**
     * Implementation for ControlValueAccessor
     */
    writeValue(obj: any): void {
        this.value = obj;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnChange(fn: any): void {
        this._onChangeCallback = fn;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnTouched(fn: any): void {
        this._onTouchedCallback = fn;

    }

}
