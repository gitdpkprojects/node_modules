/* tslint:disable:directive-selector-name */
import {
    Directive, ElementRef, HostListener, HostBinding, Renderer2
}
    from '@angular/core';
import { KEYBOARD } from '../../../core/constants/keyboard.constants';

@Directive({
    selector: '[cui-radio]'
})
export class RadioDirective {
    @HostBinding('class.cui-radio') addClass: boolean = true;
    @HostBinding('tabindex') tabIndex: number;
    constructor(private _element: ElementRef, private _renderer: Renderer2) {
    }

    @HostListener('document:keyup', ['$event'])
    handleKeyboardEvent(kbdEvent: KeyboardEvent): void {
        if ([KEYBOARD.TAB, KEYBOARD.DOWN_ARROW, KEYBOARD.UP_ARROW].indexOf(kbdEvent.which) > -1) {
            this._renderer.addClass(this._element.nativeElement, 'tabbed');
        }
    }

    @HostListener('blur')
    blur(): void {
        this._renderer.removeClass(this._element.nativeElement, 'tabbed');
    }

    @HostListener('click')
    click(): void {
        this._renderer.removeClass(this._element.nativeElement, 'tabbed');

        // Is there an cui-input or combo box inside this radio's label? Focus that one.
        const id: string = this._element.nativeElement.id;
        if (id) {
            const label = <HTMLLabelElement> document.querySelector(`label[for='${id}']`);
            if (label) {
                const radio_input = <HTMLInputElement> label.querySelector('[cui-input], .cui-select, .cui-dynamic-select');
                if (radio_input) {
                    radio_input.focus();
                }
            }
        }
    }

}
