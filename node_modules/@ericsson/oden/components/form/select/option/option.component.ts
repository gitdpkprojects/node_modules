import {
    AfterViewInit,
    Component,
    ElementRef,
    EventEmitter,
    HostBinding,
    HostListener,
    Input,
    Output,
    ViewChild,
    ViewEncapsulation
} from '@angular/core';
import { SelectService } from '../select.service';
import { MOUSE_BUTTON } from '../../../../core/constants/mouse-button.constant';
import { UUID } from '../../../../core/helpers/uuid.class';
import * as _ from 'lodash';

@Component({
    selector: 'cui-option',
    templateUrl: 'option.component.html',
    styleUrls: ['option.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class OptionComponent implements AfterViewInit {
    @Input() selected?: boolean = false;
    @Input() deletable?: boolean = false;
    /** @Depricated - Multiple is a setting on the main component DynamicSelect and Select */
    @Input() multiple?: boolean = false;
    @Input() dynamic: boolean = false;
    @Input() selectAll: boolean = false;
    @Input() indeterminate: boolean = false;
    @Input() set ngValue(v: any) {
        // transform value into optionItem if the value is a string
        if (!this.selectAll && v !== null && typeof(v) === 'object') {
            if (v.selected === undefined) {
                v.selected = false;
            }
            if (v.id === undefined) {
                v.id = 'option-' + UUID.create();
            }
        }
        this.data = _.cloneDeep(v);
    }
    @Output() onDeleteItem: EventEmitter<OptionComponent> = new EventEmitter<OptionComponent>();
    @Output() onSelectItem: EventEmitter<OptionComponent> = new EventEmitter<OptionComponent>();
    active: boolean = false;
    data: any = {};
    @ViewChild('content') content: ElementRef;
    displayValue: string;

    @HostBinding('class.disabled') @Input() disabled: boolean = false;
    @HostBinding('class.cui-option') addClass: boolean = true;
    get id(): string {
        return typeof(this.data) === 'object' && this.data && this.data.id ? this.data.id : 'option-' + UUID.create();
    }

    constructor(public _selectService: SelectService) {}

    ngAfterViewInit(): void {
        this.active = false;
        this.displayValue = this.content.nativeElement.innerText;
    }

    /**
     * Sets/unsets active class
     */
    @HostListener('mousedown', ['$event'])
    setActiveClass(event: MouseEvent): void {
        if (event.button === MOUSE_BUTTON.LEFT && !(<HTMLElement>event.target).classList.contains('cui-icon') && !this.disabled) {
            this.active = true;
        }
    }

    /**
     * Sends this instance to the hosting select component
     */
    @HostListener('click', ['$event'])
    selectOption(event: MouseEvent): void {
        if (event.button === MOUSE_BUTTON.LEFT && !(<HTMLElement>event.target).classList.contains('cui-icon') && !this.disabled) {
            const selectComponent = this._selectService.origin;
            this.displayValue = this.content.nativeElement.innerText;
            if (this.selectAll) {
                this._selectService.toggleSelectAll();
            } else {
                this.onSelectItem.emit(this);
                this._selectService.setOption(this);
            }

            // Sets focus on select component in order to make it work with the KeyboardAccessibility keydown listeners
            if (selectComponent) {
                selectComponent.focus();
            }
        }
    }

    /**
     * Unset the active class.
     */
    @HostListener('mouseup')
    mouseUp(): void {
        this.active = false;
    }

    /**
     * Sends the delete item to the onDeleteItem callback
     */
    onDelete(): void {
        this.onDeleteItem.emit(this);
    }
}
