/* tslint:disable:directive-selector-prefix */
/* tslint:disable:directive-selector */

import { Attribute, Directive, ElementRef, forwardRef, Input } from '@angular/core';
import { AbstractControl, NG_VALIDATORS, Validator } from '@angular/forms';
import { DateHelper } from '../../../core/helpers/date.helper';
import * as moment from 'moment';
import { DATE_FORMAT } from '../../../core/constants/date.constants';

const momentInstance = (typeof moment === 'object') ? (<any>moment).default : moment;

/**
 * Validator for date input.
 */
@Directive({
    selector: 'cui-date-input',
    providers: [
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => DateValidatorDirective), multi: true }
    ]
})
export class DateValidatorDirective implements Validator {
    @Input() fromDate: Date;
    @Input() toDate: Date;

    constructor(@Attribute('dateValidator') public dateValidator: string, private _element: ElementRef) {}

    validate(c: AbstractControl): { [key: string]: any } {
        // Use value from input field unless c.value exists (it's a Date object)
        const inputValue = c.value ? momentInstance(c.value).format(DATE_FORMAT.YEAR_MONTH_DAY) : (this._element.nativeElement &&
            this._element.nativeElement.querySelector('.cui-input') ?
            this._element.nativeElement.querySelector('.cui-input').value : '');
        let isValid = DateHelper.isValidDate(inputValue);
        let outOfRange = false;
        const fieldIsRequired = this._element.nativeElement &&
            this._element.nativeElement.hasAttribute('required') &&
            this._element.nativeElement.getAttribute('required') !== 'false';
        if (isValid) {
            const date = momentInstance(c.value, DATE_FORMAT.YEAR_MONTH_DAY).toDate();
            if (this.fromDate && date < this.fromDate &&
                momentInstance(c.value).format(DATE_FORMAT.YEAR_MONTH_DAY) !==
                    momentInstance(this.fromDate).format(DATE_FORMAT.YEAR_MONTH_DAY)) {
                isValid = false;
                outOfRange = true;
            } else if (this.toDate && date > this.toDate &&
                momentInstance(c.value).format(DATE_FORMAT.YEAR_MONTH_DAY) !==
                    momentInstance(this.toDate).format(DATE_FORMAT.YEAR_MONTH_DAY)) {
                isValid = false;
                outOfRange = true;
            }
        }

        // all ok? then pass!
        if ((c.value && isValid) || (!fieldIsRequired && inputValue === '')) {
            return null;
        }

        // If not valid above, let's return our error object
        return {
            type: {
                required: fieldIsRequired && inputValue === '',
                outOfRange: outOfRange,
                invalid: inputValue !== '' && !isValid && !outOfRange
            }
        };
    }
}
