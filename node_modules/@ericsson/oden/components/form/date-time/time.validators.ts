/* tslint:disable:directive-selector-prefix */
/* tslint:disable:directive-selector */

import { Attribute, Directive, ElementRef, forwardRef, Input } from '@angular/core';
import { AbstractControl, NG_VALIDATORS, Validator } from '@angular/forms';
import { DateHelper } from '../../../core/helpers/date.helper';
import * as moment from 'moment';

const momentInstance = (typeof moment === 'object') ? (<any>moment).default : moment;

/**
 * Validator for time input.
 */
@Directive({
    selector: 'cui-time-input',
    providers: [
        { provide: NG_VALIDATORS, useExisting: forwardRef(() => TimeValidatorDirective), multi: true }
    ]
})

export class TimeValidatorDirective implements Validator {
    @Input() seconds: boolean = false;
    @Input() fromDate: Date;
    @Input() toDate: Date;

    constructor(@Attribute('timeValidator') public timeValidator: string, private _element: ElementRef) {}

    /**
     * To validate time field
     * Returns null (no error) if time is valid (or field is empty and not required)
     * @param c AbstractControl
     * @returns any
     */
    validate(c: AbstractControl): { [key: string]: any } {
        const useSeconds = this.seconds;

        // Returns null (no error) if time is valid (or field is empty and not required)
        const inputValue = this._element.nativeElement &&
        this._element.nativeElement.querySelector('.cui-input') ?
            this._element.nativeElement.querySelector('.cui-input').value : '';
        let isValid = DateHelper.isValidTime(c.value, useSeconds);
        let outOfRange = false;
        const fieldIsRequired = this._element.nativeElement &&
            this._element.nativeElement.hasAttribute('required') &&
            this._element.nativeElement.getAttribute('required') !== 'false';
        if (isValid) {
            const time = momentInstance(c.value, 'HH:mm:ss').toDate();
            if (this.fromDate && (time.getHours() < this.fromDate.getHours() ||
                    (time.getHours() === this.fromDate.getHours() && time.getMinutes() < this.fromDate.getMinutes()))
                ) {
                isValid = false;
                outOfRange = true;
            } else if (this.toDate && (time.getHours() > this.toDate.getHours() ||
                    (time.getHours() === this.toDate.getHours() && time.getMinutes() > this.toDate.getMinutes()))
                ) {
                isValid = false;
                outOfRange = true;
            }
        }

        // all ok? then pass!
        if ((c.value && isValid) || (!fieldIsRequired && inputValue === '')) {
            return null;
        }

        // If not valid above, let's return our error object
        return {
            type: {
                required: fieldIsRequired && inputValue === '',
                outOfRange: outOfRange,
                invalid: inputValue !== '' && !isValid && !outOfRange
            }
        };
    }
}
