import { EventEmitter, Injectable } from '@angular/core';
import { Subject, Observable } from 'rxjs';
import * as moment from 'moment';
const momentInstance = (typeof moment === 'object') ? (<any>moment).default : moment;

@Injectable()
export class DateTimeService {
    public date$: Observable<Date>;
    public time$: Observable<string>;
    public calendarDate$: Observable<moment.Moment>;

    private _dateSubject: Subject<Date>;
    private _calendarDateSubject: Subject<moment.Moment>;
    private _timeSubject: Subject<string>;

    private _date: Date;
    private _time: string;
    private _calendarDate: moment.Moment = momentInstance();

    pickerOpened: EventEmitter<null> = new EventEmitter<null>();

    constructor() {
        this._dateSubject = new Subject<Date>();
        this._calendarDateSubject = new Subject<moment.Moment>();
        this._timeSubject = new Subject<string>();
        this.date$ = this._dateSubject.asObservable();
        this.time$ = this._timeSubject.asObservable();
        this.calendarDate$ = this._calendarDateSubject.asObservable();
    }

    /**
     * Getter and setter for Date, emits new date to addons
     * @param date
     */
    set date(date: Date) {
        this._date = date;
        this._dateSubject.next(this._date);
    }

    get date(): Date {
        return this._date;
    }

    /**
     * Getter and setter for changing the time. Emits new time to addons
     * @param time
     */
    set time(time: string) {
        this._time = time;
        this._timeSubject.next(this._time);
    }

    get time(): string {
        return this._time;
    }

    /**
     * Getter and setter for changing the date in the Date calendar. Emits new date to addons
     * @param date
     */
    set calendarDate(date: moment.Moment) {
        this._calendarDate = date;
        this._calendarDateSubject.next(this._calendarDate);
    }

    get calendarDate(): moment.Moment {
        return this._calendarDate;
    }

    openPicker(): void {
        this.pickerOpened.emit();
    }

}
