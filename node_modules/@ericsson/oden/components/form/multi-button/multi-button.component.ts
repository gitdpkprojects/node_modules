import {
    AfterViewInit, Component, ComponentRef, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, Output, Renderer2,
    ViewChild,
    ViewEncapsulation
} from '@angular/core';
import { OverlayHelperService } from '../../overlay/overlay-helper.service';
import { BackdropComponent } from '../../backdrop/backdrop.component';
import { ActionItem } from '../../../core/models/action-item.model';
import { Divider } from '../../../core/models/divider.model';
import { IOverlayable } from '../../overlay/overlayable.interface';
import { DOMHelper } from '../../../core/helpers/dom.helper';
import { KeyboardAccessibility } from '../../../core/classes/keyboard-accessibility';
import { OVERLAY_CONTEXT } from '../../overlay/overlay.constants';
import { BackdropService } from '../../backdrop/backdrop.service';

@Component({
    selector: 'cui-multi-button',
    templateUrl: 'multi-button.component.html',
    styleUrls: ['multi-button.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class MultiButtonComponent extends KeyboardAccessibility implements OnDestroy, AfterViewInit, IOverlayable {
    renderer: Renderer2;
    public elementRef: ElementRef;
    public overlayHelperService: OverlayHelperService;
    openedInOverlay: boolean = false;
    backdrop: ComponentRef<BackdropComponent>;
    globalListener: Function;
    visible: boolean = false;
    selectableQuerySelector = 'li';
    @Input() actions: Array<ActionItem | Divider> = [];
    @Input() title: string = '';
    @Input() width: string;
    @HostBinding('tabindex') tabIndex: number = 0;
    @HostBinding('class.cui-multi-button') addClass: boolean = true;
    @HostBinding('class.disabled') @Input() disabled: boolean = false;
    @Output() onActionClick: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    @ViewChild('dropdownContent') overlayElement: ElementRef;

    divider = Divider;
    actionItem = ActionItem;

    constructor(renderer: Renderer2, elementRef: ElementRef, overlayHelperService: OverlayHelperService,
                private _backdropService: BackdropService) {
        super(renderer, elementRef);
        this.elementRef = elementRef;
        this.overlayHelperService = overlayHelperService;
    }

    ngOnDestroy(): void {
        this.removeFromOverlay();
    }

    /**
     * Removes the overlay if it's opened and if it exists.
     */
    removeFromOverlay(): void {
        if (this.overlayElement && this.openedInOverlay) {
            this.overlayHelperService.removeFromOverlay(this);
        }
        this.deleteBackdrop();
    }

    /**
     * Sets the component in the overlay
     */
    openInOverlay(): void {
        this.overlayHelperService.appendToOverlay(this, OVERLAY_CONTEXT.ROOT);
    }

    /**
     * When we click outside the component in the overlay, remove it and restore styling.
     */
    onBlur(): void {
        this.overlayElement.nativeElement.style.bottom = 'auto';
        this.overlayElement.nativeElement.style.right = 'auto';
        this.removeFromOverlay();
    }

    /**
     * Overrides KeyboardAccessibility
     * @returns {boolean}
     */
    canNavigate(): boolean {
        return this.visible;
    }

    /**
     * Overrides KeyboardAccessibility
     * @returns {ElementRef}
     */
    getSelectableItemContainer(): ElementRef {
        return this.overlayElement;
    }

    /**
     * Overrides KeyboardAccessibility
     */
    openContextMenu(): void {
        this.openDropdown();
    }

    /**
     * Overrides KeyboardAccessibility
     */
    closeContextMenu(): void {
        this.closeDropdown();
    }

    /**
     * Action dispatcher for onActionClick
     * @param actionItem
     */
    actionClick(actionItem: ActionItem): void {
        if (!actionItem.disabled) {
            this.onActionClick.emit(actionItem);
            this.closeDropdown();
        }
    }

    /**
     * OnInit implementation
     */
    ngAfterViewInit(): void {
        super.ngAfterViewInit();

        // Figure out the longest string (placeholder included) and set the .cui-multi-button width equal to it
        // (unless a static width has been set)
        let buttonWidth: string;
        if (this.width) {
            buttonWidth = this.width.indexOf('%') > 0 ? this.width : parseInt(this.width, 10) + 'px';
        } else {
            const tempCanvas = document.createElement('canvas');
            let biggestLength: number = DOMHelper.getTextWidth(tempCanvas, this.title);
            this.actions.forEach((action) => {
                if (action instanceof ActionItem) {
                    const textwidth = DOMHelper.getTextWidth(tempCanvas, action.label);
                    biggestLength = textwidth > biggestLength ? textwidth : biggestLength;
                }
            });
            // (32px is the left+right padding on .cui-multi-button .multi-button-dropdown-content li > span)
            biggestLength = biggestLength > (100 - 32) ? biggestLength + 32 : 100;
            buttonWidth = biggestLength + 'px';
        }
        this.elementRef.nativeElement.style.width = buttonWidth;
    }

    /**
     * Toggles the visibility of the dropdown overlay
     */
    toggleDropdown(): void {
        // Small timeout to make sure we don't clash with the _setClickListener
        setTimeout(() => {
            if (this.disabled) {
                return;
            }
            if (!this.visible) {
                this.openDropdown();
            } else {
                this.closeDropdown();
            }
        });
    }

    closeDropdown(): void {
        this.visible = false;
        // If the dropdown never was opened, do not attempt to unbind
        if (typeof(this.globalListener) !== 'undefined') {
            this.globalListener();
        }
        this.contextMenuClosed();
        this.onBlur();
        this.deleteBackdrop();
    }

    openDropdown(): void {
        this.visible = true;
        this.contextMenuOpened();
        this._setClickListener();
        this.createBackdrop();
        this.openInOverlay();
    }

    /**
     * If we click anywhere we close the overlay
     */
    private _setClickListener(): void {
        this.globalListener = this.renderer.listen('document', 'click', (event) => {
            const clickInsideDropdown = DOMHelper.closestParent(event.target, 'multi-button-dropdown-content');
            if (this.visible && !clickInsideDropdown) {
                this.closeDropdown();
            }
        });
    }

    /**
     * Creates a backdrop unless there is one already
     */
    createBackdrop(): void {
        if (!this.backdrop) {
            this.backdrop = this._backdropService.create(false);
            this.backdrop.instance.onClose.subscribe(() => this.closeDropdown());
        }
    }

    /**
     * Deletes the backdrop if there is one
     */
    deleteBackdrop(): void {
        if (this.backdrop) {
            this.backdrop.instance.onClose.unsubscribe();
            this._backdropService.remove(this.backdrop);
            this.backdrop = null;
        }
    }

}
