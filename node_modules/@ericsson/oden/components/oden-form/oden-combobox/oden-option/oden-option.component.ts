import {
    AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostBinding, HostListener, Inject,
    Input, OnChanges, OnInit, Optional, SimpleChanges, ViewChild, ViewEncapsulation, ChangeDetectorRef
} from '@angular/core';
import { UUID } from '../../../../core/helpers/uuid.class';
import { OdenComboboxComponent } from '../oden-combobox.component';

@Component({
    selector: 'oden-option',
    templateUrl: 'oden-option.component.html',
    styleUrls: ['oden-option.component.scss'],
    encapsulation: ViewEncapsulation.None,
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class OdenOptionComponent implements OnInit, AfterViewInit, OnChanges {
    public _label: string;
    public _uuid: string = UUID.create();
    public _multiple: boolean = false;
    public _hasFocus: boolean = false;
    @HostBinding('class.oden-option') _hasOdenOptionClass: boolean = true;
    @HostBinding('class.single') _hasSingleClass: boolean = false;
    @HostBinding('tabindex') _tabindex: number = -1;
    @HostBinding('class.selected') selected: boolean = false;
    @HostBinding('class.disabled') _disabled: boolean = false;
    @HostBinding('class.oden-option') addClass: boolean = true;
    @HostListener('click', ['$event']) click(event: Event): void {
        if (this._disabled) {
            event.stopPropagation();
        }
        this._toggleSelected();
        this._elementRef.nativeElement.focus();
    }
    @HostListener('focus') focus(): void {
        this._hasFocus = true;
    }
    @HostListener('blur') blur(): void {
        this._hasFocus = false;
    }
    @ViewChild('multiContent') _multiContent: ElementRef;
    @ViewChild('singleContent') _singleContent: ElementRef;
    @Input() value: any;
    @Input() label: string = '';
    @Input() set disabled(disabled: boolean) {
        if (this._disabled !== disabled) {
            this._disabled = disabled;
            this._toggleTabindex();
        }
    }

    constructor (
        @Optional() @Inject(forwardRef(() => OdenComboboxComponent)) private _parent: OdenComboboxComponent,
        private _changeDetectorRef: ChangeDetectorRef,
        private _elementRef: ElementRef
    ) { }

    ngOnInit(): void {
        if (this._parent) {
            this._multiple = this._parent._multiple;
            this._hasSingleClass = !this._multiple;
            this._parent._onMultipleChanged.subscribe((multiple: boolean) => {
                this._multiple = multiple;
                this._hasSingleClass = !this._multiple;
                this._changeDetectorRef.detectChanges();
            });
            this.selected = this._parent._isOptionValueInSelectValue(this);
        }
    }

    ngAfterViewInit(): void {
        this._setLabel();
    }

    ngOnChanges(simpleChanges: SimpleChanges): void {
        if (simpleChanges['label']) {
            this._setLabel();
            this._changeDetectorRef.detectChanges();
        }
    }

    private _setLabel(): void {
        if (!!this.label) {
            this._label = this.label;
        } else if (!!this._multiContent) {
            this._label = this._multiContent.nativeElement.innerText;
        } else if (!!this._singleContent) {
            this._label = this._singleContent.nativeElement.innerText;
        }
        this._changeDetectorRef.detectChanges();
        if (this.selected && this._parent) {
            this._parent._queSetDisplayValue();
        }
    }

    public _toggleTabindex(forceFalse: boolean = false): void {
        this._tabindex = !forceFalse && !this._disabled ? 0 : -1;
    }

    public _setFocus(): void {
       this._elementRef.nativeElement.focus();
    }

    public _toggleSelected(shouldEmitChange: boolean = true): void {
        if (this._disabled || !this._multiple && this.selected) {
            return;
        }
        this.selected = !this.selected;
        if (this._parent) {
            this._parent._optionChanged(this, shouldEmitChange);
        }
        this._changeDetectorRef.detectChanges();
    }
}
