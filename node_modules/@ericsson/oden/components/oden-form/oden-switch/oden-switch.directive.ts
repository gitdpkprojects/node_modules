import {
    Directive, HostBinding, EventEmitter, Output, AfterViewInit, Input, Optional,
    Self, ElementRef, ChangeDetectorRef, OnChanges, SimpleChanges, OnInit
 } from '@angular/core';
import { OdenSelectionInputBaseDirective } from '../oden-form-base-classes/oden-selection-input-base-directive';
import { INPUT_TYPE, OdenFormService } from '../../../core/services/oden-form.service';
import { NgControl } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';

@Directive({
    selector: '[oden-switch]'
})
export class OdenSwitchDirective extends OdenSelectionInputBaseDirective implements OnInit, AfterViewInit, OnChanges {
    private _on: string = '';
    private _off: string = '';
    @HostBinding('class.oden-switch') _hasOdenSwitchClass: boolean = true;
    @Input() on: string = '';
    @Input() off: string = '';
    @Output() checkedChange = new EventEmitter<boolean>();

    constructor(
        @Optional() @Self() protected _ngControl: NgControl,
        protected _elementRef: ElementRef,
        protected _changeDetectorRef: ChangeDetectorRef,
        public _formService: OdenFormService,
        public _translate: TranslateService
    ) {
        super(_ngControl, _elementRef, _changeDetectorRef, _formService);
    }

    ngOnInit() {
        this._subscriptions.push(this._translate.stream('ODEN.COMPONENTS.ODEN_FORM.ON').subscribe((text) => {
            this._on = text;
            this._setOnOffText();
        }));
        this._subscriptions.push(this._translate.stream('ODEN.COMPONENTS.ODEN_FORM.OFF').subscribe((text) => {
            this._off = text;
            this._setOnOffText();
        }));
    }

    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._formService._inputType.next(INPUT_TYPE.SWITCH);
    }

    ngOnChanges(simpleChanges: SimpleChanges): void {
        super.ngOnChanges(simpleChanges);
        if (simpleChanges['on'] || simpleChanges['off']) {
            this._setOnOffText();
        }
    }

    protected _setOnOffText() {
        this._formService._switchOnText.next(this.on ? this.on : this._on);
        this._formService._switchOffText.next(this.off ? this.off : this._off);
    }

    protected _onControlValueChange() {
        this._formService.setInputValue(!this._ngControl.control.value);
        this._ngControl.control.setValue(!this._ngControl.control.value);
    }

    protected _onValueChange() {
        this._formService.setInputValue(!this.checked);
        this.checkedChange.emit(!this.checked);
    }
}
