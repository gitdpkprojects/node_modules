import {
    Self, ElementRef, SimpleChanges, OnDestroy, OnChanges, Optional, HostBinding,
    Output, Input, EventEmitter, HostListener, ChangeDetectorRef, AfterViewInit, Directive
} from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subscription, Observable } from 'rxjs';
import { OdenFormService } from '../../../core/services/oden-form.service';
import { UUID } from '../../../core/helpers/uuid.class';

@Directive({
    selector: '[oden-text-input-base-directive]'
})
export class OdenTextInputBaseDirective implements AfterViewInit, OnChanges, OnDestroy {
    protected _subscriptions: Subscription[] = [];
    protected _shouldPreventSetFocus: boolean = false; // Used to prevent circular calling
    @HostBinding('class.next-to-radio') _isNextToRadio: boolean = false;
    @HostBinding('class.has-value') _hasValue: boolean = false;
    @HostBinding('attr.id') @Input() id: string;
    @HostBinding('attr.maxLength') @Input() maxLength: number;
    @HostBinding('attr.value') @Input() value: string;
    // Focus will be called twice when _onFocus is pushed and therefor we check if it was called from service
    @HostListener('focus') focus(): void {
        if (this._shouldPreventSetFocus) {
            this._shouldPreventSetFocus = false;
        } else {
            this._formService.setFocus();
        }
    }
    // Reset focus state
    @HostListener('blur') blur(): void {
        if (!!this._ngControl) {
            this._onStatusChange();
            this._onControlChange();
        }
        this._shouldPreventSetFocus = false;
        this._formService._childHasFocus.next(false);
    }
    // Stop label from getting click event
    @HostListener('click', ['$event']) click(event: MouseEvent): void {
        if (this._stopClickPropagation) {
            event.stopPropagation();
        }
    }
    @Input() _stopClickPropagation: boolean = true;
    @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();

    constructor(
        @Optional() @Self() protected _ngControl: NgControl,
        protected _elementRef: ElementRef,
        protected _formService: OdenFormService,
        protected _changeDetectorRef: ChangeDetectorRef
    ) { }

    ngAfterViewInit(): void {
        if (!this.id) {
            this.id = UUID.create();
        }
        this._subscriptions.push(this._formService._isChild.subscribe((isChild: boolean) => {
            this._isNextToRadio = isChild;
            this._changeDetectorRef.detectChanges();
        }));
        !!this._ngControl
            ? this._setupControlSettings()
            : this._setupValueSettings();
        this._formService.setMaxLength(this.maxLength);
        this._formService.setInputId(this.id);
        this._changeDetectorRef.detectChanges();
    }

    ngOnChanges(simpleChanges: SimpleChanges): void {
        if (simpleChanges['maxlength']) {
            this._formService.setMaxLength(this.maxLength);
        }
        if (simpleChanges['value']) {
            this._elementRef.nativeElement.value = typeof this.value === 'undefined' ? '' : this.value.toString();
            this._onValueChange();
        }
        if (simpleChanges['id']) {
            this._formService.setInputId(this.id);
        }
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach((subscrition) => subscrition.unsubscribe());
    }

    protected _setupControlSettings() {
        this._subscriptions.push(this._formService._onFocus.subscribe(() => this.onControlValueChange()));
        this._subscriptions.push(this._ngControl.statusChanges.subscribe(() => this._onStatusChange()));
        this._subscriptions.push(this._ngControl.valueChanges.subscribe(() => this._onControlChange()));
        this._onControlChange();
    }

    protected _setupValueSettings(): void {
        this._subscriptions.push(Observable.fromEvent(this._elementRef.nativeElement, 'input').subscribe(() =>
            this._onValueChange()));
        this._onValueChange();
    }

    protected _onStatusChange(): void {
        if (!!this._ngControl) {
            this._formService.setStatusChanged(this._ngControl.control);
        }
    }

    protected _onControlChange(): void {
        if (!!this._ngControl) {
            this._formService.setInputValue(this._ngControl.value);
            this._hasValue = this._ngControl.value && this._ngControl.value.length > 0;
        }
    }

    protected onControlValueChange(): void {
        this._shouldPreventSetFocus = true;
        this._elementRef.nativeElement.focus();
        this._changeDetectorRef.markForCheck();
    }

    protected _onValueChange(): void {
        this.value = this._elementRef.nativeElement.value;
        this.valueChange.emit(this.value);
        this._formService.setInputValue(this.value);
        this._hasValue = this.value.length > 0;
        this._changeDetectorRef.detectChanges();
    }
}

