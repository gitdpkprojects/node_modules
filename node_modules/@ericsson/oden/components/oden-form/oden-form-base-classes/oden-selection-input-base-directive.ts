import {
    ElementRef, OnChanges, OnDestroy, HostBinding, Input, SimpleChanges,
    EventEmitter, Output, Self, Optional, AfterViewInit, ChangeDetectorRef, Directive, HostListener
} from '@angular/core';
import { UUID } from '../../../core/helpers/uuid.class';
import { NgControl } from '@angular/forms';
import { OdenFormService, FocusType, FOCUS_SOURCE } from '../../../core/services/oden-form.service';
import { Subscription, Observable } from 'rxjs';

@Directive({
    selector: '[oden-selection-input-base-directive]'
})
export class OdenSelectionInputBaseDirective implements AfterViewInit, OnChanges, OnDestroy {
    protected _subscriptions: Subscription[] = [];
    protected _isParent: boolean = false;
    @HostBinding('attr.id') @Input() id: string;
    @HostBinding('checked') @Input() checked: boolean;
    @HostBinding('class.tabbed') _hasTabbedClass: boolean = false;
    @HostListener('focus') _focus() {
        this._hasTabbedClass = true;
    }
    @HostListener('click') _click() {
        this._hasTabbedClass = true;
    }
    @HostListener('blur') _blur() {
        this._hasTabbedClass = false;
    }
    @Output() checkedChange: EventEmitter<boolean> = new EventEmitter<boolean>();

    constructor(
        @Optional() @Self() protected _ngControl: NgControl,
        protected _elementRef: ElementRef,
        protected _changeDetectorRef: ChangeDetectorRef,
        public _formService: OdenFormService,
    ) { }

    ngAfterViewInit(): void {
        if (!this.id) {
            this.id = UUID.create();
        }
        !!this._ngControl
            ? this._setupControlSettings()
            : this._setupValueSettings();
        this._subscriptions.push(this._formService._isParent.subscribe((isParent: boolean) => {
            this._formService.setInputId(isParent ? '' : this.id);
            this._isParent = isParent;
        }));
        this._formService.setInputId(this.id);
        this._formService.setInputValue(this._elementRef.nativeElement.checked);
        this._changeDetectorRef.detectChanges();
    }

    ngOnChanges(simpleChanges: SimpleChanges): void {
        if (simpleChanges['id']) {
            this._formService.setInputId(this.id);
        }
        if (simpleChanges['checked']) {
            this._formService.setInputValue(this.checked);
        }
        this._changeDetectorRef.detectChanges();
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach((subscription) => subscription.unsubscribe());
    }

    protected _setupControlSettings(): void {
        this._subscriptions.push(this._formService._onFocus.subscribe((focus: FocusType) => {
            if (focus[0] !== FOCUS_SOURCE.CHILD || focus[0] === FOCUS_SOURCE.CHILD && (typeof this._ngControl.control.value === 'string' ||
                typeof this._ngControl.control.value === 'boolean' && !this._ngControl.control.value)) {
                this._onControlValueChange();
            }
        }));
        this._subscriptions.push(this._ngControl.statusChanges.subscribe(() => this._statusChange()));
        this._subscriptions.push(this._ngControl.valueChanges.subscribe(() => this._onControlChange()));
    }

    protected _setupValueSettings(): void {
        this._subscriptions.push(Observable.fromEvent(this._elementRef.nativeElement, 'change').subscribe(() =>
            this._onValueChange()));
        this._subscriptions.push(this._formService._onFocus.subscribe(() => !this.checked && this._onValueChange()));
    }

    protected _statusChange(): void {
        if (!!this._ngControl) {
            this._formService.setStatusChanged(this._ngControl.control);
        }
    }

    protected _onControlChange(): void {
        if (!!this._ngControl) {
            this._formService.setInputValue(this._ngControl.value);
        }
    }

    protected _onControlValueChange(): void {
        if (this._isParent) {
            throw new Error('_handleControlValueChange is not implemented');
        }
    }

    protected _onValueChange(): void {
        if (this._isParent) {
            throw new Error('_handleValueChange is not implemented');
        }
    }
}
