import { Directive, HostBinding, OnDestroy, HostListener, ElementRef, Input, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { OdenFormService, FocusType, INPUT_TYPE } from '../../../core/services/oden-form.service';

@Directive({
    selector: '[oden-label]'
})
export class OdenLabelDirective implements OnInit, OnDestroy {
    private _subscriptions: Subscription[] = [];
    private _focus?: FocusType;
    private _inputType: INPUT_TYPE;
    private _inputValue: boolean;
    @HostBinding('class.oden-label') _hasOdenLabelClass: boolean = true;
    @HostBinding('class.next-to-input') _isParent: boolean = false;
    @HostBinding('class.truncate') _hasTruncate: boolean = false;
    @HostBinding('class.highlight') _hasHighlight: boolean = false;
    @HostBinding('attr.for') _id: string;
    @HostListener('click', ['$event']) click(event: MouseEvent) {
        /**
         * If it has a parent then there is no attr.for active, so it wont trigger click on input
         * If target is element then the label (radio/checkbox styled element) was clicked and therefor should trigger
         * If it doesn't have focus then trigger
         */
        if (this._isParent && (event.target === this._elementRef.nativeElement || !!this._focus &&  !this._focus[1])) {
            this._formService.setFocus();
        }
    }
    @Input() labelPosition?: 'left' | 'right';
    @Input() _forceRemoveFor: boolean = false;

    constructor(private _elementRef: ElementRef, private _formService: OdenFormService) { }

    ngOnInit(): void {
        this._subscriptions.push(this._formService._inputType.subscribe((inputType: INPUT_TYPE) => {
            this._inputType = inputType;
            this._hasTruncate = inputType === INPUT_TYPE.SWITCH &&
                (this.labelPosition === 'left' || this.labelPosition === 'right');
            this._setHasHighlight();
        }));
        this._subscriptions.push(this._formService._inputValue.subscribe((inputValue: string | boolean) => {
            if (typeof inputValue === 'boolean') {
                this._inputValue = inputValue;
                this._setHasHighlight();
            }
        }));
        this._subscriptions.push(this._formService._onFocus.subscribe((focus: FocusType) => {
            this._focus = focus;
        }));
        this._subscriptions.push(this._formService._isParent.subscribe((isParent: boolean) => {
            this._isParent = isParent;
        }));
        this._subscriptions.push(this._formService._inputId.subscribe((inputId: string) => {
            this._id = this._forceRemoveFor ? '' : inputId;
        }));
        if (this._forceRemoveFor) {
            this._id = '';
        }
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach((subscrition) => subscrition.unsubscribe());
    }

    _setHasHighlight(): void {
        this._hasHighlight = this._inputType === INPUT_TYPE.SWITCH && (this.labelPosition === 'right' &&
            this._inputValue === true || this.labelPosition === 'left' && this._inputValue === false);
    }
}
