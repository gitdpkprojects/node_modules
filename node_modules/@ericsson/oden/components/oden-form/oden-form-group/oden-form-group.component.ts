import {
    Component, HostBinding, ViewEncapsulation, Input, ContentChild,
    OnDestroy, AfterViewInit, ContentChildren, QueryList
} from '@angular/core';
import { OdenRadioDirective } from '../oden-radio/oden-radio.directive';
import { Subscription } from 'rxjs';
import { OdenErrorComponent } from '../oden-error/oden-error.component';
import { OdenFormService } from '../../../core/services/oden-form.service';
import { OdenSwitchDirective } from '../oden-switch/oden-switch.directive';

@Component({
    selector: 'oden-form-group',
    templateUrl: 'oden-form-group.component.html',
    encapsulation: ViewEncapsulation.Emulated,
    providers: [OdenFormService]
})
export class OdenFormGroupComponent implements AfterViewInit, OnDestroy {
    private _subscriptions: Subscription[] = [];
    @HostBinding('class.oden-form-group') _hasOdenFormGroupClass: boolean = true;
    @HostBinding('class.tight-group') @Input() tightGroup: boolean = false;
    @HostBinding('class.ng-invalid') @Input() invalid: boolean = false;
    @HostBinding('class.oden-switch-group') _hasSwitchChild: boolean = false;
    @ContentChild(OdenRadioDirective) _radioChild: OdenRadioDirective;
    @ContentChild(OdenSwitchDirective) _switchChild: OdenSwitchDirective;
    @ContentChildren(OdenErrorComponent) _errorComponentsQueryList: QueryList<OdenErrorComponent>;

    constructor(private _formService: OdenFormService) { }

    ngAfterViewInit(): void {
        if (!!this._radioChild) {
            this._subscriptions.push(this._radioChild._formService._statusChanged.subscribe((control) => {
                this._formService.setStatusChanged(control);
            }));
        }
        this._subscriptions.push(this._formService._statusChanged.subscribe((control) => {
            this.invalid = control.invalid;
        }));
        this._hasSwitchChild = !!this._switchChild;
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach((subscrition) => subscrition.unsubscribe());
    }
}
