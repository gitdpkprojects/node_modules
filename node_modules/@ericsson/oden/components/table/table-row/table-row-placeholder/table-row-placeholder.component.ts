/* tslint:disable:component-selector */

import {
    Component, HostBinding, HostListener, Input, Output, ViewEncapsulation, EventEmitter,
    TemplateRef
} from '@angular/core';
import { ITableHeaderItem } from '../../../../core/interfaces/table-header.interface';
import { ITableRowData } from '../../../../core/interfaces/table-row-data.interface';
import { ALIGNMENT } from '../../../../core/constants/alignment.constants';

@Component({
    selector: '[cui-table-row-placeholder]',
    templateUrl: './table-row-placeholder.component.html',
    styleUrls: ['./table-row-placeholder.component.scss'],
    encapsulation: ViewEncapsulation.None,

})
export class TableRowPlaceholderComponent {
    @HostBinding('class.cui-table-row-placeholder') addClass: boolean = true;

    @Input() headers: Array<ITableHeaderItem> = [];
    @Input() hasBatchActions: boolean = false;
    @Input() hasSingleActions: boolean = false;
    @Input() placeholderRowTemplate: TemplateRef<any>;
    @Output() onNextRow: EventEmitter<null> = new EventEmitter<null>();

    data: ITableRowData = {edit: true};

    @HostListener('click', ['$event'])
    onClick(): void {
        this.onNextRow.emit();
    }

    /**
     * Gets alignment class corresponding current align value of header.
     *
     * @param item:ITableHeaderItem
     * @returns {string} - left, center or right
     */
    getAlignClass(item: ITableHeaderItem): string {
        if (item.align == null) {
            item.align = ALIGNMENT.LEFT;
        }
        if (item.align === ALIGNMENT.CENTER) {
            return 'align-center';
        } else if (item.align === ALIGNMENT.RIGHT) {
            return 'align-right';
        }

        return 'align-left';
    }
}
