// tslint:disable:component-selector
import {
    AfterContentInit,
    Component,
    ComponentFactoryResolver,
    EventEmitter,
    HostBinding,
    Input,
    OnChanges,
    Output,
    SimpleChanges,
    ViewChild,
    ViewContainerRef,
    ViewEncapsulation
} from '@angular/core';
import { TableEditEvent } from '../../../../core/models/table-field.event';
import { EDIT_TYPE } from '../../../../core/constants/edit-type.constants';
import { FIELD_TYPE } from '../../../../core/constants/field-type.constants';
import { StateBadgeComponent } from '../../../state-badge/state-badge.component';
import { TableCellDefaultComponent } from './table-cell-default/table-cell-default.component';
import { EntityVersion } from '../../../../core/models/entity-version.model';
import { TableCellVersionComponent } from './table-cell-version/table-cell-version.component';
import { ComponentType } from '../../../../core/interfaces/component-type.interface';
import { TableCellEditComponent } from './table-cell-edit/table-cell-edit.component';
import { TableCellEditDateComponent } from './table-cell-edit/table-cell-edit-date/table-cell-edit-date.component';
import { TableCellEditTimeComponent } from './table-cell-edit/table-cell-edit-time/table-cell-edit-time.component';
import { TableCellEditDateTimeComponent } from './table-cell-edit/table-cell-edit-date-time/table-cell-edit-date-time.component';
import { TableCellEditMultiSelectComponent } from './table-cell-edit/table-cell-edit-multi-select/table-cell-edit-multi-select.component';
import { TableCellEditTextComponent } from './table-cell-edit/table-cell-edit-text/table-cell-edit-text.component';
import { TableCellEditTextAreaComponent } from './table-cell-edit/table-cell-edit-text-area/table-cell-edit-text-area.component';
import { TableCellDateComponent } from './table-cell-date/table-cell-date.component';
import { TableCellButtonComponent } from './table-cell-button/table-cell-button.component';
import {
    TableCellEditDateTimePeriodComponent
} from './table-cell-edit/table-cell-edit-date-time-period/table-cell-edit-date-time-period.component';
import { TableCellCheckboxComponent } from './table-cell-checkbox/table-cell-checkbox.component';

@Component({
    selector: '[cui-table-cell]',
    templateUrl: 'table-cell.component.html',
    encapsulation: ViewEncapsulation.None
})

export class TableCellComponent implements AfterContentInit, OnChanges {
    @HostBinding('class.cui-table-cell') addClass: boolean = true;
    @Input() data: any;
    @Input() editData: any;
    @Input() field: string;
    @Input() editOptions: any;
    @Input() edit: boolean = false;
    @Input() fieldType: FIELD_TYPE = FIELD_TYPE.DEFAULT;
    @Input() editType: EDIT_TYPE;
    @Input() uuid: string;
    @Input() editError: string;
    @Input() editRequired: boolean;
    @Input() editDisabled: boolean;
    @Input() editPlaceholder: string = '';
    @Output() onFieldEvent: EventEmitter<TableEditEvent> = new EventEmitter<TableEditEvent>();

    @ViewChild('output', {read: ViewContainerRef}) output;
    private _componentRef;
    private _fieldType: FIELD_TYPE;

    constructor(private _componentFactoryResolver: ComponentFactoryResolver) {
    }

    ngAfterContentInit(): void {
        this.setOutputComponent();
    }

    setOutputComponent(): Promise<ComponentType<any>> {
        return new Promise((resolve) => {
            if (!!this._componentRef) {
                this.output.clear();
            }
            let factory;
            let editComponentType;
            this._fieldType = this.fieldType;

            if (this.edit && this.editType !== EDIT_TYPE.NONE) {
                switch (this.editType) {
                     case EDIT_TYPE.MULTISELECT:
                        editComponentType = TableCellEditMultiSelectComponent;
                        break;
                    case EDIT_TYPE.DATE:
                        editComponentType = TableCellEditDateComponent;
                        break;
                    case EDIT_TYPE.TIME:
                        editComponentType = TableCellEditTimeComponent;
                        break;
                    case EDIT_TYPE.DATETIME:
                        editComponentType = TableCellEditDateTimeComponent;
                        break;
                    case EDIT_TYPE.DATETIME_PERIOD:
                        editComponentType = TableCellEditDateTimePeriodComponent;
                        break;
                    case EDIT_TYPE.TEXT:
                        editComponentType = TableCellEditTextComponent;
                        break;
                    case EDIT_TYPE.TEXTAREA:
                        editComponentType = TableCellEditTextAreaComponent;
                        break;
                    default:
                        editComponentType = TableCellEditComponent;
                        break;
                }
                factory = this._componentFactoryResolver.resolveComponentFactory(editComponentType);
                this._componentRef = this.output.createComponent(factory);
                this._componentRef.instance.editData = this.editData;
                this._componentRef.instance.edit = this.edit;
                this._componentRef.instance.editType = this.editType;
                this._componentRef.instance.uuid = this.uuid;
                this._componentRef.instance.editError = this.editError;
                this._componentRef.instance.editRequired = this.editRequired;
                this._componentRef.instance.editOptions = this.editOptions;
                this._componentRef.instance.editDisabled = this.editDisabled;
                this._componentRef.instance.editPlaceholder = this.editPlaceholder;
                this._componentRef.instance.onFieldEvent = this.onFieldEvent;
                this._componentRef.instance.field = this.field;
            } else {
                switch (this.fieldType) {
                    case FIELD_TYPE.STATE:
                        factory = this._componentFactoryResolver.resolveComponentFactory(StateBadgeComponent);
                        this._componentRef = this.output.createComponent(factory);
                        const stateData = <EntityVersion>this.data;
                        this._componentRef.instance.state = stateData.state;
                        this._componentRef.instance.extra = stateData.extra;
                        this._componentRef.instance.tooltip = stateData.tooltip;
                        this._componentRef.instance.label = stateData.label;
                        this._componentRef.instance.color = stateData.color;
                        this._componentRef.instance.outlined = stateData.outlined;
                        this._componentRef.instance.semiTransparent = stateData.semiTransparent;
                        break;
                    case FIELD_TYPE.BUTTON:
                        factory = this._componentFactoryResolver.resolveComponentFactory(TableCellButtonComponent);
                        this._componentRef = this.output.createComponent(factory);
                        this._componentRef.instance.data = this.data;
                        this._componentRef.instance.onFieldEvent = this.onFieldEvent;
                        break;
                    case FIELD_TYPE.VERSION:
                        factory = this._componentFactoryResolver.resolveComponentFactory(TableCellVersionComponent);
                        this._componentRef = <TableCellVersionComponent>this.output.createComponent(factory);
                        const versionData = <EntityVersion>this.data;
                        this._componentRef.instance.label = versionData.label;
                        this._componentRef.instance.extra = versionData.extra;
                        this._componentRef.instance.tooltip = versionData.tooltip;
                        break;
                    case FIELD_TYPE.DATE:
                    case FIELD_TYPE.DATETIME:
                        factory = this._componentFactoryResolver.resolveComponentFactory(TableCellDateComponent);
                        this._componentRef = <TableCellDateComponent>this.output.createComponent(factory);
                        this._componentRef.instance.data = this.data;
                        this._componentRef.instance.type = this.fieldType;
                        break;
                    case FIELD_TYPE.CHECKBOX:
                        factory = this._componentFactoryResolver.resolveComponentFactory(TableCellCheckboxComponent);
                        this._componentRef = <TableCellCheckboxComponent>this.output.createComponent(factory);
                        this._componentRef.instance.data = this.data;
                        break;
                    default:
                        factory = this._componentFactoryResolver.resolveComponentFactory(TableCellDefaultComponent);
                        this._componentRef = this.output.createComponent(factory);
                        this._componentRef.instance.data = this.data;
                        break;
                }
            }
            resolve(this._componentRef);
            return;
        });
    }

    ngOnChanges(changes: SimpleChanges) {
        if (this._componentRef === undefined || this._componentRef === null) {
            return;
        }

        if (changes['edit'] && changes['edit'].currentValue !== changes['edit'].previousValue) {
            this.setOutputComponent();
            return;
        }

        if (changes['fieldType'] && changes['fieldType'].currentValue !== this._fieldType) {
            this.setOutputComponent();
            return;
        }

        if (changes['data']) {
            for (const currentValueKey in changes['data'].currentValue) {
                if (this._componentRef.instance.hasOwnProperty(currentValueKey)) {
                    this._componentRef.instance[currentValueKey] = changes['data'].currentValue[currentValueKey];
                }
            }
        }

        for (const key in changes) {
            if (this._componentRef.instance.hasOwnProperty(key) &&
                this._componentRef.instance[key] !== changes[key].currentValue) {
                this._componentRef.instance[key] = changes[key].currentValue;
            }
        }
    }

}
