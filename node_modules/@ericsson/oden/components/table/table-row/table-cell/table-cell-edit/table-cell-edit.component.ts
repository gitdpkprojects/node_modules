import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FIELD_EVENT_TYPE, TableEditEvent } from '../../../../../core/models/table-field.event';
import { EDIT_TYPE } from '../../../../../core/constants/edit-type.constants';
import { TABLE_CELL_EDIT } from './table-cell-edit.animations';

@Component({
    selector: 'cui-table-cell-edit',
    templateUrl: 'table-cell-edit.component.html',
    encapsulation: ViewEncapsulation.None,
    animations: [ TABLE_CELL_EDIT.ANIMATION ]
})

export class TableCellEditComponent {
    @Input() editData: any;
    @Input() editOptions: any;
    @Input() edit: boolean = false;
    @Input() field: string;
    @Input() editType: EDIT_TYPE;
    @Input() uuid: string;
    @Input() editError: string;
    @Input() editRequired: boolean;
    @Input() editDisabled: boolean;
    @Input() editPlaceholder: string = '';
    @Output() onFieldEvent: EventEmitter<TableEditEvent> = new EventEmitter<TableEditEvent>();

    editTypes = EDIT_TYPE;

    constructor() {
    }

    /**
     * Emits onFieldEvent event when a field is blurred
     * @param value
     * @param element
     */
    onBlur(value: any, element: Element) {
        this.onFieldEvent.emit(this._getEditEvent(FIELD_EVENT_TYPE.BLUR, element, value));
    }

    /**
     * Emits onFieldFocus event when a field is focused
     * @param value
     * @param element
     */
    onFocus(value: any, element: Element) {
        this.onFieldEvent.emit(this._getEditEvent(FIELD_EVENT_TYPE.FOCUS, element, value));
    }

    /**
     * Emits onFieldChange event when a field is changed
     * @param value
     * @param element
     */
    onChange(value: any, element: Element) {
        this.onFieldEvent.emit(this._getEditEvent(FIELD_EVENT_TYPE.CHANGE, element, value));
    }

    /**
     * Creates a TableEditEvent
     * @param eventType
     * @param element
     * @param value
     * @returns {TableEditEvent}
     * @private
     */
    private _getEditEvent(eventType: FIELD_EVENT_TYPE, element: Element, value: any): TableEditEvent {
        const editEvent = new TableEditEvent({
            element: element,
            eventType: eventType,
            value: value
        });
        return editEvent;
    }
}
