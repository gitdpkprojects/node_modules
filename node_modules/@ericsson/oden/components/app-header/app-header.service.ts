import { Observable, Subject } from 'rxjs';
import { EventEmitter } from '@angular/core';
import { AppHeaderActions } from '../../components/app-header';
import { ActionItem } from '../../core/models/action-item.model';
import { ITabs } from '../../core/interfaces/tabs.interface';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';

export class AppHeaderService {
    public actionButtons$: Observable<AppHeaderActions>;
    public onActionItemClicked$: Observable<ActionItem>;
    public onTitleChange$: EventEmitter<string> = new EventEmitter<string>();
    public onEntityAcronymChange$: EventEmitter<string> = new EventEmitter<string>();
    public onEntitySubTypeChange$: EventEmitter<string> = new EventEmitter<string>();
    public onEntityPlaceholderChange$: EventEmitter<string> = new EventEmitter<string>();
    public onTabsChange$: EventEmitter<ITabs> = new EventEmitter<ITabs>();
    public onStickyZIndexChange$: EventEmitter<number> = new EventEmitter<number>();

    private _actionButtonsSubject: Subject<AppHeaderActions>;
    private _actionItemSubject: Subject<ActionItem>;
    private _title: string;
    private _entityAcronym: string;
    private _entitySubType: string;
    private _entityPlaceholder: string;
    private _tabs: ITabs;

    public overrideSiteTitle = new BehaviorSubject<string>('');

    constructor() {
        this._actionButtonsSubject = new Subject<AppHeaderActions>();
        this.actionButtons$ = this._actionButtonsSubject.asObservable();
        this._actionItemSubject = new Subject<ActionItem>();
        this.onActionItemClicked$ = this._actionItemSubject.asObservable();
    }

    /**
     * Set Application title. Emits onTitleChange event
     * @param value
     */
    set title(value: string) {
        if (value !== this._title) {
            this.onTitleChange$.emit(value);
        }
        this._title = value;
    }

    /**
     * Get the current Application Title
     * @returns {string}
     */
    get title(): string {
        return this._title;
    }

    /**
     * Set Application entityAcronym. Emits onEntityAcronymChange$ event
     * @param value
     */
    set entityAcronym(value: string) {
        if (value !== this._entityAcronym) {
            this.onEntityAcronymChange$.emit(value);
        }
        this._entityAcronym = value;
    }

    /**
     * Get the current Application entityPlaceholder
     * @returns {string}
     */
    get entityPlaceholder(): string {
        return this._entityPlaceholder;
    }

    /**
     * Set Application entityPlaceholder. Emits onEntityPlaceholderChange$ event
     * @param value
     */
    set entityPlaceholder(value: string) {
        if (value !== this._entityPlaceholder) {
            this.onEntityPlaceholderChange$.emit(value);
        }
        this._entityPlaceholder = value;
    }

    /**
     * Get the current Application entityAcronym
     * @returns {string}
     */
    get entityAcronym(): string {
        return this._entityAcronym;
    }

    /**
     * Set Application entitySubType. Emits onEntitySubTypeChange$ event
     * @param value
     */
    set entitySubType(value: string) {
        if (value !== this._entitySubType) {
            this.onEntitySubTypeChange$.emit(value);
        }
        this._entitySubType = value;
    }

    /**
     * Get the current Application entitySubType
     * @returns {string}
     */
    get entitySubType(): string {
        return this._entitySubType;
    }

    /**
     * Set Application tabs. Emits onTabsChange event
     * @param value
     */
    set tabs(value: ITabs) {
        this.onTabsChange$.emit(value);
        this._tabs = value;
    }

    /**
     * Get the current Application Tabs
     * @returns {string}
     */
    get tabs(): ITabs {
        return this._tabs;
    }

    /**
     * Sets a new zIndex for the sticky component
     * @param zIndex
     */
    setStickyZIndex(zIndex: number): void {
        this.onStickyZIndexChange$.emit(zIndex);
    }

    /**
     * Sets the action buttons in view.
     * @param actionButtons
     */
    setActionButtons(actionButtons: AppHeaderActions): void {
        this._actionButtonsSubject.next(actionButtons);
    }

    /**
     * Removes action buttons from view
     */
    removeActionButtons(): void {
        this._actionButtonsSubject.next(null);
    }

    /**
     * Callback for action button clicked.
     * @param actionItem {ActionItem} - The action items that's been clicked.
     */
    actionItemClicked(actionItem: ActionItem): void {
        this._actionItemSubject.next(actionItem);
    }

}
