import {
    AfterViewInit,
    Component,
    ElementRef,
    EventEmitter,
    forwardRef,
    Host,
    HostBinding,
    Inject,
    Input, OnInit,
    Output,
    ViewEncapsulation
} from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { PanelsComponent } from '../../panels/panels.component';
import { ANIMATION } from '../../../core/constants';

@Component({
    selector: 'cui-panel-item',
    templateUrl: 'panel-item.component.html',
    styleUrls: ['panel-item.component.scss'],
    animations: [
        trigger('state', [
            state('*', style({
                height: '48px'
            })),
            state('active',   style({
                height: '*'
            })),
            transition('* => active', animate('100ms ' + ANIMATION.EASE_OUT_QUAD)),
            transition('active => *', animate('100ms ' + ANIMATION.EASE_OUT_QUAD))
        ])
    ],
    encapsulation: ViewEncapsulation.None
})

export class PanelItemComponent implements OnInit, AfterViewInit {
    @Input() title: string; // Depricated
    @Input() header: string;
    @Input() icon: string;
    @Input() iconTooltip: string;
    @Input() active: boolean = false;
    @Input() showLoader: boolean = false;

    @Output() onOpen: EventEmitter<PanelItemComponent> = new EventEmitter<PanelItemComponent>();
    @Output() onClose: EventEmitter<PanelItemComponent> = new EventEmitter<PanelItemComponent>();

    state: string = 'inactive';
    @HostBinding('class.cui-panel-item') addClass: boolean = true;
    @HostBinding('class.active') get activeClass() {
        return this.state === 'active';
    }

    constructor(@Host() @Inject(forwardRef(() => PanelsComponent))
                public panel: PanelsComponent, private _element: ElementRef) { }

    ngOnInit(): void {
        if (this.active) {
            // small timeout so the onOpen will work properly
            setTimeout(() => {
                this.state = 'active';
                this.open();
            }, 10);
        }
    }
    /**
     * If the item has the active attribute, set its state to 'active' on load.
     */
    ngAfterViewInit(): void {
        // Hide the title attribute if we have used the depricated title input (that clashes with the
        // native title HTML attribute.
        if (this.title) {
            this._element.nativeElement.setAttribute('title', '');
        }
    }

    /**
     * If there is an onOpen function specified in the <cui-panel-item> we run it here.
     */
    open(): void {
        this.onOpen.emit(this);
    }

    /**
     * If there is an onClose function specified in the <cui-panel-item> we run it here.
     */
    close(): void {
        this.onClose.emit(this);
    }

    /**
     * Toggles the state (active/inactive) of a panel. If the panel is popout panel, close all other items first.
     */
    togglePanelItem(): void {
        if (this.panel.popout) {
            this.panel.closeAll(this);
        }
        this.state = (this.state === 'active' ? 'inactive' : 'active');
        this.active = !this.active;
        if (this.active) {
            this.open();
        } else {
            this.close();
        }
    }
}
