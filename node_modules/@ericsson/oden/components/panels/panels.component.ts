import {
    Component, QueryList, forwardRef, ContentChildren, HostBinding,
    ViewEncapsulation, Input, OnChanges, SimpleChanges
} from '@angular/core';
import { PanelItemComponent } from './panel-item/panel-item.component';

@Component({
    selector: 'cui-panel',
    templateUrl: 'panels.component.html',
    styleUrls: ['panels.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class PanelsComponent implements OnChanges {

    @HostBinding('class.cui-panel') addClass: boolean = true;
    @HostBinding('class.popout') @Input() popout: boolean = false;
    @Input() showToggleLink: boolean = false;
    @ContentChildren(forwardRef(() => PanelItemComponent)) items: QueryList<PanelItemComponent>;

    get expandOrCollapse(): string {
        const anyOpened = this.items.toArray().filter((i) => i.state === 'active');
        if (anyOpened.length === this.items.length) {
            return 'Collapse';
        } else {
            return 'Expand';
        }
    }

    constructor() {
    }

    ngOnChanges(changes: SimpleChanges) {
        // hide toggle link for panel-popout
        if (changes && (changes.popout || changes.showToggleLink)) {
            if (this.popout) {
                this.showToggleLink = false;
            }
        }
    }

    /**
     * Iterates all panel items inside the panels and sets their state to 'inactive'.
     * Don't close parameter item if provided.
     * @param item
     */
    closeAll(item?: PanelItemComponent): void {
        this.items.toArray().forEach(_item => {
            if (!item || (item && item !== _item)) {
                _item.state = 'inactive';
                if (_item.active) {
                    _item.active = false;
                    _item.close();
                }
            }
        });
    }

    /**
     * Iterates all panel items inside the panels and sets their state to 'active'.
     */
    openAll(): void {
        this.items.toArray().forEach(item => {
            item.state = 'active';
            if (!item.active) {
                item.active = true;
                item.open();
            }
        });
    }

    /**
     * Open or close all panels depending on their current state
     */
    toggleAllPanels(): void {
        const anyOpened = this.items.toArray().filter((i) => i.state === 'active');
        if (anyOpened.length === this.items.length) {
            this.closeAll();
        } else {
            this.openAll();
        }
    }
}
