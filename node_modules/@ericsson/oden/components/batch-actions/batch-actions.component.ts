/* tslint:disable:component-selector */
import { Component, EventEmitter, HostBinding, Input, Output, ViewEncapsulation } from '@angular/core';
import { ActionItem } from '../../core/models';
import { UnSub } from '../../core/classes';

@Component({
    selector: 'cui-batch-actions',
    templateUrl: 'batch-actions.component.html',
    styleUrls: ['batch-actions.component.scss'],
    encapsulation: ViewEncapsulation.None
})
@UnSub()
export class BatchActionsComponent {
    @HostBinding('class.cui-batch-actions') addClass: boolean = true;
    @HostBinding('class.has-selected') @Input() visible: boolean = false;
    @HostBinding('style.paddingLeft') @Input() paddingLeft: string;
    @HostBinding('class.isAbsolute') @Input() isAbsolute: boolean = false;
    @Input() batchActions: Array<ActionItem> = [];
    @Input() selectedItemsText: string;
    @Input() selectedItems: Array<any> = [];
    @Output() onBatchClick: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    @Output() onBatchChanged: EventEmitter<Array<any>> = new EventEmitter<Array<any>>();
    @Output() onDeselectAll: EventEmitter<Array<any>> = new EventEmitter<Array<any>>();

    constructor() {
    }

    /**
     * batchClick EventEmitter. Sends ActionItem to EventEmitter.
     * @param action
     */
    batchClick(action: ActionItem): void {
        const _action = new ActionItem(action);
        _action.items = this.selectedItems;
        this.onBatchClick.emit(_action);
    }

    deselectAllItems(): void {
        this.onDeselectAll.emit();
    }

    /**
     * When a checkbox is changed, we update the rows selected data and emits an event
     */
    onRowChange(): void {
        this.onBatchChanged.emit(this.selectedItems);
    }

}
