import {
    Component,
    EventEmitter,
    HostBinding,
    Input,
    OnInit,
    OnDestroy,
    Output,
    ViewEncapsulation,
    ElementRef,
    ViewChild,
    AfterViewInit,
    OnChanges,
    SimpleChanges,
    HostListener,
    NgZone,
    AfterViewChecked
} from '@angular/core';
import { ActionItem, BreadcrumbItem, ProfileModel } from '../../core/models/';
import {
    SystembarActionGroup,
    SystembarActionItem
} from './systembar-action-item.model';
import { OverlayService } from '../overlay/overlay.service';
import { Subscription } from 'rxjs/Subscription';
import { AppHeaderService } from '../app-header';
import { ApplicationService } from '../../core/services';
import { SYSTEMBAR_ACTION_ITEM_TYPE } from '../../core/constants/systembar-actionItem-type.constants';
import { GuidedWorkflowService } from '../guided-workflow/guided-workflow.service';
import { SIZING } from '../../core/constants/sizing.constants';
import { UniversalService } from '../universal/universal.service';
import { UniversalTab } from '../../core/models/universal-tab.model';

@Component({
    selector: 'cui-systembar',
    templateUrl: 'systembar.component.html',
    styleUrls: ['systembar.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class SystemBarComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy, AfterViewChecked {
    @HostBinding('class.cui-systembar') addClass: boolean = true;
    @HostBinding('class.minimized')
    get isMinimized() {
        return (
            this.guidedWorkflowService.guideIsVisible ||
            this.guidedWorkflowService.toggleModeOn
        );
    }
    @Output() onMenuClick: EventEmitter<null> = new EventEmitter<null>();
    @Output() onSystemActionClick: EventEmitter<SystembarActionItem> = new EventEmitter<SystembarActionItem>();
    @Output() onSystemActionMenuClick: EventEmitter<SystembarActionItem> = new EventEmitter<SystembarActionItem>();
    @Output() onProfileActionClick: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    @Input() title: string = 'Technical catalog';
    @Input() profile: ProfileModel;
    @Input() actions: Array<SystembarActionGroup> = [[]]; // This is a two-level array
    @Input() profileActions: Array<ActionItem>;
    @ViewChild('profileDisplay', { read: ElementRef }) private profileDisplayElement: ElementRef;
    @ViewChild('breadCrumbRef') breadCrumbRef: ElementRef;
    tabs: Array<any> = [];
    overrideSiteTitle: string;
    profileDisplayWidth: number = 0;
    systemBarTitleWidth: number = 0;
    showBackLink: boolean = false;
    private _breadCrumbs: Array<BreadcrumbItem> = [];
    private _profileLeftSize: any = null;

    get breadcrumb(): Array<BreadcrumbItem> {
        return this._applicationService.breadCrumb;
    }

    SYSTEMBAR_ACTION_ITEM_TYPE = SYSTEMBAR_ACTION_ITEM_TYPE;

    @HostBinding('style.z-index')
    get _zindex(): number {
        return this.overlayService.highestZindex;
    }

    @HostBinding('class.sticky') stickyClass: boolean;

    private _subscriptions: Array<Subscription> = [];
    constructor(
        public overlayService: OverlayService,
        private _appHeaderService: AppHeaderService,
        private _applicationService: ApplicationService,
        public guidedWorkflowService: GuidedWorkflowService,
        private _universalService: UniversalService,
        private _appHeader: AppHeaderService,
        private _ngZone: NgZone
    ) {
        this._subscriptions.push(
            this._appHeaderService.onTitleChange$.subscribe(
                (title: string) => (this.title = title)
            )
        );

        this._subscriptions.push(
            this._universalService.onTabsChange.subscribe(tabs => {
                this.tabs = tabs;
            })
        );

        this._subscriptions.push(
            this._appHeader.overrideSiteTitle.subscribe(title => {
                this.overrideSiteTitle = title;
            })
        );
    }

    ngOnInit(): void {
        const app = document.getElementById('cui-application');
        app.addEventListener('scroll', () => this.onScrollSticky(app));
    }

    ngAfterViewInit(): void {
        this.setProfileDisplayWidth();
    }

    ngAfterViewChecked() {
        this._ngZone.onStable.first().subscribe(() => {
            this.onResize();
        });
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['profile']) {
            this.setProfileDisplayWidth();
        }
    }

    ngOnDestroy(): void {
        const app = document.getElementById('cui-application');
        app.removeEventListener('scroll', () => this.onScrollSticky(app));
    }

    /**
     * Set profileDisplayWidth to the width of the ProfileDisplayComponent
     */
    setProfileDisplayWidth(): void {
        if (this.profileDisplayElement && this.profileDisplayElement.nativeElement) {
            setTimeout(() => {
                this.profileDisplayWidth = this.profileDisplayElement.nativeElement.scrollWidth;
            });
        }
    }

    /**
     * Emits the onMenuClick action
     */
    menuClick(): void {
        this.onMenuClick.emit();
    }

    /**
     * Opens Univeral Overlay
     * @param action
     */
    openOverlay(tab: UniversalTab): void {
        this._universalService.showUniversalOverlay(tab.identifier);
    }

    /**
     * Emits the SystembarActionItem to the listener
     * @param action
     */
    actionClick(action: SystembarActionItem): void {
        this.onSystemActionClick.emit(action);
    }

    /**
     * Emits the SystembarActionItem to the listener with selected actionItem in ngModel
     * @param action
     * @param systembarActionItem
     */
    onActionMenuClick(
        action: ActionItem,
        systembarActionItem: SystembarActionItem
    ) {
        systembarActionItem.ngModel = action;
        this.onSystemActionMenuClick.emit(systembarActionItem);
    }

    /**
     * Emits the action item when the profile action menu is clicked
     * @param action
     */
    profileActionClick(action: ActionItem): void {
        this.onProfileActionClick.emit(action);
    }

    onScrollSticky(app): void {
        this.stickyClass =
            document.querySelector('.cui-app-header-wrapper') &&
            app.scrollTop > SIZING.SYSTEMBAR_HEIGHT;
    }

    /**
     * Host listener for window resize event
     */
    @HostListener('window:resize', ['$event'])
    onResize(): void {
        this._setSystemBarTitleWidth();
        this._breadCrumbs = this._applicationService.breadCrumb;
        // Set the breadcrumb back-link visiblity if it is collides on app load
        if (this._breadCrumbs && this._breadCrumbs.length > 1) {
            this._setBackLinkVisibility();
        }
    }

    /**
     * Sets back-link visibility
     * @returns {void}
     */
    private _setBackLinkVisibility(): void {
        const breadCrumbSize = this.breadCrumbRef.nativeElement.getBoundingClientRect();
        const profileDisplaySize = this.profileDisplayElement.nativeElement.getBoundingClientRect();

        if (typeof this._profileLeftSize !== 'number' || profileDisplaySize.left > this._profileLeftSize) {
            // Set back-link visibility true if it's collides
            this.showBackLink = breadCrumbSize.right > profileDisplaySize.left;
            this._profileLeftSize = this.showBackLink ? this._profileLeftSize : null;
        }

        if (typeof this._profileLeftSize !== 'number' && this.showBackLink) {
            this._profileLeftSize = profileDisplaySize.left;
        }
    }

    /**
     * Sets system bar title max width
     * @returns {void}
     */
    private _setSystemBarTitleWidth(): void {
        const profileDisplaySize = this.profileDisplayElement.nativeElement.getBoundingClientRect();
        const tempSystemBarTitleWidth = Math.round(profileDisplaySize.left - 45);
        this.systemBarTitleWidth = tempSystemBarTitleWidth > 0 ? tempSystemBarTitleWidth : 0;
    }
}
