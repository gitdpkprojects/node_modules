/* tslint:disable:directive-selector-prefix */
/* tslint:disable:directive-selector */
/* tslint:disable:no-input-rename */

import { Directive, ElementRef, HostBinding, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import AnimationHelper from '../../core/helpers/animation.helper';

@Directive({ selector: '[cui-toggle]' })

export class ToggleDirective implements OnChanges {
    @HostBinding('class.cui-toggle') addClass: boolean = true;
    @Input('cui-toggle') show: boolean = false;

    constructor(private _element: ElementRef, private _renderer: Renderer2) { }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['show'] && !changes['show'].firstChange) {
            this.setMaxHeight();
        } else if (changes['show'] && changes['show'].firstChange && changes['show'].currentValue === true) {
            this._renderer.setStyle(this._element.nativeElement, 'transition', 'none');
            this._renderer.addClass(this._element.nativeElement, 'visible');
            this._renderer.addClass(this._element.nativeElement, 'height-locked');
            this._renderer.removeStyle(this._element.nativeElement, 'transition');
        }
    }

    setMaxHeight(): void {
        if (this.show) {
            const height = this._element.nativeElement.scrollHeight;
            // do the animation (timeouts needed for transitions to work)
            this._renderer.addClass(this._element.nativeElement, 'visible');
            this._renderer.setStyle(this._element.nativeElement, 'maxHeight', `${height}px`);
            AnimationHelper.animationCompleted(this._element.nativeElement).then(() => {
                this._renderer.addClass(this._element.nativeElement, 'height-locked');
                this._renderer.removeStyle(this._element.nativeElement, 'maxHeight');
            });
        } else {
            const height = this._element.nativeElement.offsetHeight;
            this._renderer.setStyle(this._element.nativeElement, 'maxHeight', `${height}px`);
            this._renderer.removeClass(this._element.nativeElement, 'height-locked');
            // do the animation (Promise.resolve needed for transitions to work)
            Promise.resolve().then(() => {
                this._renderer.setStyle(this._element.nativeElement, 'maxHeight', '0');
                AnimationHelper.animationCompleted(this._element.nativeElement).then(() => {
                    this._renderer.removeClass(this._element.nativeElement, 'visible');
                    this._renderer.removeStyle(this._element.nativeElement, 'maxHeight');
                });
            });
        }
    }
}
