import { MainMenuRoute, ParentRoute, ChildRoute, TopLevelRoute } from './main-menu-route.model';
import { EventEmitter, Injectable } from '@angular/core';

@Injectable()
export class MainMenuService {
    onChange: EventEmitter<Array<ParentRoute>> = new EventEmitter<Array<ParentRoute>>();
    onToggle: EventEmitter<null> = new EventEmitter<null>();
    private _routes: Array<ParentRoute>;

    /**
     * Sets the route for the MainMenuComponent. After this is set, an event will be emitted.
     * The MainMenuComponent listens to this event.
     * @param routes: Array<MainMenuRoute>
     */
    setRoutes(routes: Array<MainMenuRoute>): void {
        const topLevelElements: Array<MainMenuRoute> = [];
        const topLevelRoutes: Array<ParentRoute> = [];

        // Extract top level elements
        routes.forEach((route: MainMenuRoute, index: number) => {
            // if its a group, or an app that does not belong to any group
            if (route.groupName || (route.applicationName && !route.parentGroup)) {
                topLevelElements.push(routes[index]);
            }
        });

        // add and sort children
        topLevelElements.forEach((elem: MainMenuRoute) => {
            const topLevelRoute = new TopLevelRoute(elem);

            if (elem.groupName) {
                topLevelRoute.children = routes.filter((route: MainMenuRoute) => {
                    return route.parentGroup && route.parentGroup.toLowerCase() === elem.groupName.toLowerCase();
                });
            }
            if (elem.applicationName) {
                topLevelRoute.children = routes.filter((route: MainMenuRoute) => {
                    return route.parentApp && route.parentApp === elem.applicationName;
                });
            }

            topLevelRoute.children.sort((a, b) => a.priority - b.priority);

            topLevelRoutes.push(topLevelRoute);
        });

        // Add and sort children's children
        topLevelRoutes.forEach((topLevelRoute: TopLevelRoute) => {
            if (topLevelRoute && topLevelRoute.children) {
                topLevelRoute.children.forEach((nestedRoute: TopLevelRoute) => {
                    if (nestedRoute) {
                        nestedRoute.children = routes.filter((route: MainMenuRoute) => {
                            return route.parentApp && route.parentApp === nestedRoute.applicationName;
                        });
                        nestedRoute.children.sort((a: ChildRoute, b: ChildRoute) => a.priority - b.priority);
                    }
                });
            }
        });

        topLevelRoutes.sort((a: ParentRoute, b: ParentRoute) => a.priority - b.priority);

        this._routes = topLevelRoutes;
        this.onChange.emit((this._routes));
    }

    /**
     * Returns the top level routes
     * @returns {Array<ParentRoute>}
     */
    getRoutes(): Array<ParentRoute> {
        return this._routes;
    }

    /**
     * Toggles the menu open / closed state
     */
    toggleMenu(): void {
        this.onToggle.emit();
    }
}
