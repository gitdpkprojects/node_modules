/* tslint:disable:directive-selector-name */
import { Directive, HostBinding, Input, ElementRef } from '@angular/core';
import { BlockTreeService } from './block-tree.service';
import { DragAndDropService } from '../drag-and-drop';
import { DOMHelper } from '../../core/helpers/dom.helper';

@Directive({
    selector: '[cui-dropelement]'
})

export class BlockDropElementDirective {
    @HostBinding('class.cui-dropelement') addClass: boolean = true;
    @HostBinding('class.disabled') @Input() disabled: boolean = false;
    @HostBinding('class.visible') visible: boolean = false;
    @Input() isDroppable: boolean = true;

    constructor(
        private elementRef: ElementRef,
        private blockTreeService: BlockTreeService,
        private dragAndDropService: DragAndDropService
    ) {
        this.blockTreeService.hideAllVisibleDropElements.subscribe(() => this.visible = false);
        this.dragAndDropService.onDragStart$.subscribe(() => {
            setTimeout(() => {
                const element = this.elementRef.nativeElement;
                const {
                    nextElementSibling,
                    previousElementSibling
                } = element;
                this.disabled = false;
                this.visible = false;
                const closestBranch = DOMHelper.closestParent(
                    element,
                    'cui-block-tree-branch'
                );
                const isFull =
                    closestBranch &&
                    closestBranch.classList.contains('fully-populated');
                const previousExists =
                    !previousElementSibling ||
                    !previousElementSibling.classList.contains(
                        'currently-dragging-clone'
                    );
                const nextExists =
                    !nextElementSibling ||
                    !nextElementSibling.classList.contains(
                        'currently-dragging-clone'
                    );
                if (
                    !isFull &&
                    previousExists &&
                    nextExists &&
                    this.isDroppable
                ) {
                    this.visible = true;
                } else {
                    this.disabled = true;
                }
            }, 100);
        });
    }
}
