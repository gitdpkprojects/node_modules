import { Component, EventEmitter, HostBinding, Input, OnInit, Output, ViewEncapsulation, HostListener, ElementRef } from '@angular/core';
import { ActionItem } from '../../../../core/models';
import { BlockTreeBranchLeaf } from '../../../../core/models/block-tree-branch-leaf.model';
import { BlockTreeService } from '../../block-tree.service';
import { BlockTreeBranch } from '../../../../core/models/block-tree-branch.model';
import { TactileBlockItem } from '../../../../core/models/tactile-block-item.model';
import { BlockTree } from '../../../../core/models/block-tree.model';
import { TactileBlockService } from '../../../tactile-block/tactile-block.service';

@Component({
    selector: 'cui-block-tree-branch-leaf',
    templateUrl: 'leaf.component.html',
    styleUrls: ['leaf.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class BlockTreeBranchLeafComponent implements OnInit {
    @HostBinding('attr.id') get id(): string {
        return this.leafModel.id;
    }
    @HostBinding('class.cui-block-tree-branch-leaf') addClass: boolean = true;
    @HostBinding('class.newly-created') get newlyCreated(): boolean {
        return this.leafModel.newlyCreated;
    }
    @HostBinding('class.contains-tactile-block') get containsTactile(): boolean {
        return this.tactileBlockItem !== undefined;
    }
    @HostBinding('class.selected') get selected(): boolean {
        return this.tactileBlockItem && this.tactileBlockItem.selectable ? this._tactileBlockService
            .selected.filter(item => item === this.tactileBlockItem).length !== 0 : false;
    }
    @HostBinding('class.parent-is-tree') get parentIsTree(): boolean {
        return this.leafModel.parent && this.leafModel.parent instanceof BlockTree;
    }
    @Output() onActionClick: EventEmitter<ActionItem> = new EventEmitter<ActionItem>();
    @Input() leafModel: BlockTreeBranchLeaf;
    @Input() parent: BlockTreeBranch;
    @Input() tabIndex: number;

    tactileBlockItem: TactileBlockItem;

    constructor(
        private _blockTreeService: BlockTreeService,
        private _tactileBlockService: TactileBlockService,
        private element: ElementRef
    ) {
        setTimeout(() => {
            this.leafModel.newlyCreated = false;
        }, 500);
    }

    ngOnInit(): void {
        if (this.leafModel.data instanceof TactileBlockItem) {
            this.tactileBlockItem = this.leafModel.data;
        }
        this.leafModel.parent = this.parent;
    }

    @HostListener('mouseleave', ['$event'])
    onMouseLeave(event: MouseEvent) {
        this.parent.state.visibleChilds = true;
        event.stopPropagation();
    }

    /**
     * If user clicks outside branch and it's selected, let's make it unselected
     */
    @HostListener('document:click')
    onDocumentClick(): void {
        if (!this._blockTreeService.justFocused && !this.element.nativeElement.contains(<Node>event.target)) {
            this.leafModel.state.focused = false;
        }
    }

    /**
     * Action dispatcher for onActionClick
     * @param actionItem
     */
    actionClick(actionItem: ActionItem): void {
        this._blockTreeService.actionClick(actionItem, this.leafModel);
    }
}
