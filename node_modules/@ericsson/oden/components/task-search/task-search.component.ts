import {
    Component, Output, EventEmitter, Input, HostBinding, ViewEncapsulation, forwardRef,
    ElementRef, HostListener, ViewChild, AfterViewInit, DoCheck
} from '@angular/core';
import { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';
import { KEYBOARD } from '../../core/constants/keyboard.constants';
import { ITableHeaderItem } from  '../../core/interfaces/table-header.interface';
import { ITableRowData } from '../../core/interfaces/table-row-data.interface';

@Component({
  selector: 'cui-task-search',
  templateUrl: 'task-search.component.html',
  styleUrls: ['task-search.component.scss'],
  encapsulation: ViewEncapsulation.None,
  providers: [{
     provide: NG_VALUE_ACCESSOR,
     useExisting: forwardRef(() => TaskSearchComponent),
     multi: true
  }],
})
export class TaskSearchComponent implements ControlValueAccessor, AfterViewInit, DoCheck  {
    @HostBinding('class.cui-task-search') addClass: boolean = true;
    @ViewChild('msgFocous') searchField: ElementRef;

    @Input() label: string;
    @Input() placeholder: string;
    @Input() moreOptions: boolean = false;
    @Input() isActionDisabled: boolean = true;
    @Input() historyHeader: ITableHeaderItem[] = [];
    @Input() historyData: Array<ITableRowData> = [];
    @Output() onSearch: EventEmitter<boolean> = new EventEmitter<boolean>();
    @Output() onClearAll: EventEmitter<null> = new EventEmitter<null>();

    isClearActionDisabled: boolean = true;

    /**
     * Private variables and callbacks
     */

    // The internal data model
    private _searchValue: any = null;
    private _lastValue: any;
    // Placeholders for the callbacks
    private _onTouchedCallback: () => void = () => {};
    private _onChangeCallback: (_: any) => void = () => {};

    /**
     * Getter and setter for _value
     */
    get searchValue(): any { return this._searchValue; }

    // set accessor including call the onchange callback
    set searchValue(v: any) {
        if (v !== this._searchValue) {
            this._searchValue = v;
            this._onChangeCallback(v);
        }
    }

    constructor() {}

    ngAfterViewInit() {
        this.searchField.nativeElement.focus();
    }

    /**
     * To emit onSearch event when Search Button is clicked
     */
    onSearching(): void {
        this.isClearActionDisabled = false;
        this.onSearch.emit(this.moreOptions);
    }

    /**
     * To hide/show the ng-content when more options switch changed to on/off
     */
    onMoreOption(show: boolean): void {
        this.moreOptions = show;
    }

    /**
     * To emit onClearAll event when clearall Button is clicked
     */
    onClearing(): void {
        this.searchValue = null;
        this.isActionDisabled = true;
        this.isClearActionDisabled = true;
        this.onClearAll.emit();
    }

    /**
     * Set touched on blur
     */
    onBlur() {
        this._onTouchedCallback();
    }

    /**
     * Implementation for ControlValueAccessor
     */
    writeValue(obj: any): void {
        this.searchValue = obj;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnChange(fn: any): void {
        this._onChangeCallback = fn;
    }

    /**
     * Implementation for ControlValueAccessor
     */
    registerOnTouched(fn: any): void {
        this._onTouchedCallback = fn;

    }

    /**
     * @param event: KeyboardEvent
     */
    @HostListener('keydown', ['$event'])
    handleKeyboardEvent(event: KeyboardEvent): void {
        if ((event.which === KEYBOARD.ENTER) && !this.isActionDisabled) {
            this.onSearch.emit(this.moreOptions);
            this.isClearActionDisabled = false;
        } else if ( event.which === KEYBOARD.ESCAPE) {
            this.isActionDisabled = true;
            this.searchValue = null;
            this.isClearActionDisabled = true;
            this.onClearAll.emit();

        }
    }

    /**
     * to update the searchValue when the searchField value changes
     */
    ngDoCheck(): void {
        if (this.searchField && this.searchField.nativeElement.value !== this._lastValue) {
            this._lastValue = this.searchField.nativeElement.value;
            // timeout to avoid change detections issues
            setTimeout(() => {
                this.searchValue = this.searchField.nativeElement.value;
            }, 1);
        }
    }
}
