import { Row2Component } from './table2-row/row.component';
import { Injectable } from '@angular/core';
import * as _ from 'lodash';
import { CELL_ALIGNMENT } from '../../core/constants/alignment.constants';
@Injectable()
export class TableHelper {
    getSelectedStateFromChildRows(rows: Array<Row2Component>): SelectedState {
        const hasIndeterminateRows =
            rows.filter(row => row._hasIndeterminateSelectedChildren).length >
            0;
        if (hasIndeterminateRows) {
            return SelectedState.INTERMEDIATE;
        } else {
            const rowsSelectedState = _.uniq(rows.map(row => row._selected));
            if (rowsSelectedState.length === 2) {
                return SelectedState.INTERMEDIATE;
            } else {
                if (rowsSelectedState.indexOf(true) !== -1) {
                    return SelectedState.SELECTED;
                } else {
                    return SelectedState.UNSELECTED;
                }
            }
        }
    }

    _setAlignmentClass(
        align: CELL_ALIGNMENT,
        cell: {
            _isAlignedLeft: boolean;
            _isAlignedRight: boolean;
            _isAlignedCenter: boolean;
        }
    ) {
        switch (align) {
            case CELL_ALIGNMENT.RIGHT:
                cell._isAlignedLeft = false;
                cell._isAlignedRight = true;
                cell._isAlignedCenter = false;
                break;
            case CELL_ALIGNMENT.CENTER:
                cell._isAlignedLeft = false;
                cell._isAlignedRight = false;
                cell._isAlignedCenter = true;
                break;
            default:
                cell._isAlignedLeft = true;
                cell._isAlignedRight = false;
                cell._isAlignedCenter = false;
        }
    }

    // returns the width in px of the column based on the width of table (if %)
    getColumnWidth(width: number | string, usableTableWidth: number): number {
        let _width: number;
        if (typeof width === 'string') {
            _width = Number.parseInt(<string>width);
            if (width.endsWith('%')) {
                _width = (usableTableWidth * _width) / 100;
            }
        } else {
            _width = width;
        }
        return _width;
    }

    getPercentAsNumber(width: string | number): number {
        let widthPercent: number;
        const widthIndex = width.toString().indexOf('%');
        if (width && widthIndex > -1) {
            widthPercent = Number.parseFloat(
                width.toString().substr(0, widthIndex)
            );
        }
        if (!isNaN(widthPercent)) {
            return widthPercent;
        } else {
            return null;
        }
    }

    getWidthAsString(width: string | number) {
        if (typeof width === 'number') {
            return `${width}px`;
        } else if (typeof width === 'string') {
            if (width.endsWith('px') || width.endsWith('%')) {
                return width;
            } else {
                return `${width}px`;
            }
        }
        return width;
    }

    getWidthType(width: string | number): WidthType {
        if (typeof width === 'number') {
            return WidthType.PIXEL;
        } else if (typeof width === 'string') {
            if (width.endsWith('%')) {
                return WidthType.PERCENT;
            } else {
                return WidthType.PIXEL;
            }
        }
        return WidthType.NONE;
    }
}

export enum SelectedState {
    SELECTED,
    UNSELECTED,
    INTERMEDIATE
}

export enum WidthType {
    PIXEL = 'px',
    PERCENT = '%',
    NONE = 'none'
}
