import {
    Component,
    OnInit,
    OnDestroy,
    Inject,
    forwardRef,
    EventEmitter,
    Output,
    ChangeDetectionStrategy,
    ChangeDetectorRef
} from '@angular/core';
import { Table2Component } from '../../table.component';
// import * as _ from 'lodash';
import { Subscription } from 'rxjs';
import { TableHelper, SelectedState } from '../../table.helper';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'th[odenSelectHeader]',
    templateUrl: './select-header.component.html',
    styleUrls: ['./select-header.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    host: {'class': 'select'}
})
export class SelectHeaderComponent implements OnInit, OnDestroy {
    _indeterminate = false;
    _tableUuid: string;
    private _selectedChanged: Subscription;
    private _subscriptions: Array<Subscription> = [];
    set selected(value: boolean) {
        if (value) {
            this._indeterminate = false;
        }
        this._selected = value;
    }
    _selected = false;
    get selected(): boolean {
        return this._selected;
    }
    @Output()
    onChange = new EventEmitter<boolean>(true);

    constructor(
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component,
        private _changeDetectorRef: ChangeDetectorRef,
        private _tableHelper: TableHelper
    ) {}

    ngOnInit() {
        this._tableUuid = this._table._tableUuid;
        this._selectedChanged = this._table
            .onSelectedStateChanged()
            .subscribe(() => {
                this._setState();
            });
        this._subscriptions.push(
            this._table._onPaginationChanged.subscribe(() => {
                this._setState();
            })
        );
        this._subscriptions.push(
            this._table._onRowsChanged.subscribe(() => {
                this._setState();
            })
        );
    }

    toggleSelectValue() {
        this.selected = !this.selected;
        this.onChange.emit(this.selected);
        this._changeDetectorRef.detectChanges();
    }

    _setState(): void {
        const rows = this._table._currentPageRows;
        const selectedState = this._tableHelper.getSelectedStateFromChildRows(rows);
        if (selectedState === SelectedState.INTERMEDIATE) {
            this._selected = false;
            this._indeterminate = true;
        } else {
          this._indeterminate = false;
          this.selected = selectedState === SelectedState.SELECTED;
        }
        this._changeDetectorRef.detectChanges();
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach(s => s.unsubscribe());
    }
}
