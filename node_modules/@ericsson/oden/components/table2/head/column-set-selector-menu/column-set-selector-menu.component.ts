import {
    ChangeDetectionStrategy,
    Component,
    forwardRef,
    Inject,
    OnDestroy,
    OnInit,
    ViewChild,
    ChangeDetectorRef,
    Output,
    EventEmitter
} from '@angular/core';
import { Observable, Subscription, Subject } from 'rxjs';
import { SelectComponent } from '../../../form/index';
import { HeaderComponent } from '../../header/header.component';
import { Table2Component } from '../../table.component';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'th[odenColumnSetSelectorMenu]',
    templateUrl: './column-set-selector-menu.component.html',
    styleUrls: ['./column-set-selector-menu.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    host: {
        class: 'selected-columns-toggled sticky-column single-action'
    }
})
export class TableColumnSetSelectorMenuComponent implements OnInit, OnDestroy {
    _numberOfColumnSets: number = 0;
    _currentColumnSetIndex: number = 0;
    _columnSets: Array<string> = [];
    private _subscriptions: Array<Subscription> = [];
    _headers: Array<HeaderComponent> = [];
    _displayHeaders: Array<IHeaderOption> = [];
    _selectedColumns = [];
    _hiddenColumnCount: number = 0;
    _afterColumnsChanged$ = new Subject<Array<HeaderComponent>>();
    _afterColumnsChanged = this._afterColumnsChanged$.asObservable();

    @Output()
    onColumnVisibilityChanged: EventEmitter<Array<HeaderComponent>> = new EventEmitter<
        Array<HeaderComponent>>();
    @ViewChild('selectedColumnsDropRef')
    selectedColumnsDropRef: SelectComponent;

    constructor(
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component,
        private _changeDetectorRef: ChangeDetectorRef
    ) { }

    ngOnInit() {
        this._subscriptions.push(
            this._table._headersAsync.subscribe(headers => {
                if (!headers) {
                    return;
                }
                this._headers = headers;
                headers.forEach(header => {
                    this._displayHeaders.push({
                        index: header._index,
                        label: header._labelAsync,
                        sticky: header.sticky,
                        hidden: header.hidden
                    });
                });
                this._selectedColumns = this._displayHeaders.filter(
                    header => !header.hidden
                );
                this._setSelectedColumns();
                this._changeDetectorRef.detectChanges();
            })
        );
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach(s => s.unsubscribe());
    }

    /**
     * Hides/shows columns based on selected/unselected items in the "Select columns" dropdown
     * @param {Array<HeaderComponent>} items
     */
    _toggleColumns(headerOptions: Array<IHeaderOption>): void {
        const displayedIndexes = headerOptions.map(header => header.index);
        this._headers.forEach(header =>
            header._setHidden(displayedIndexes.indexOf(header._index) === -1)
        );
        this._table._checkColumnOverflow();
        this._selectedColumns = headerOptions;
        this._setSelectedColumns();
        this._changeDetectorRef.detectChanges();
    }

    /**
     * Set the counts for hidden colums and emit the events with selected columns
     */
    private _setSelectedColumns(): void {
        this._hiddenColumnCount = this._displayHeaders.length - this._selectedColumns.length;
        this._afterColumnsChanged$.next(this._selectedColumns);
        this.onColumnVisibilityChanged.emit(this._selectedColumns);
    }

    /**
     * Toggles the "Select columns" dropdown
     */
    _toggleSelectColumns(): void {
        this.selectedColumnsDropRef.toggleDropdown();
    }

    _toggleStickyColumn(column) {
        column.sticky = !column.sticky;
        this._headers.find((header) => header._index === column.index)._setSticky(column.sticky);
        this._changeDetectorRef.detectChanges();
    }
}

export interface IHeaderOption {
    index: number;
    label: Observable<string>;
    sticky: boolean;
    hidden: boolean;
}
