import {
    Component,
    EventEmitter,
    forwardRef,
    Inject,
    Input,
    OnDestroy,
    OnInit,
    Output,
    TemplateRef,
    ViewChild
} from '@angular/core';
import { Subscription } from 'rxjs';
import { ActionItem } from '../../../../core/models/action-item.model';
import { Table2Component } from '../../table.component';
import { IBatchEvent } from '../../events.interfaces';
import { Row2Component } from '../../table2-row/row.component';

@Component({
    selector: 'oden-table-batch-actions',
    templateUrl: './batch-actions.component.html',
    styleUrls: ['./batch-actions.component.scss']
})
export class TableBatchActionsComponent implements OnInit, OnDestroy {
    @Input()
    actions: Array<ActionItem>;
    @Input() additionalRowsCount: number = 0;
    @Output()
    onBatchAction = new EventEmitter<IBatchEvent>();
    @Output()
    onDeselectAll = new EventEmitter<null>();
    @Output()
    onBatchChanged = new EventEmitter<Array<any>>();
    selectedRows: Array<Row2Component> = [];
    @ViewChild('batchActionsTemplate', { read: TemplateRef })
    batchActionsTemplateRef: TemplateRef<any>;
    private _subscriptions: Array<Subscription> = [];
    constructor(
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component
    ) {}

    ngOnInit() {
        this._table._setBatchActionsTemplate(this.batchActionsTemplateRef);
        this._subscriptions.push(
            this._table
                .onSelectedStateChanged()
                .subscribe(selectedRows => (this.selectedRows = selectedRows))
        );
    }

    batchClick(actionItem: ActionItem): void {
        this.onBatchAction.emit({action: actionItem, rows: this.selectedRows});
    }

    ngOnDestroy(): void {
        this._table._unsetBatchActionsTemplate();
        this._subscriptions.forEach(s => s.unsubscribe());
    }
    deselectAllItems(): void {
        this._table.deselectAllRows();
        this.onDeselectAll.emit();
    }
}
