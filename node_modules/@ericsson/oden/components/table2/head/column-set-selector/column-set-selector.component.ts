import {
    ChangeDetectionStrategy,
    Component,
    forwardRef,
    Inject,
    OnDestroy,
    OnInit,
    ChangeDetectorRef
} from '@angular/core';
import { Subscription } from 'rxjs';
import { Table2Component } from '../../table.component';
import { HeaderComponent } from '../../header/header.component';

@Component({
    selector: 'oden-table-column-set-selector',
    templateUrl: './column-set-selector.component.html',
    styleUrls: ['./column-set-selector.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class TableColumnSetSelectorComponent implements OnInit, OnDestroy {
    _numberOfColumnSets: number = 0;
    _currentColumnSetIndex: number = 0;
    _columnSets: Array<string> = [];
    private _subscriptions: Array<Subscription> = [];
    private _headers: Array<HeaderComponent>;
    _previousTooltip: string;
    _nextTooltip: string;
    constructor(
        private _changeDetectorRef: ChangeDetectorRef,
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component
    ) {}

    ngOnInit() {
        this._numberOfColumnSets = this._table._numberOfColumnsSets;
        this._subscriptions.push(
            this._table._onNumberOfColumnSetsChanged.subscribe(columnSets => {
                this._numberOfColumnSets = columnSets;
                this._setColumnSets();
                this._changeDetectorRef.detectChanges();
            })
        );
        if (this._table._headers) {
            this._headers = this._table._headers.toArray();
            this._setColumnSets();
        }
        this._subscriptions.push(
            this._table._headers.changes.subscribe(() => {
                this._headers = this._table._headers.toArray();
                this._changeDetectorRef.detectChanges();
            })
        );
    }
    _setColumnSets() {
        this._columnSets = [];
        for (let i = 0; i <= this._numberOfColumnSets; i++) {
            this._columnSets[i] = this._headers
                .filter(header => header._columnSet === i)
                .map(header => header._label)
                .join(', ');
        }
        this._setLabels();
    }
    _setActiveColumnSet(index: number) {
        this._table._setActiveColumnSet(index);
        this._currentColumnSetIndex = index;
        this._setLabels();
    }
    ngOnDestroy(): void {
        this._subscriptions.forEach(s => s.unsubscribe());
    }
    private _setLabels() {
        const prevHeader = this._headers
            .filter(
                header => header._columnSet === this._currentColumnSetIndex - 1
            )
            .map(header => header._label)
            .join(', ');

        const nextHeader = this._headers
            .filter(
                header => header._columnSet === this._currentColumnSetIndex + 1
            )
            .map(header => header._label)
            .join(', ');
        if (prevHeader) {
            this._previousTooltip = prevHeader;
        } else {
            this._previousTooltip = '';
        }
        if (nextHeader) {
            this._nextTooltip = nextHeader;
        } else {
            this._nextTooltip = '';
        }
    }
    _nextColumnSet() {
        if (this._currentColumnSetIndex < this._numberOfColumnSets) {
            this._currentColumnSetIndex += 1;
            this._table._setActiveColumnSet(this._currentColumnSetIndex);
            this._setLabels();
        }
    }
    _prevColumnSet() {
        if (this._currentColumnSetIndex > 0) {
            this._currentColumnSetIndex -= 1;
            this._table._setActiveColumnSet(this._currentColumnSetIndex);
            this._setLabels();
        }
    }
}
