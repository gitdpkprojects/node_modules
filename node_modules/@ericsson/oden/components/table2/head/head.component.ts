import {
    AfterContentInit,
    ChangeDetectionStrategy,
    ChangeDetectorRef,
    Component,
    ContentChildren,
    QueryList, Input,
    Output,
    forwardRef,
    Inject,
    EventEmitter,
    SimpleChanges,
    OnChanges,
    AfterViewInit
} from '@angular/core';
import { Subscription } from 'rxjs';
import * as  _  from 'lodash';
import { TableHeadListControlsComponent } from './head-list-controls/list-controls.component';
import { ActionItem } from '../../../core/models/action-item.model';
import { Divider } from '../../../core/models/divider.model';
import { TableAction } from '../../../core/models/table-action.model';
import { ExportCSVService } from '../../export/export-csv/export-csv.service';
import { TranslateService } from '@ngx-translate/core';
import { CSVHelper, CSVHeaderItem } from '../../../core/helpers/csv.helper';
import { Table2Component } from '../table.component';

@Component({
    selector: 'oden-table-head',
    templateUrl: './head.component.html',
    styleUrls: ['./head.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class TableHeadComponent implements AfterContentInit, AfterViewInit , OnChanges {

    @ContentChildren(TableHeadListControlsComponent)
    _listControlsQueryList: QueryList<TableHeadListControlsComponent>;
    _subscriptions: Array<Subscription> = [];
    @Input() tableTitleActions: Array<ActionItem> = [];
    @Input() addExportAction = true;
    @Output()
    onTitleActionClick: EventEmitter<TableAction> = new EventEmitter<TableAction>();
    @Output()
    onExportCSV: EventEmitter<CSVHeaderItem[]> = new EventEmitter<CSVHeaderItem[]>();
    titleActions: Array<ActionItem | Divider> = [];
    indexLabels;
    constructor(private _changeDetectorRef: ChangeDetectorRef,
        private _exportCSVService: ExportCSVService,
        private translate: TranslateService,
        @Inject(forwardRef(() => Table2Component)) private tableComponent: Table2Component) {
        this._subscriptions.push(
            this.translate.stream(['ODEN.COMPONENTS.EXPORT.INDEX_LABEL', 'ODEN.COMPONENTS.EXPORT.INDEX_PARENT_LABEL']).subscribe(res => {
                this.indexLabels = {
                    'ODEN.COMPONENTS.EXPORT.INDEX_LABEL': `${res['ODEN.COMPONENTS.EXPORT.INDEX_LABEL']}`,
                    'ODEN.COMPONENTS.EXPORT.INDEX_PARENT_LABEL': `${res['ODEN.COMPONENTS.EXPORT.INDEX_PARENT_LABEL']}`
                };
            }));
    }

    ngAfterContentInit(): void {
        this._subscriptions.push(
            this._listControlsQueryList.changes.subscribe(() =>
                this._changeDetectorRef.detectChanges()
            )
        );
        this._changeDetectorRef.detectChanges();
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes.tableTitleActions || changes.addExportAction) {
            this._setTableTitleActions();
        }
    }

    ngAfterViewInit() {
        this._setTableTitleActions();
    }

    private _canShowExportAction() {
        let displayExport = false;

        if (this.onExportCSV.observers && this.onExportCSV.observers.length > 0) {
            // If someone observed
            return true;
        }
        const paginationComponent = this.tableComponent._paginationComponentQueryList
            && this.tableComponent._paginationComponentQueryList.first;
        const totalItems = paginationComponent ? paginationComponent.totalItems : -1;

        const totalRows = this.tableComponent.rows ? this.tableComponent.rows.length : 0;
        // if pagination component is not provided, then show export
        displayExport = totalItems === -1;
        // if pagination data is in sync, show export
        displayExport = (totalItems === totalRows) || displayExport;

        // if total items is not provided
        if (totalItems === undefined) {
            if (paginationComponent.onPagination && paginationComponent.onPagination.observers.length > 0) {
                // if onPagination is subscribed, then hide export
                displayExport = false;
            } else {
                // if onPagination is not subscribed, then show export
                displayExport = true;
            }
        }
        return displayExport;
    }

    /**
     * Set table title actions with Export mandatory option
     * @returns {void}
     */
    private _setTableTitleActions(): void {
        if (this.tableTitleActions && this.tableTitleActions.length > 0) {
            this.titleActions = _.cloneDeep(this.tableTitleActions);
            this.titleActions.push(new Divider());
        }
        if (this._canShowExportAction() && this.addExportAction === true) {
            const exportActionItem = new ActionItem({ action: 'export' });
            this.titleActions.push(exportActionItem);

            this.translate.stream(['ODEN.COMMON.EXPORT']).subscribe(res => {
                exportActionItem.label = `${res['ODEN.COMMON.EXPORT']}...`;
            });
        }
        this._changeDetectorRef.detectChanges();
    }

    /**
     * Table title action event hanlder.
     * @param {ActionItem} action
     * @param {ITableRowData} item
     * @returns {void}
     */
    titleActionClick(action: ActionItem): void {
        if (action.action === 'export') {
            // Open the export dialog
            const tableData = this._getTableData();
            if (tableData) {
                this._exportCSVService.openDialog(tableData.headers).subscribe(res => {
                    if (res.export) {
                        tableData.headers.forEach(t => {
                            t.hidden = !(res.columns.filter(x => x.label === t.label).length > 0);
                        });

                        if (this.onExportCSV.observers.length > 0) {
                            // Delegate export CSV
                            this.onExportCSV.emit(tableData.headers);
                        } else {
                            // Handle export CSV
                            this._exportCSVService.doExport(tableData.headers, tableData ? tableData.data : []);
                        }
                    }
                });
            }
        } else {
            const tableAction = new TableAction(action);
            // Emit other actions
            this.onTitleActionClick.emit(tableAction);
        }
    }

    /**
     * Get Table data
     */
    private _getTableData(): {
        headers: CSVHeaderItem[],
        data: string[][]
    } {
        return CSVHelper._getTable2Data(this.tableComponent, this.indexLabels);
    }
}
