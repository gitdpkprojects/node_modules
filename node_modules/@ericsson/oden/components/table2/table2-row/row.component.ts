import {
    AfterContentInit,
    ChangeDetectionStrategy,
    ChangeDetectorRef,
    Component,
    ContentChildren,
    EventEmitter,
    forwardRef,
    HostBinding,
    Inject,
    Input,
    OnInit,
    Output,
    QueryList,
    SimpleChanges,
    OnChanges,
    ViewEncapsulation,
    OnDestroy,
    HostListener,
    ElementRef
} from '@angular/core';
// import * as _ from 'lodash';
import { Observable, Subject, Subscription, ReplaySubject } from 'rxjs';
import { UUID } from '../../../core/helpers/uuid.class';
import { Table2Component } from '../table.component';
import { SelectedState, TableHelper } from '../table.helper';
import { CellDirective } from './cell/cell.directive';
import { SelectCellComponent } from './select-cell/select-cell.component';
import { SingleActionsCellComponent } from './single-actions-cell/single-actions-cell.component';
import { TableSingleSelectCellComponent } from './single-select-cell/single-select-cell.component';
import { TableCellIndexComponent } from './index/index.component';
import { IRowClickEvent } from '../events.interfaces';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'tr[odenRow]',
    templateUrl: './row.component.html',
    styleUrls: ['./row.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    encapsulation: ViewEncapsulation.None
})
export class Row2Component
    implements OnInit, AfterContentInit, OnChanges, OnDestroy {
    // Interal use only
    _hasChildRows = false;
    _isChildRow = false;
    _level = 0;
    // Could be replaced with SelectState Enum together with select prop
    _hasIndeterminateSelectedChildren = false;
    _hasSingleActionsCell = false;
    _hasDrillDown = false;
    _tableHasSingleActionsCell = false;
    _tableHasIndexCell = false;
    _tableIndexCell = false;
    _tableHasSingleSelectCell = false;
    _childRows: Array<Row2Component> = [];
    _selectChanges: Subscription;
    _parentSubscriptions: Array<Subscription> = [];
    _index: number;
    _hasIndexCell = false;
    _hasOnClickSubscribers = false;
    private _isHidden: boolean;
    @HostBinding('class')
    _htmlClasses: string = '';
    @HostBinding('tabindex') @Input() tabIndex = 0;
    @ContentChildren(forwardRef(() => CellDirective))
    cells: QueryList<CellDirective>;
    @ContentChildren(forwardRef(() => TableCellIndexComponent))
    _indexCellComponentQueryList: QueryList<TableCellIndexComponent>;
    @ContentChildren(forwardRef(() => SelectCellComponent))
    _selectCellComponentQueryList: QueryList<SelectCellComponent>;
    _selectCellComponent: SelectCellComponent;
    @ContentChildren(forwardRef(() => TableSingleSelectCellComponent))
    _singleSelectCellComponentQueryList: QueryList<TableSingleSelectCellComponent>;
    _singleSelectCellComponent: TableSingleSelectCellComponent;
    _hasSingleSelectCell = false;
    @ContentChildren(forwardRef(() => SingleActionsCellComponent))
    _singleActionsCellComponentQueryList: QueryList<SingleActionsCellComponent>;
    _singleActionsCellComponent: SingleActionsCellComponent;
    readonly _rowUuid = UUID.create();

    @Input()
    parentId: any;
    @Input()
    rowId: any;
    @Input()
    hidden = false;
    @Input()
    data: any;

    @Input()
    set focused(val: boolean) {
        this._focused = val;
        this.setFocus();
    }

    get focused(): boolean {
        return this._focused;
    }
    @Input()
    expandedChildRows = false;
    @Output()
    onExpandChanged = new EventEmitter<boolean>();
    @Output()
    onHiddenChanged = new EventEmitter<boolean>();
    @Output() onClick = new EventEmitter<IRowClickEvent>();

    _hiddenByPagination: boolean = false;
    _parentRowComponent: Row2Component;
    _onExpandChanged$ = new Subject<boolean>();
    _currentIndex$ = new ReplaySubject<number>(1);
    _selected = false;
    _isNestedTable = false;
    private _focused: boolean;
    private _subscriptions: Array<Subscription> = [];

    constructor (
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component,
        private _changeDetectorRef: ChangeDetectorRef,
        private _tableHelper: TableHelper,
        private _elementRef: ElementRef
    ) { }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['hidden'] && !changes['hidden'].isFirstChange()) {
            this._setRowClasses();
        }
        if (changes['expandedChildRows']) {
            this._onExpandChanged$.next(this.expandedChildRows);
        }

    }
    registerToTable(): void {
        this._childRows = [];
        this._isChildRow = false;
        this._hasChildRows = false;
        this._level = 0;
        this._parentSubscriptions.forEach(s => s.unsubscribe());
        this._table._registerRow(this);
        if (this._parentRowComponent) {
            this._level = this._parentRowComponent._level + 1;
            this._parentSubscriptions.push(
                this._parentRowComponent
                    ._onExpandChanged()
                    .subscribe(() => this._setRowClasses())
            );
            this._parentSubscriptions.push(
                this._parentRowComponent.onHiddenChanged.subscribe(() =>
                    this._setRowClasses()
                )
            );
        }
        this._setRowClasses();

        this.detectChanges();
    }
    ngOnInit() {
        if (this._table._tableInitated) {
            this._table.detectChanges();
        }
        if (this.onClick.observers.length > 0) {
            this._hasOnClickSubscribers = true;
        }
        if (typeof this.rowId === 'undefined' || this.rowId === null) {
            this.rowId = this._rowUuid;
        }
        this._subscriptions.push(
            this._table._onIsNestedTableChanged().subscribe(isNestedTable => {
                this._isNestedTable = isNestedTable;
                this.detectChanges();
            })
        );
        this._subscriptions.push(
            this._table._onPaginationChanged.subscribe(() => {
                this._setRowClasses();
            })
        );
        this._subscriptions.push(
            this._table
                ._onHasSingleActionsCellChanged()
                .subscribe(hasSingleActionsCell => {
                    this._tableHasSingleActionsCell = hasSingleActionsCell;
                    this.detectChanges();
                })
        );
        this._subscriptions.push(
            this._table
                ._onHasIndexCellChanged()
                .subscribe(hasIndexCell => {
                    this._tableHasIndexCell = hasIndexCell;
                    this.detectChanges();
                })
        );
        this._subscriptions.push(
            this._table
                ._onHasSingleSelectCellChanged()
                .subscribe(hasSingleSelectCell => {
                    this._tableHasSingleSelectCell = hasSingleSelectCell;
                    this.detectChanges();
                })
        );
    }

    _addChildRow(row: Row2Component): void {
        this._childRows.push(row);
        if (!this._hasChildRows) {
            this._hasChildRows = true;
            this.detectChanges();
        }
    }

    _setParentRow(row: Row2Component): void {
        this._parentRowComponent = row;
        this._isChildRow = true;
        this.detectChanges();
    }

    ngAfterContentInit(): void {
        this._setSelectCellComponent();
        this._setSingleActionsCellComponent();
        this._setHasIndexCellComponent();
        this._setCells();
        this.detectChanges();
        this._subscriptions.push(
            this.cells.changes.subscribe(() => {
                this._setCells();
                this.detectChanges();
            })
        );
        this._subscriptions.push(
            this._selectCellComponentQueryList.changes.subscribe(() => {
                this._setSelectCellComponent();
                this.detectChanges();
            })
        );
        this._subscriptions.push(
            this._singleSelectCellComponentQueryList.changes.subscribe(() => {
                this._setSelectCellComponent();
                this.detectChanges();
            })
        );
        this._subscriptions.push(
            this._indexCellComponentQueryList.changes.subscribe(() => {
                this._setHasIndexCellComponent();
                this.detectChanges();
            })
        );
        this._subscriptions.push(
            this._singleActionsCellComponentQueryList.changes.subscribe(() => {
                this._setSingleActionsCellComponent();
                this.detectChanges();
            })
        );
        this.setFocus();
    }

    ngOnDestroy(): void {
        this._subscriptions.forEach(s => s.unsubscribe());
        if (this._selectChanges) {
            this._selectChanges.unsubscribe();
        }
        this._parentSubscriptions.forEach(s => s.unsubscribe());
    }

    _nestedColumnClicked(event?: Event): void {
        this.toggleExpandedChildren();
        if (event) {
            event.preventDefault();
        }
    }

    setFocus(): void {
        if (this.focused && this._elementRef) {
            this._elementRef.nativeElement.focus();
        }
    }

    toggleExpandedChildren(): void {
        this.setExpandedChildrenValue(!this.expandedChildRows);
        this.onExpandChanged.emit(this.expandedChildRows);
    }
    setExpandedChildrenValue(expand: boolean) {
        this.expandedChildRows = expand;
        this.getAllChildRows().forEach(childRow => childRow._setRowClasses());

        this._onExpandChanged$.next(expand);
    }

    _onExpandChanged(): Observable<boolean> {
        return this._onExpandChanged$.asObservable();
    }

    _currentIndex(): Observable<number> {
        return this._currentIndex$.asObservable();
    }

    _setSelectValueChildRows(select: boolean): void {
        this._childRows.forEach(childRow => {
            childRow._setSelectedValue(select);
        });
    }

    _setSelectedValue(select: boolean, bubble = false): void {
        const indeterminate: boolean = false;
        this._hasIndeterminateSelectedChildren = indeterminate;
        this._selected = select;
        if (this._selectCellComponent) {
            this._selectCellComponent.selected = select;
            this._selectCellComponent.indeterminate = indeterminate;
        }
        if (this._hasChildRows) {
            this._setSelectValueChildRows(select);
        }
        if (bubble) {
            this.getRootRow()._setSelectedFromChildren();
            this._table._selectedStatesChanged();
        }
        this._setRowClasses();
    }

    _setSingleSelectedValue(selected: boolean, bubble = false): void {
        this._selected = selected;
        if (this._singleSelectCellComponent) {
            this._singleSelectCellComponent.selected = selected;
        }
        if (bubble) {
            this._table._singleSelectedStatesChanged(this);
        }
        this._setRowClasses();
    }

    _setSelectCellValue(selectState: SelectedState): void {
        let indeterminate: boolean;
        let selected: boolean;
        switch (selectState) {
            case SelectedState.INTERMEDIATE:
                indeterminate = true;
                selected = false;
                break;
            case SelectedState.SELECTED:
                indeterminate = false;
                selected = true;
                break;
            case SelectedState.UNSELECTED:
                indeterminate = false;
                selected = false;
                break;
        }
        this._hasIndeterminateSelectedChildren = indeterminate;
        this._selected = selected;
        if (this._selectCellComponent) {
            this._selectCellComponent.selected = selected;
            this._selectCellComponent.indeterminate = indeterminate;
        }
    }

    _setRowVisibility(): void {
        let isHidden: boolean;
        if (this.hidden || this._hiddenByPagination) {
            isHidden = true;
        } else if (this._parentRowComponent) {
            if (
                this.getAllParents().filter(parent => parent._isHidden)
                    .length === 0 &&
                this._parentRowComponent.expandedChildRows
            ) {
                isHidden = false;
            } else {
                isHidden = true;
            }
        } else {
            isHidden = false;
        }
        if (this._isHidden !== isHidden) {
            this.onHiddenChanged.emit(isHidden);
            this._isHidden = isHidden;
        }
    }
    _setSelectedFromChildren(): void {
        if (this._hasChildRows) {
            const _previousSelectedValue = this._selected;
            const _previousIndeterminateSelectedValue = this
                ._hasIndeterminateSelectedChildren;
            this._childRows.forEach(childRowComponent => {
                childRowComponent._setSelectedFromChildren();
            });

            const selectedState = this._tableHelper.getSelectedStateFromChildRows(
                this._childRows
            );
            this._setSelectCellValue(selectedState);

            if (
                _previousSelectedValue !== this._selected ||
                _previousIndeterminateSelectedValue !==
                this._hasIndeterminateSelectedChildren
            ) {
                this.detectChanges();
            }
        }
    }

    _setRowClasses() {
        this._setRowVisibility();
        const htmlClasses: Array<string> = ['oden-row'];
        if (this._isHidden) {
            htmlClasses.push('is-hidden');
        }
        if (this._hasDrillDown) {
            htmlClasses.push('drilldown');
        }
        if (this._selected || this._hasIndeterminateSelectedChildren) {
            htmlClasses.push('selected');
        }
        htmlClasses.push('level-' + this._level);

        this._htmlClasses = htmlClasses.join(' ');
        this.detectChanges();
    }

    _setSelectCellComponent(): void {
        if (this._selectCellComponentQueryList.length > 1) {
            console.warn(
                'More than one [odenSelectCell] defined for row',
                this.rowId
            );
        }
        if (this._selectCellComponentQueryList.length > 0 && this._singleSelectCellComponentQueryList.length > 0) {
            console.warn(
                'Both [odenSelectCell] and [odenSingleSelectCell] defined for row',
                this.rowId
            );
        }
        if (this._selectChanges) {
            this._selectChanges.unsubscribe();
        }
        if (this._selectCellComponentQueryList.first) {
            this._selectCellComponent = this._selectCellComponentQueryList.first;
            this._selectChanges = this._selectCellComponent.onSelectedChanged.subscribe(
                selected => {
                    this._setSelectedValue(selected, true);
                }
            );
        } else if (this._singleSelectCellComponentQueryList.first) {
            this._singleSelectCellComponent = this._singleSelectCellComponentQueryList.first;
            this._selectChanges = this._singleSelectCellComponent.onChange.subscribe(
                selected => {
                    this._setSingleSelectedValue(selected, true);
                }
            );
            this._hasSingleSelectCell = true;
            this._table._setHasSingleSelectCell();
        } else {
            this._singleSelectCellComponent = null;
            this._hasSingleSelectCell = false;
        }
    }
    @HostListener('keydown.space', ['$event'])
    _onSpaceClick(event: KeyboardEvent) {
        if (this._elementRef.nativeElement === event.target) {
            this.toggleExpandedChildren();
            event.preventDefault();
        }
    }
    _setSingleActionsCellComponent(): void {
        if (this._singleActionsCellComponentQueryList.length > 1) {
            console.warn(
                'More than one [odenSingleActionsCell] defined for row',
                this.rowId
            );
        }
        if (this._singleActionsCellComponentQueryList.first) {
            this._singleActionsCellComponent = this._singleActionsCellComponentQueryList.first;
            this._hasSingleActionsCell = true;
        } else {
            this._singleActionsCellComponent = null;
            this._hasSingleActionsCell = false;
        }
        this._table._setHasSingleActionsCell();
    }

    _setHasIndexCellComponent(): void {
        if (this._indexCellComponentQueryList.length > 1) {
            console.warn(
                'More than one [odenindexCell] defined for row',
                this.rowId
            );
        }
        if (this._indexCellComponentQueryList.first) {
            this._hasIndexCell = true;
        } else {
            this._hasIndexCell = false;
        }
        this._table._setHasIndexCell();
    }

    _setCells(): void {
        let index = 0;
        this.cells.forEach(cell => {
            cell._setIndex(index);
            index += +cell.colspan; // might be string
        });
    }

    _setIndex(index: number) {
        if (index !== this._index) {
            this._index = index;
            this._currentIndex$.next(index);
        }
    }

    detectChanges(): void {
        this._changeDetectorRef.detectChanges();
    }
    getRootRow(): Row2Component {
        if (this._parentRowComponent) {
            return this._parentRowComponent.getRootRow();
        } else {
            return this;
        }
    }
    getAllParents(): Array<Row2Component> {
        const parents: Array<Row2Component> = [];
        let row: Row2Component = this;
        while (row._parentRowComponent) {
            row = row._parentRowComponent;
            parents.push(row);
        }
        return parents;
    }
    _activateDrillDownClass(): void {
        this._hasDrillDown = true;
        this._setRowClasses();
    }
    getAllChildRows(): Array<Row2Component> {
        let children = [...this._childRows];
        this._childRows.forEach(
            childRow =>
                (children = [...children, ...childRow.getAllChildRows()])
        );
        return children;
    }
    _onCellClick(cell: CellDirective) {
        this.onClick.emit({ cell: cell, row: this });
    }
}
