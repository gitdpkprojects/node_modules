import {
    ChangeDetectionStrategy,
    ChangeDetectorRef,
    Component,
    forwardRef,
    Inject,
    Input,
    OnChanges,
    OnInit,
    SimpleChanges,
    Output,
    EventEmitter,
    ViewChild,
    TemplateRef,
} from '@angular/core';
import { Subscription } from 'rxjs';
import { UnSub } from '../../../../core/classes/subscription.decorator';
import { Row2Component } from '../row.component';
import { ModalHelperService } from '../../../modal';
import { DialogConfig, DialogComponent } from '../../../modal/dialog';
import { ModalActionItem } from '../../../../core/models';
import { UUID } from '../../../../core/helpers/uuid.class';
import { IMoveRowEvent } from '../../events.interfaces';
import { TranslateService } from '@ngx-translate/core';

@Component({
    // tslint:disable-next-line:component-selector
    selector: '[odenIndexCell]',
    templateUrl: './index.component.html',
    styleUrls: ['./index.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
})
@UnSub()
export class TableCellIndexComponent implements OnInit, OnChanges {
    @Input() index: number;
    @Output() onMoveRequest = new EventEmitter<IMoveRowEvent>();
    _dialog: DialogComponent;
    _displayIndex: number;
    _uuid = UUID.create();
    _moveAction: ModalActionItem;
    @ViewChild('moveTemplate') _moveTemplate: TemplateRef<any>;
    private _subscriptions: Array<Subscription> = [];
    private _newIndex;
    constructor (
        @Inject(forwardRef(() => Row2Component)) private _row: Row2Component,
        private _changeDetectorRef: ChangeDetectorRef,
        private _modalHelperService: ModalHelperService,
        private _translate: TranslateService
    ) {
    }

    ngOnInit() {
        this._subscriptions.push(
            this._row._currentIndex().subscribe(() => {
                this._setIndexCount();
                this._changeDetectorRef.detectChanges();
            })
        );
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes['index']) {
            this._setIndexCount();
        }
    }

    _setIndexCount() {
        if (typeof this.index === 'undefined') {
            this._displayIndex = this._row._index + 1;
        } else {
            this._displayIndex = this.index;
        }
    }

    _requestMoveRow(element: HTMLElement): void {
        this._translate.get([
            'ODEN.COMMON.OK',
            'ODEN.COMMON.CANCEL',
        ]).subscribe((res) => {
        this._moveAction = this._moveAction || new ModalActionItem({ label: res['ODEN.COMMON.OK'], action: 'move', disabled: true});
        const dialogConfig = new DialogConfig({ template: this._moveTemplate,
            actions: [
                    new ModalActionItem({ label: res['ODEN.COMMON.CANCEL'], action: 'cancel', cssClass: 'discard'}),
                    this._moveAction],
            });
        this._dialog = this._modalHelperService.createDialog(dialogConfig, null, true, element);
        this._dialog.onAction.subscribe((action) => {
            if (action.action === 'cancel') {
                this._dialog.close();
            }
            if (action.action === 'move' && !isNaN(this._newIndex)) {
              this._emitMoveEvent();
            }
        });
    });
    }

    _emitMoveEvent(): void {
        this.onMoveRequest.emit({newIndex: this._newIndex, oldIndex: this._displayIndex});
        this._dialog.close();
    }

    _indexChanged(input: string): void {
        const inputValue = parseInt(input, 0);
        this._newIndex = null;
        if (inputValue !== this._displayIndex && !isNaN(inputValue)) {
            this._moveAction.disabled = false;
            this._newIndex = inputValue;
        } else {
            this._moveAction.disabled = true;
        }
      }

      onEnterPressed(): void {
        if (!this._moveAction.disabled) {
            this._emitMoveEvent();
        }
      }
}
