import {
    ChangeDetectionStrategy,
    ChangeDetectorRef,
    Component,
    forwardRef,
    Inject,
    Input,
    OnChanges,
    OnDestroy,
    OnInit,
    ViewEncapsulation,
    Output,
    EventEmitter
} from '@angular/core';
// import * as _ from 'lodash';
import { Subscription } from 'rxjs';
import { PaginationData } from '../../pagination';
import { Table2Component } from '../table.component';

@Component({
    selector: 'oden-table-pagination',
    templateUrl: './table-pagination.component.html',
    styleUrls: ['./table-pagination.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush,
    encapsulation: ViewEncapsulation.None
})
export class TablePaginationComponent implements OnInit, OnChanges, OnDestroy {
    private _subscriptions: Array<Subscription> = [];
    @Input() totalItems: number; // The number of items in your data
    _totalItems: number;
    @Input() itemsPerPageAlternatives: Array<number> = [10, 25, 50, 100]; // Alternatives for pagination
    @Input() itemsPerPage: number = this.itemsPerPageAlternatives[1]; // Default pagination
    @Input() currentPage = 0; // The page on which the pagination starts with.
    @Output() onPagination = new EventEmitter<PaginationData>();
    paginationData = new PaginationData({
        totalItems: this._totalItems,
        currentPage: this.currentPage,
        itemsPerPageAlternatives: this.itemsPerPageAlternatives,
        itemsPerPage: this.itemsPerPage
    });
    private _useInternalPagination = true;

    constructor(
        @Inject(forwardRef(() => Table2Component))
        private _table: Table2Component,
        private _changeDetectorRef: ChangeDetectorRef
    ) { }
    ngOnInit(): void {
        this._table
            ._onRowComponentsChanged().first()
            .subscribe(() => this._updatePagination());
        this._subscriptions.push(
            this._table._onRowsChanged.subscribe(() => {
                this._updatePagination(true);
            })
        );
    }
    ngOnChanges(): void {
        // All changes lead here
        if (typeof this.totalItems === 'undefined') {
            this._useInternalPagination = true;
        } else {
            this._useInternalPagination = false;
        }
        this._updatePagination();
    }
    ngOnDestroy(): void {
        this._subscriptions.forEach(s => s.unsubscribe());
    }

    pagination(paginationData: PaginationData): void {
        this.currentPage = paginationData.currentPage;
        this.itemsPerPageAlternatives = paginationData.itemsPerPageAlternatives;
        this.itemsPerPage = paginationData.itemsPerPage;
        if (this._useInternalPagination) {
            this._table._paginationChanged(this);
        }
        this.onPagination.emit(paginationData);
    }

    _updatePagination(reset = false): void {
        if (this._useInternalPagination) {
            this._totalItems = this._table.getRootRows()
                .filter(row => !row.hidden).length;
        } else {
            this._totalItems = this.totalItems;
        }
        this.paginationData.totalItems = this._totalItems;
        // Reset the current page
        this.currentPage = reset && this._useInternalPagination ? 0 : this.currentPage;
        this.paginationData.currentPage = this.currentPage;
        this.paginationData.itemsPerPageAlternatives = this.itemsPerPageAlternatives;
        this.paginationData.itemsPerPage = this.itemsPerPage;
        if (this._useInternalPagination) {
            this._table._paginationChanged(this);
        }
        this._changeDetectorRef.detectChanges();
    }
}
