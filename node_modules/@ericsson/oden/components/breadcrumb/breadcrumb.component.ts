import { Component, HostBinding, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { BreadcrumbItem } from '../../core/models';
import { IconComponent } from '../icon/icon.component';
import { ApplicationService } from '../../core/services/application.service';
import { ITaskShortcut } from '../../core/interfaces/task-shortcut.interface';
import { PostMessageService } from '../../core/services/postmessage.service';
import { Subscription } from 'rxjs/Subscription';
import { UnSub } from '../../core/classes';

@Component({
    selector: 'cui-breadcrumb',
    templateUrl: './breadcrumb.component.html',
    styleUrls: ['./breadcrumb.component.scss'],
    providers: [IconComponent],
    encapsulation: ViewEncapsulation.None
})
@UnSub()
export class BreadcrumbComponent implements OnChanges {
    @Input() items: Array<BreadcrumbItem>;
    @Input() backLinkVisibility: boolean;
    @HostBinding('class.cui-breadcrumb') addClass: boolean = true;
    @HostBinding('class.single-item') isSingleItem: boolean = false;
    private snackbarMessage: string = '';
    private _subscriptions: Array<Subscription> = [];
    parent: string;
    displayItems: Array<BreadcrumbItem> = [];
    backLinkItem: BreadcrumbItem = new BreadcrumbItem();

    constructor(
        private _applicationService: ApplicationService,
        private _postMessageService: PostMessageService
    ) {
        this._subscriptions.push(this._postMessageService.incomingMessage$.subscribe((data: ITaskShortcut) => {
            if (data && data.parent) {
                this.parent = data.parent;
            }
            if (data && data.backMessage) {
                this.snackbarMessage = data.backMessage;
            }
        }));
    }

    /**
     * Sort breadcrumbs on load and on changes
     */
    ngOnChanges(changes: SimpleChanges): void {
        this._sortBreadcrumb();
        if (changes['items'] && !changes['items'].firstChange) {
            this.displayItems.forEach((item: BreadcrumbItem, i: number) => {
                if (!this.items[i]) {
                    item.hidden = true;
                }
            });
            // timeout so the old items can fade out first
            if (this.items.length < this.displayItems.length) {
                setTimeout(() => {
                    this.fixAnimations(changes);
                }, 800);
            } else {
                this.fixAnimations(changes);
            }
        } else {
            this.displayItems = this.items;
            this.isSingleItem = this.displayItems.length === 1;
        }


        // Set the back link breadcrumb item
        if (this.displayItems.length > 1 && this.backLinkVisibility) {
            this.backLinkItem = this.displayItems[this.displayItems.length - 1];
        }
    }

    /**
     * Set breadcrumbs to hidden or not depending on if it existed before or not
     * @param {SimpleChanges} changes
     */
    fixAnimations(changes: SimpleChanges): void {
        this.displayItems = this.items;
        this.displayItems.forEach((item: BreadcrumbItem, i: number) => {
            item.hidden = !changes['items'].previousValue[i] || changes['items'].previousValue[i].id !== item.id;
        });
        setTimeout(() => {
            this.displayItems.forEach((item: BreadcrumbItem) => {
                item.hidden = false;
            });
            this.isSingleItem = this.displayItems.length === 1;
        });
    }

    /**
     * Navigates to the absolute path.
     * @param item
     */
    navigateToRoute(item: BreadcrumbItem): void {
        if (item.clickable || item.clickable === undefined) {
            this._applicationService.navigateToPath(item.path);
        }
    }

    /**
     * Navigates to the one level up in the hierarchy.
     * @param item
     */
    navigateToParent(item: BreadcrumbItem): void {
        this._applicationService.navigateToPath(item.path);
    }

    /**
     * Send an postmessage reply which will close this iframe from external-task.component.ts
     */
    backToParent(): void {
        this._postMessageService.reply({
            snackbar: this.snackbarMessage,
            isCancel: true
        });
    }

    /**
    * Sort breadcrumb after each item's ID, ascending order.
    */
    private _sortBreadcrumb(): void {
        if (this.items) {
            this.items.sort((a, b) => a.id - b.id);
        }
    }
}
