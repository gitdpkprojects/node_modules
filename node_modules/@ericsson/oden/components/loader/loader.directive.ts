import {
    Directive,
    Input,
    OnInit,
    ComponentFactoryResolver,
    ViewContainerRef, DoCheck, HostBinding, OnDestroy
} from '@angular/core';
import { LoaderComponent } from './loader.component';
import { LoaderService } from './loader.service';
import { TabViewService } from '../tab-view/tab-view.service';
import { LoaderConfig } from './loader.config';

@Directive({
    selector: '[cui-loader],[cuiLoader]'
})

export class LoaderDirective implements OnInit, DoCheck, OnDestroy {
    @Input() cuiLoader: LoaderConfig | boolean;
    loader: LoaderComponent;
    previousVisible: boolean;
    attachedHTMLElements: Array<Element> = [];
    @HostBinding('class.cui-loader-wrapper') addClass: boolean = true;

    constructor(private _componentFactoryResolver: ComponentFactoryResolver,
                private _loaderService: LoaderService,
                private _viewContainer: ViewContainerRef,
                private _tabService: TabViewService) {

    }

    /**
     * Inject the loader component inside the element with the [cui-loader] attribute
     */
    ngOnInit(): void {
        this._loaderService.containerRef = this._viewContainer;
        this.loader = this.injectLoader();
        const sibling: HTMLElement = this.loader.getElement().nativeElement.previousSibling;
        this.attachedHTMLElements.push(sibling.insertBefore(this.loader.getElement().nativeElement, sibling.firstChild));
        if (this.cuiLoader instanceof LoaderConfig) {
            if (this.cuiLoader.text) {
                this.loader.setText(this.cuiLoader.text);
            }
            if (this.cuiLoader.isTabLoader) {
                this._tabService.loader = this.loader;
                this.loader.getElement().nativeElement.parentElement.className += ' tab-loader-wrapper';
            }
            if (this.cuiLoader.addToElement) {
                const innerChild = sibling.querySelector(this.cuiLoader.addToElement);
                if (innerChild) {
                    this.attachedHTMLElements.push(innerChild.insertBefore(this.loader.getElement().nativeElement, innerChild.firstChild));
                }
            }
        }
        // Save our previous visibility
        this.previousVisible = this.isVisible();
        if (this.previousVisible) {
            this.loader.show();
        }
    }

    /**
     * Check if the loader is visible or not, depending on if the input is a boolean or a LoaderConfig object
     * @returns {boolean}
     */
    private isVisible(): boolean {
        if (typeof this.cuiLoader === 'boolean') {
            return <boolean> this.cuiLoader;
        }
        if (this.cuiLoader instanceof LoaderConfig) {
            return <boolean> this.cuiLoader.visible;
        }
        throw new Error(`
            Please provide either a boolean or a LoaderConfig model as input to the [cuiLoader] directive!
        `);
    }

    /**
     * Make sure to toggle the loader when cuiLoader boolean changes
     */
    ngDoCheck(): void {
        if (!this.loader || (this.cuiLoader instanceof LoaderConfig && this.cuiLoader.isTabLoader)) {
            return;
        }
        if (this.cuiLoader instanceof LoaderConfig) {
            if (this.cuiLoader.text) {
                this.loader.setText(this.cuiLoader.text);
            }
        }

        const isVisible = this.isVisible();
        // Let's not show/hide something unless it's actually changed
        if (isVisible !== this.previousVisible) {
            const visibilityChanged = isVisible ? this.loader.show() : this.loader.hide();
            if (visibilityChanged) {
                this.previousVisible = isVisible;
            }
        }
    }

    /**
     * Create and return the LoaderComponent
     * @returns {LoaderComponent}
     */
    injectLoader(): LoaderComponent {
        const factory = this._componentFactoryResolver.resolveComponentFactory(LoaderComponent);
        const loader = this._loaderService.containerRef.createComponent(factory);
        return loader.instance;
    }

    /**
     * Detaches cui-loader from the dom and clears loader object
     */
    ngOnDestroy(): void {
        this.attachedHTMLElements.forEach((attachedHTMLElement) => {
            if (attachedHTMLElement.parentElement) {
                attachedHTMLElement.parentElement.removeChild(attachedHTMLElement);
            }
        });
        this.loader = null;
    }
}
