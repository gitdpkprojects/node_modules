/* tslint:disable:component-selector */
import {
    Component,
    ElementRef,
    HostBinding,
    HostListener,
    Input,
    OnChanges,
    Renderer2,
    ViewEncapsulation,
    NgZone
} from '@angular/core';

import { DOMHelper } from '../../core/helpers/dom.helper';
import { IFocusShiftBlock } from '../modal/focus-shift/focus-shift-block.interface';

@Component({
    selector: 'button[cui-button]',
    templateUrl: 'button.component.html',
    styleUrls: ['button.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class ButtonComponent implements OnChanges, IFocusShiftBlock {
    @Input() value: string;
    @Input() icon: string;
    @Input() icon_align: string;
    elementRef: ElementRef;
    _isMouseDown: boolean = false;
    @HostBinding('class.cui-button') addClass: boolean = true;

    /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */
    @HostBinding('class.cui-button-focus') _isKeyboardFocused: boolean = false;
    constructor(private _element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {
        this.elementRef = _element;
    }

    /**
     * Set/remove class align-right on change if icon_align is/is not 'right'
     */
    ngOnChanges(): void {
        if (this.icon_align === 'right') {
            this._renderer.addClass(this._element.nativeElement, 'align-right');
        } else {
            this._renderer.removeClass(this._element.nativeElement, 'align-right');
        }
    }

    /**
     * When a user clicks a button, add a ripple effect that gets removed after 2 seconds.
     * @param event
     */
    @HostListener('mousedown', ['$event'])
    public onClick(event): void {

        // Set _isMouseDown to true when a user puts the mouse down ("clicks") a button.
        // Set it to false after 100 milliseconds.
        // We only *show* the focus style when focus has come to the button via the keyboard.
        // Without doing this, the button continues to look :active after clicking.
        // @see http://marcysutton.com/button-focus-hell/
        this._isMouseDown = true;
        setTimeout(() => { this._isMouseDown = false; }, 100);

        // Apply the ripple (if the element is still a part of the DOM)
        if (!document.body.contains(this._element.nativeElement)) {
            return;
        }
        this._zone.runOutsideAngular(() => {
            DOMHelper.rippleEffect(this._element.nativeElement, event);
        });
    }

    /**
     * Mark button as keyboardfocused if the action is not from a mouse event
     * @private
     */
    @HostListener('focus')
    _setKeyboardFocus(): void {
        this._isKeyboardFocused = !this._isMouseDown;
    }

    /**
     * Set button as not keyboard focused when we leave/blur the button.
     * @private
     */
    @HostListener('blur')
    _removeKeyboardFocus(): void {
        this._isKeyboardFocused = false;
    }

}
