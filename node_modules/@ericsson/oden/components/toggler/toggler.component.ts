/* tslint:disable:no-input-rename */
import { animate, AUTO_STYLE, state, style, transition, trigger } from '@angular/animations';
import { AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, ViewChild, ViewEncapsulation } from '@angular/core';
import { ANIMATION } from './../../core/constants/animation.constants';
import { DOMHelper } from './../../core/helpers/dom.helper';
import { TogglerBreakPointDirective } from './toggler-breakpoint.directive';

@Component({
    selector: 'cui-toggler',
    templateUrl: 'toggler.component.html',
    styleUrls: ['toggler.component.scss'],
    encapsulation: ViewEncapsulation.None,
    animations: [
        trigger('toggle', [
            state('expanded',
                style({ height: AUTO_STYLE })
            ),
            state('collapsed',
                style({ height: '{{height}}px' }),
                { params: { height: 0 } }
            ),
            transition('void => *', []),
            transition('* => *', [
                animate(`${ANIMATION.DUR3} ${ANIMATION.EASE_IN_OUT_QUINT}`)
            ])
        ])
    ]
})
export class TogglerComponent implements AfterViewInit {
    @HostBinding('class.cui-toggler') addClass: boolean = true;

    @ViewChild('container') public container: ElementRef;
    @ContentChildren(TogglerBreakPointDirective) _breakpoint: TogglerBreakPointDirective[] = [];

    public collapsedHeight: number = 0;
    public animationState: string = 'expanded';
    private _expanded: boolean = true;

    constructor() { }

    /**
     * Public variable for controlling toggler state
     */
    @Input()
    public set expanded(val: boolean) {
        this._expanded = val;
        this.collapsedHeight = this._getCollapsedHeight();
        this.animationState = val !== false ? 'expanded' : 'collapsed';
    }

    public get expanded(): boolean {
        return this._expanded;
    }

    /**
     * Returns toggler icon depending on state
     */
    public get togglerIcon() {
        return this.expanded ? 'chevron-up' : 'chevron-down';
    }

    /**
     * Expands / collapsed toggler depending on previous state
     */
    public toggle() {
        this.expanded = !this.expanded;
    }

    /**
     * Returns the collapse height based on if toggle-breakpoint is used or not.
     */
    private _getCollapsedHeight() {
        const breakpoint: TogglerBreakPointDirective = this._getFirstActiveBreakpoint();
        if (breakpoint && breakpoint.active) {
            const containerOffset: number = DOMHelper.getElementPageOffset(this.container.nativeElement).y;
            const breakpointOffset: number = DOMHelper.getElementPageOffset(breakpoint.elementRef.nativeElement).y;
            return breakpointOffset - containerOffset + 1; // Add 1 for the border, otherwise the checkbox:active effect get cut off.
        }
        return 0;
    }

    private _getFirstActiveBreakpoint() {
        if (this._breakpoint.length) {
            return this._breakpoint.find((item: TogglerBreakPointDirective) => item.active === true);
        }
        return null;
    }

    ngAfterViewInit() {
        // Forces to set the correct height of the toggler after content has been checked
        setTimeout(() => {
            this.expanded = this._expanded;
            this.animationState = this.expanded !== false ? 'expanded' : 'collapsed';
        }, 1000);
    }
}
