import {
    Component, HostBinding, Input,
    OnChanges, OnInit, AfterViewInit, HostListener,
    ViewEncapsulation, ElementRef, SimpleChanges, NgZone
} from '@angular/core';
import { IRuleCondition, IRuleAction, IRuleEvent } from '../../core/interfaces';
import { LAYOUT, SIZING } from '../../constants';
import { BlockTree } from '../../core/models/block-tree.model';

@Component({
    selector: 'cui-rule-container',
    templateUrl: 'rule-container.component.html',
    styleUrls: ['rule-container.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class RuleContainerComponent implements OnInit, OnChanges, AfterViewInit {
    @HostBinding('class.cui-rule-container') addClass: boolean = true;
    @Input() conditions: Array<IRuleCondition> = [];
    @Input() action: IRuleAction;
    @Input() event: IRuleEvent;
    @Input() blockTree: BlockTree;
    @HostBinding('class.vertical') @Input() layout: LAYOUT = LAYOUT.HORIZONTAL;
    private _initialLayout: LAYOUT;

    get allConditions(): Array<IRuleCondition> {
        return this.conditions.filter((_rule: IRuleCondition) => !_rule.isAnyOperator);
    }
    get anyConditions(): Array<IRuleCondition> {
        return this.conditions.filter((_rule: IRuleCondition) => _rule.isAnyOperator);
    }

    constructor(private _elementRef: ElementRef,
        private _ngZone: NgZone) { }

    /**
     * Make sure the layout is vertical if you're using the Block Tree input.
     */
    ngOnInit(): void {
        if (this.blockTree) {
            this.layout = LAYOUT.VERTICAL;
        }
        // Keep the copy of layout value which is given as input by user
        this._initialLayout = this.layout;
    }

    /**
     * Keep the copy of layout value which is given as input by user
     * when user changes the layout input
     * @param {SimpleChanges} changes
     */
    ngOnChanges(changes: SimpleChanges): void {
        if (changes['layout']) {
            if (this.blockTree) {
                this.layout = LAYOUT.VERTICAL;
            }
            this._initialLayout = this.layout;
        }
    }

    /**
     * Change the horizontal rules to vertical when area is below X px in width.
     */
    ngAfterViewInit(): void {
        this._ngZone.onStable.first().subscribe(() => {
            this.onResize();
        });
    }

    /**
     * Host listener for window resize event
     */
    @HostListener('window:resize', ['$event'])
    onResize() {
        const width = this._elementRef.nativeElement.clientWidth;
        this.layout = (width <= SIZING.RULECONTAINER_WIDTH) ? LAYOUT.VERTICAL : this._initialLayout;
    }
}
