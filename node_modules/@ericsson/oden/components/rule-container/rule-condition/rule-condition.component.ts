import {
    Component, HostBinding, Input,
    OnChanges, ViewEncapsulation, SimpleChanges, OnInit
} from '@angular/core';
import { LAYOUT } from '../../../core/constants';
import { WhitelabelService } from '../../../core/services/whitelabel.service';
import { COLORWHITELABEL } from '../../../core/constants/color.whitelabel';
import { UnSub } from '../../../core/classes';
import { Subscription } from 'rxjs';

@UnSub()
@Component({
    selector: 'cui-rule-condition',
    templateUrl: 'rule-condition.component.html',
    styleUrls: ['rule-condition.component.scss'],
    encapsulation: ViewEncapsulation.None
})
export class RuleConditionComponent implements OnChanges, OnInit {
    @HostBinding('class.cui-rule-condition') addClass: boolean = true;

    @Input() set color(color: string) {
        if ( color) {
            this._color = color;
        }
        this._getWhitelabel();
    }
    get color(): string {
        return this._color;
    }

    @Input() label: string;
    @Input() description: string;
    @Input() operator: string;
    @Input() isNotOperator: boolean = false;
    @Input() isAnyOperator: boolean = false;
    @Input() enableOperator: boolean;
    @Input() margin: number;
    @Input() layout: LAYOUT;
    @HostBinding('class.visible-arrow') @Input() enableArrow: boolean;
    @HostBinding('style.margin') styles: string;

    private _color: string = '';
    private _subscriptions: Array<Subscription> = [];
    constructor(private _whitelabelService: WhitelabelService) {
    }
    ngOnInit() {
        this._getWhitelabel();
        this._subscriptions.push(this._whitelabelService._whitelabelingLoaded.subscribe(() => {
            this._getWhitelabel();
        }));
    }


    /**
     * Set the default values when optional value
     * is not given
     * @param {SimpleChanges} changes
     */
    ngOnChanges(changes: SimpleChanges): void {
        if (changes['enableOperator']) {
            this.enableOperator = (typeof this.enableOperator !== 'undefined') ?
                this.enableOperator : true;
        }
        if (changes['enableArrow']) {
            this.enableArrow = (typeof this.enableArrow !== 'undefined') ? this.enableArrow : false;
        }
        if (changes['margin']) {
            this.margin = (typeof this.margin !== 'undefined') ? this.margin : null;
            this._setStyles();
        }
        if (changes['layout']) {
            this._setStyles();
        }
    }

    /**
     * Set styles based on rule layout
     */
    private _setStyles(): void {
        if (this.margin && this.margin >= 0) {
            // If layout is horizontal will change margin left and right
            if (this.layout === LAYOUT.HORIZONTAL) {
                this.styles = `auto ${this.margin}px`;
            } else {
                // If layout is vertical will change margin top and bottom
                this.styles = `${this.margin}px 0px`;
            }
        }
    }
    private _getWhitelabel() {
        if (!this._color) {
            this._color = this._whitelabelService.getPropertyValue(COLORWHITELABEL.MINOR);
        }
    }
}
