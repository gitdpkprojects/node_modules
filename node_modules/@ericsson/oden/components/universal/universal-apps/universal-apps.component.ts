import {
    Component, HostBinding, HostListener, OnDestroy, ViewEncapsulation, Renderer2, forwardRef, SkipSelf, Optional, AfterViewInit, NgZone
} from '@angular/core';
import { ActivatedRoute, NavigationEnd, GuardsCheckEnd, Router } from '@angular/router';
import { UnSub } from '../../../core/classes/subscription.decorator';
import { NavigationHelper } from '../../../core/helpers/navigation.helper';
import { UniversalService } from '../universal.service';
import { IUniversalApp } from '../../../core/interfaces/universal-app.interface';
import { TAB_VIEW } from '../../tab-view/tab-view.constants';
import { TabViewService } from '../../tab-view/tab-view.service';
import { UniversalTabView } from '../universal-tabs/universal-tab-view';
import { ORDER } from '../../../core/constants/order.constants';
import { SIZING } from '../../../core/constants/sizing.constants';
import { ListControllerOrderItem } from '../../list-controller/list-controller-order/list-controller-order-item.model';
import { DOMHelper } from '../../../core/helpers/dom.helper';
import { TranslateService } from '@ngx-translate/core';
import * as _ from 'lodash';
import { ApplicationStorageHelper } from '../../../core/helpers/application-storage.helper';
import { ActionItem } from '../../../core/models/action-item.model';
import { ElementOverlayConfig } from '../../../core/models/element-overlay-config.model';
import { ELEMENT_OVERLAY_STATE } from '../../../core/constants/element-overlay-state.constants';
import { MenuCardItem } from '../../menu-card/menu-card.component';
import { Divider } from '../../../core/models/divider.model';
import { ApplicationService } from '../../../core/services/application.service';
import { Observable } from 'rxjs/Observable';
import { map } from 'rxjs/operators';
import { AppHeaderService } from '../../app-header/app-header.service';
import { Base } from '../../../core/classes/base';
import { GroupTitleAttribute } from '../../../core';

@Component({
    selector: 'cui-universal-apps',
    templateUrl: 'universal-apps.component.html',
    styleUrls: ['universal-apps.component.scss'],
    encapsulation: ViewEncapsulation.None,
    animations: [TAB_VIEW.ANIMATION],
    providers: [{ provide: Base, useExisting: forwardRef(() => UniversalAppsComponent) }]
})
@UnSub()
export class UniversalAppsComponent extends UniversalTabView implements AfterViewInit, OnDestroy {
    @HostBinding('class.cui-universal-apps') addClass: boolean = true;
    @HostBinding('class.sitemap') showSitemap: boolean;

    window_width: number = window.innerWidth
        || document.documentElement.clientWidth
        || document.body.clientWidth;
    menuCardView: string = '';
    apps: Array<IUniversalApp> = [];
    displayApps: Array<IUniversalApp> = [];
    appsCol1: Array<IUniversalApp> = [];
    appsCol2: Array<IUniversalApp> = [];
    appsCol3: Array<IUniversalApp> = [];
    appsCol4: Array<IUniversalApp> = [];
    groupedApps: Array<{
        groupName: string,
        apps: Array<IUniversalApp>,
        colData: [Array<IUniversalApp>,
            Array<IUniversalApp>,
            Array<IUniversalApp>,
            Array<IUniversalApp>
        ],
        attributes: Array<GroupTitleAttribute>
    }> = [];
    favorites: Array<string> = [];
    favoritesEnabled: boolean = false;
    loadingId: string;
    appFilterString: string = '';
    filterCategories: Array<ActionItem | Divider> = [];
    filterCategory: ActionItem;
    filterGroups: Array<ActionItem> = [];
    filterGroup: ActionItem;
    appsOrderItems: Array<ListControllerOrderItem> = [];
    currentAppsOrder: ListControllerOrderItem = null;
    private _listener;

    visible: boolean = false;

    overlayConfig: ElementOverlayConfig =
        new ElementOverlayConfig({
            state: ELEMENT_OVERLAY_STATE.NONE,
            inlinePlaceholder: true,
            actions: [{
                label: '',
                action: 'clear_filters',
                disabled: false
            }]
        });

    constructor(
        tabViewService: TabViewService,
        activatedRoute: ActivatedRoute,
        private _router: Router,
        private _applicationService: ApplicationService,
        private _universalService: UniversalService,
        private _translate: TranslateService,
        private _renderer: Renderer2,
        private _appHeader: AppHeaderService,
        private _zone: NgZone,
        @SkipSelf() @Optional() public parent: Base
    ) {
        super(tabViewService, activatedRoute);

        this._subscription = this._router.events.subscribe(event => {
            setTimeout(() => {
                if (event instanceof NavigationEnd) {
                    this.loadingId = null;
                    setTimeout(() => {
                        this._renderer.addClass(document.querySelector('.menu-card-menu'), 'visible');
                    }, 1000);
                }
                if (event instanceof GuardsCheckEnd) {
                    this._universalService.hideUniversalOverlay();
                }
            }, this._universalService.minLoadDisplay);
        });

        this.showSitemap = this._universalService.showSitemap;

        this._subscriptions.push(this._universalService.onAppsChange.subscribe((apps) => {
            this.apps = apps;
            this.setMenuCardsView();
        }));
        this._subscriptions.push(this._universalService.onShowUniversalOverlay.subscribe(() => {
            this.setMenuCardsView();
        }));
        this._subscriptions.push(this._universalService.onFavoritesChange.subscribe(favorites => {
            this.favorites = favorites;
        }));
        this._subscriptions.push(this._universalService.onHideUniversalOverlay.subscribe(() => {
            Array.from(document.querySelectorAll('.cui-menu-card')).forEach((element: HTMLElement) => {
                if (element.querySelector('.loading')) {
                    const button = <HTMLElement>element.querySelector('.menu-card-header-button.active');
                    if (button) {
                        this._renderer.addClass(element, 'no-transition');
                        button.click();
                        setTimeout(() => {
                            this._renderer.removeClass(element, 'no-transition');
                        }, 1000);
                    }
                }
            });
        }));

        this._translate.stream([
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.APPLICATION',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.AREA',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.ALL_AREAS',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.FAVORITES',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.NO_RESULTS',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.DO_YOU_WANT_TO_CLEAR',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.YES_CLEAR',
            'ODEN.COMPONENTS.UNIVERSAL_LAYER.NOTHING'
        ]).subscribe((res: Array<string>) => {
            this.overlayConfig.label = res['ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.NO_RESULTS'];
            this.overlayConfig.text = res['ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.DO_YOU_WANT_TO_CLEAR'];
            this.overlayConfig.actions[0].label = res['ODEN.COMPONENTS.UNIVERSAL_LAYER.FILTER.YES_CLEAR'];
            this.appsOrderItems = [
                new ListControllerOrderItem({ label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.APPLICATION'], field: 'name' }),
                new ListControllerOrderItem({ label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.AREA'], field: 'category' })
            ];
            this.filterGroups = [
                new ActionItem({
                    label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.AREA'],
                    action: 'area'
                }),
                new ActionItem({
                    label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.NOTHING'],
                    action: 'none'
                })];
            this.filterGroup = this.filterGroups[0];
            Observable
                .combineLatest(
                    this._universalService.onCategoriesChange,
                    this._universalService.favoritesEnabled
                )
                .pipe(map(([categories, favoritesEnabled]) => {
                    const newCategories = [];
                    newCategories.push(new ActionItem({ label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.ALL_AREAS'], action: 'all' }));
                    newCategories.push(new Divider());
                    if (favoritesEnabled) {
                        newCategories.push(new ActionItem({
                            label: res['ODEN.COMPONENTS.UNIVERSAL_LAYER.FAVORITES'],
                            action: 'favorites'
                        }));
                        newCategories.push(new Divider());
                    }
                    categories.forEach((category: string) => {
                        newCategories.push(
                            new ActionItem({ label: category })
                        );
                    });
                    return [newCategories, favoritesEnabled];
                }))
                .subscribe(([categories, favoritesEnabled]: [Array<ActionItem>, boolean]) => {
                    this.favoritesEnabled = favoritesEnabled;
                    if (this.filterCategory) {
                        const findChosenCategory = categories.filter((item: ActionItem) =>
                            item.label === this.filterCategory.label);
                        if (findChosenCategory.length) {
                            this.filterCategory = findChosenCategory[0];
                        }
                    }
                    this.filterCategories = categories;
                    if (!this.filterCategory && categories.length) {
                        this.filterCategory = categories[0];
                    }
                });
        });
    }

    ngAfterViewInit(): void {
        this._zone.onStable.first().subscribe(() => {
            this.setViewFromSaved();
            this.setMenuCardsView();
        });
    }

    onElementOverlayAction(evt): void {
        if (evt.action === 'clear_filters') {
            this.clearFilters();
        }
    }

    clearFilters(): void {
        ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_CATEGORY', 'all');
        ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_GROUP', 'area');
        this._universalService.appFilterString = '';
        this.appFilterString = '';
        this.filterCategory = <ActionItem>this.filterCategories[0];
        this.onCategoryFilter(this.filterCategory);
    }

    setViewFromSaved(): void {
        if (ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.ORDER') !== '') {
            // Gets remembered default order
            const savedOrder = this.appsOrderItems
                .filter(item => item.field === ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.ORDER'));

            if (savedOrder.length > 0) {
                // Gets remembered order direction
                savedOrder[0].order = parseInt(ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.ORDER.DIRECTION')
                    || '0', 10);
                this.currentAppsOrder = savedOrder[0];
            }
        } else {
            this.currentAppsOrder = null; // sets default to null. display order will be based on IA
        }

        // Toggles remembered toggle for Sitemap
        if (ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.SHOW_SITEMAP') !== '') {
            this.toggleSitemap();
        }

        // restore group by choice
        if (ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_GROUP') !== '') {
            // Gets remembered default order
            const savedGroupBy = this.filterGroups
                .filter(item => item.action === ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_GROUP'));

            if (savedGroupBy.length > 0) {
                this.filterGroup = savedGroupBy[0];
            }
        }
        // restore users show/category choice
        const savedShowBy = ApplicationStorageHelper.getLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_CATEGORY');
        if (savedShowBy !== '') {
            // set current/selected filtercatgory to storage value
            const savedFilterCatgory = this.filterCategories.filter((t) => t.label === savedShowBy);
            if (savedFilterCatgory && savedFilterCatgory.length > 0) {
                this.filterCategory = savedFilterCatgory[0] as ActionItem;
            }
        }
    }

    onAppsOrderChange(order: ListControllerOrderItem) {
        if (order) {
            this.currentAppsOrder = order;
            ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.ORDER', order.field);
            ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.ORDER.DIRECTION', order.order);
        }
        this.setMenuCardsView();
        this._universalService.triggerFilterApps();
    }

    onMenuCardClick(_evt: MouseEvent, app: IUniversalApp): void {
        if (app && app.routes && app.routes.length > 0) {
            return;
        } else if (app.path && this._router.url !== app.path) {
            this.clickMenuItem(app, app.id);
        }
    }

    get menuCardClickable() {
        return !this.showSitemap;
    }

    toggleSitemap(): void {
        this.showSitemap = !this.showSitemap;
        this._universalService.showSitemap = !this.showSitemap;
        ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.SHOW_SITEMAP', !this.showSitemap);
        this.setMenuCardsView();
    }

    onCategoryFilter(action: ActionItem): void {
        this.filterCategory = action;
        this._universalService.showOnlyFavorites = action.action === 'favorites';
        ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_CATEGORY', action.action);
        this.setMenuCardsView();
        this._universalService.triggerFilterApps();
    }

    onGroupFilter(action: ActionItem): void {
        this.filterGroup = action;
        ApplicationStorageHelper.setLocalStorage('ODEN.UNIVERSAL_LAYER.APPS.FILTER_GROUP', action.action);
        this.updateSortOptions();
        this.setMenuCardsView();
    }

    updateSortOptions() {
        // disable sort by 'app' option for when group by is 'area'
        if (this.filterGroup && this.filterGroup.action && this.filterGroup.action.toLowerCase() === 'area') {
            // check if current filter group is area
            // then disable 'app' option from apps order
            const sortByAppOption = this.appsOrderItems.find((t) => t.field === 'name');
            const sortByAreaOption = this.appsOrderItems.find((t) => t.field === 'category');
            sortByAppOption.disabled = true;
            this.currentAppsOrder = sortByAreaOption;
        } else {
            // else reset disabled property on all orderItems
            this.appsOrderItems.forEach((t) => t.disabled = false);
        }
    }

    onFilterApps(string: string): void {
        this._universalService.appFilterString = string;
        this.appFilterString = string;
        this.setMenuCardsView();
        this._universalService.triggerFilterApps();
    }

    clickMenuItem(item: any, id: string = item.path): void {
        if (this._router.isActive(item.path || '', false) && this._universalService.isOpen) {
            NavigationHelper.navigateToPath(item.path, this._router);
            NavigationHelper.switchView(item);
            this._appHeader.overrideSiteTitle.next('');
            return;
        }
        if (!item.newWindow) {
            this.loadingId = id;
        }
        NavigationHelper.switchView(item);

        // Introducing SELFHOST check for non-angular applications
        const isInternalUrl = NavigationHelper.isInternalURL(item.path);
        const routePath = NavigationHelper.getVaildRoutePath(item.path);
        const openInNewWindow = item.newWindow;

        if (item.label && item.externalApp) {
            this._appHeader.overrideSiteTitle.next(item.label);
        } else {
            this._appHeader.overrideSiteTitle.next('');
        }

        if (item.externalApp && !openInNewWindow) {
            NavigationHelper.navigateToRoute(item, this._router);
            this._universalService.hideUniversalOverlay();
        } else if (openInNewWindow) {
            // Treat as external URL and open in new window
            window.open(routePath);
        } else if (isInternalUrl) {
            // Treat as internal URL and open in this window
            // Wait for main menu closing animation
            this.navigateToRoute(item);
        } else {
            // Treat as external URL and open in this window. If we're in a childTask we should also use this method.
            NavigationHelper.navigateWithWindowLocation(routePath);
        }
    }

    /**
     * Navigates to the MenuCardItem's path.
     * @param item
     */
    navigateToRoute(item: MenuCardItem): void {
        this._applicationService.navigateToPath(item.path);
    }

    highlightLetters(): void {
        Array.from(document.querySelectorAll('.menu-card-searchable')).forEach((menuItem: HTMLElement) => {
            menuItem.innerHTML = DOMHelper.highlightString(this._universalService.appFilterString, menuItem.innerText);
        });
    }

    trackBy({ }, item: IUniversalApp) {
        return item.id;
    }

    /**
     * Sets the view of the app cards depending on screen width
     * and / or if sitemap is toggled
     */
    @HostListener('window:resize')
    setMenuCardsView(): void {
        this.loadingId = null;

        this.displayApps = _.cloneDeep(this.apps).filter((app: IUniversalApp) => !this.filterCategory
            || this.filterCategory.action === 'all' || this.filterCategory.label === app.category
            || this.filterCategory.action === 'favorites');
        // If user is filtering on freetext
        if (this._universalService.appFilterString !== '') {
            this.displayApps = this.displayApps.filter((app: IUniversalApp) => {
                const string = this._universalService.appFilterString.toLowerCase();
                return app.name.toLowerCase().indexOf(string) > -1 ||
                    app.category.toLowerCase().indexOf(string) > -1 ||
                    app.routes.filter((child) => child.label.toLowerCase().indexOf(string) > -1).length > 0;
            });
        }
        setTimeout(() => {
            this.highlightLetters();
        }, 1);
        // If user is filtering on favorites
        if (this.filterCategory && this.filterCategory.action === 'favorites') {
            this.displayApps = this.displayApps.filter((app: IUniversalApp) => {
                app.routes = app.routes.filter((child) => child.favorite);
                return app.favorite || app.routes.length > 0;
            });
        }
        this.overlayConfig.state = this.displayApps.length ? ELEMENT_OVERLAY_STATE.NONE : ELEMENT_OVERLAY_STATE.NOTICE;

        this.window_width = window.innerWidth
            || document.documentElement.clientWidth
            || document.body.clientWidth;

        // Sort apps by order property
        if (this.currentAppsOrder) {
            this.displayApps = this.displayApps.sort((a, b) => {
                if (this.currentAppsOrder.order === ORDER.DESCENDING) {
                    [a, b] = [b, a]; // Reverse order
                }

                return a[this.currentAppsOrder.field].toString().localeCompare(b[this.currentAppsOrder.field].toString());
            });
        }

        if (!this.showSitemap) {
            const colData = this._getColumnData(this.displayApps);
            this.appsCol1 = colData[0];
            this.appsCol2 = colData[1];
            this.appsCol3 = colData[2];
            this.appsCol4 = colData[3];
        }

        // Group by area
        this.groupedApps = [];

        if (this.filterGroup && this.filterGroup.action === 'area') {
            const groupedApps = _.mapValues(_.groupBy(this.displayApps, 'category'),
                glist => glist.map(app => app));
            Object.keys(groupedApps).forEach(key => {
                let apps = groupedApps[key];
                if (this.currentAppsOrder) {
                    // sort apps by name, only if currentAppsOrder is set
                    apps = groupedApps[key].sort((a, b) => a.name.localeCompare(b.name));
                }
                const colData = this._getColumnData(apps);
                this.groupedApps.push({
                    groupName: key,
                    apps: apps,
                    colData: colData,
                    attributes: [new GroupTitleAttribute({
                        label: this._translate.instant('ODEN.COMPONENTS.UNIVERSAL_LAYER.GROUP_LABEL', { COUNT: apps.length })
                    })]
                });
            });
        }
    }

    /**
     * Get Column data
     */
    private _getColumnData(apps: Array<IUniversalApp>): [Array<IUniversalApp>,
        Array<IUniversalApp>,
        Array<IUniversalApp>,
        Array<IUniversalApp>] {
        // Update order number after we have ordered to make sure we dont skip or double any number
        for (let i = 0; i < apps.length; i++) {
            apps[i].order = i;
        }

        let menuCardView = '';
        let appsCol1: Array<IUniversalApp> = [];
        let appsCol2: Array<IUniversalApp> = [];
        let appsCol3: Array<IUniversalApp> = [];
        let appsCol4: Array<IUniversalApp> = [];

        if (this.window_width >= SIZING.LARGE_SCREEN) { // large window
            menuCardView = 'grid_large';

            if (this.menuCardView !== menuCardView) {
                // re-arrange array according to nr of cols
                appsCol1 = apps.filter((app: IUniversalApp) => app.order % 4 === 0);
                appsCol2 = apps.filter((app: IUniversalApp) => app.order % 4 === 1);
                appsCol3 = apps.filter((app: IUniversalApp) => app.order % 4 === 2);
                appsCol4 = apps.filter((app: IUniversalApp) => app.order % 4 === 3);
            }

        } else if (this.window_width >= SIZING.MEDIUM_SCREEN) { // medium window
            menuCardView = 'grid_medium';

            if (this.menuCardView !== menuCardView) {
                // re-arrange array according to nr of cols
                appsCol1 = apps.filter((app: IUniversalApp) => app.order % 2 === 0);
                appsCol2 = apps.filter((app: IUniversalApp) => app.order % 2 === 1);
                appsCol3 = [];
                appsCol4 = [];
            }
        } else { // small window (376px)
            menuCardView = 'grid_small';

            if (this.menuCardView !== menuCardView) {
                // re-arrange array according to nr of cols
                appsCol1 = apps;
                appsCol2 = [];
                appsCol3 = [];
                appsCol4 = [];
            }
        }

        return [appsCol1, appsCol2, appsCol3, appsCol4];
    }

    ngOnDestroy(): void {
        if (typeof (this._listener) !== 'undefined') {
            this._listener();
        }
    }
}
