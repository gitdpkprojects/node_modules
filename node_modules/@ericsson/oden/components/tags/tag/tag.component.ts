import {
    Component, EventEmitter, HostBinding, Input, OnChanges, Output, SimpleChanges,
    ViewEncapsulation
} from '@angular/core';
import { Tag } from '../../../core/models/tag.model';

@Component({
    selector: 'cui-tag',
    templateUrl: 'tag.component.html',
    styleUrls: ['tag.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class TagComponent implements OnChanges {
    @Input() readonly: boolean = false;
    @Input() tag: Tag;

    @Output() onRemove: EventEmitter<Tag> = new EventEmitter<Tag>();

    @HostBinding('tabindex') @Input() tabIndex: number = 0;
    @HostBinding('class') get htmlClass(): string {
        let className = `cui-tag is-${this.tag.type}`;
        if (this.tag.bold) {
            className += ' is-bold';
        }
        if (this.readonly) {
            className += ' read-only';
        }
        return className;
    }
    private _prevTabIndex: number;

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['tabIndex']) {
            this._prevTabIndex = changes['tabIndex'].currentValue;
        }
        if (changes['readonly']) {
            this.tabIndex = changes['readonly'].currentValue === true ? -1 : this._prevTabIndex;
        }
    }

    /**
     * Emits onRemove event with active Tag
     * @param event
     */
    remove(event): void {
        event.stopPropagation();
        this.onRemove.emit(this.tag);
    }
}
