import {
    Component,
    HostBinding,
    ViewEncapsulation,
    ElementRef,
    Input,
    Output,
    EventEmitter
} from '@angular/core';
import { STATE } from '../../core/constants/state.constants';
import { SystembarActionGroup } from '../systembar';

@Component({
    selector: 'cui-entity-version',
    templateUrl: 'entity-version.component.html',
    styleUrls: ['entity-version.component.scss'],
    encapsulation: ViewEncapsulation.None
})

export class EntityVersionComponent {
    @HostBinding('class.cui-entity-version') addClass: boolean = true;
    @Input() state: STATE;
    @Input() showVersion: boolean = true;
    @Input() version: string;
    @Input() extra: number;
    @Input() created: string;
    @Input() modified: string;
    @Input() showValidFrom: boolean = true;
    @Input() validFrom: string;
    @Input() showValidTo: boolean = true;
    @Input() validTo: string;
    @Input() extraTooltip: string;
    @Input() useDateTimeInputs: boolean = false;
    @Input() validFromRequired: boolean = true;
    @Input() validToRequired: boolean = true;
    @Input() errorFromMessage: string;
    @Input() errorToMessage: string;
    @Input() readOnlyTooltip: string;
    @Input() actions: Array<SystembarActionGroup> = [[]];
    @Output() onValidFromChange: EventEmitter<Event> = new EventEmitter<Event>();
    @Output() onValidFromBlur: EventEmitter<Event> = new EventEmitter<Event>();
    @Output() onValidFromFocus: EventEmitter<Event> = new EventEmitter<Event>();
    @Output() onValidToChange: EventEmitter<Event> = new EventEmitter<Event>();
    @Output() onValidToBlur: EventEmitter<Event> = new EventEmitter<Event>();
    @Output() onValidToFocus: EventEmitter<Event> = new EventEmitter<Event>();

    elementRef: ElementRef;
    private _readOnly: boolean = false;

    /**
     * Emits onValidFromChange event when valid from field is changed
     * @param event: Event
     */
    onFromChange(event: Event): void {
        this.onValidFromChange.emit(event);
    }

    /**
     * Emits onValidFromBlur event when valid from field is blurred
     * @param event: Event
     */
    onFromBlur(event: Event): void {
        this.onValidFromBlur.emit(event);
    }

    /**
     * Emits onValidFromFocus event when valid from field is focused
     * @param event: Event
     * @param field: string
     */
    onFromFocus(event: Event): void {
        this.onValidFromFocus.emit(event);
    }

    /**
     * Emits onValidToChange event when valid to field is changed
     * @param event: Event
     */
    onToChange(event: Event): void {
        this.onValidToChange.emit(event);
    }

    /**
     * Emits onValidToBlur event when valid to field is blurred
     * @param event: Event
     */
    onToBlur(event: Event): void {
        this.onValidToBlur.emit(event);
    }

    /**
     * Emits onValidToFocus event when valid to field is focused
     * @param event: Event
     * @param field: string
     */
    onToFocus(event: Event): void {
        this.onValidToFocus.emit(event);
    }
    @Input()
    set readOnly(status: boolean) {
        this._readOnly = status;
    }
    get readOnly(): boolean { return this._readOnly; }

    /**
     * Gets a string representation for state.
     * @returns {string}
     */
    isPublished(): boolean {
        return this.state === STATE.PUBLISHED;
    }
}

