export class NumberHelper {

    /**
     * Coerces a data-bound value (typically a string) to a number.
     * @param value
     * @param fallbackValue
     * @returns {number}
     */
    static coerceNumberProperty(value: any, fallbackValue = 0) {
        return isNaN(parseFloat(value as any)) || isNaN(Number(value)) ? fallbackValue : Number(value);
    }

    /**
     * Prefixes a number with 0 if it's only 1 character long. 1 becomes '01' etc.
     * @param number
     * @returns {string}
     */
    static fixLeadingZero(number: number): string {
        let string = number.toString();
        if (string.length === 1) {
            string = '0' + string;
        }
        return string;
    }

    /**
     * Get procentage value of total value
     * @param {number} total    - Value to get procentage value from
     * @param {number} procent  - How much procentage of the value to get
     */
    static getProcentValueOf(total: number, procent: number): number {
        return (total / 100) * procent;
    }


    /**
     * Returns true if parameter is a number, otherwise false.
     * @param number
     */
    static isNumber(number: number): boolean {
        return typeof number === 'number';
    }
}
