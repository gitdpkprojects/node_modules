import { StringHelper } from './string.helper';

export class ArrayHelper {
    /**
     * Moves an item within an array to a new position. IE:
     * ArrayHelper.move([1, 2, 3], 0, 2) will return [2, 3, 1]
     * @param array
     * @param fromIndex
     * @param toIndex
     * @return {T[]}
     */
    static move<T>(array: Array<T>, fromIndex: number, toIndex: number) {
        if (fromIndex < 0) {
            throw new Error(`From index ${fromIndex} is out of bounds`);
        }
        if (toIndex > array.length - 1) {
            throw new Error(`To index ${toIndex} is out of bounds`);
        }
        array.splice(toIndex, 0, array.splice(fromIndex, 1)[0]);
    }

    /**
     * Searches several keys in an array for a given value and filters the array based on that
     * @param {Array<T>} array
     * @param {string} search The search term
     * @param {Array<string>} keys
     * @returns {T[]}
     */
    static filterOnKeys(array: Array<any>, search: string, keys: Array<string>) {
        search = search.toLowerCase();
        return array.filter((group) =>
            keys.some(id => group[id] && StringHelper.removeTags(group[id]).toLowerCase().includes(search))
        );
    }

    /**
     * Search a key in an array for a given value and filters the array based on that
     * @param {Array<T>} dataSet
     * @param {string} searchString The search term
     * @returns {T[]}
     */
    static matchArray(dataSet: Array<any>, searchString: string) {
        return dataSet.filter(item => item.value.toLowerCase().indexOf(searchString.toLowerCase()) !== -1);
    }

    /**
     * Checks if two arrays are equal in values to eachother.
     * @param {Array<T>} a  - First Array
     * @param {Array<T>} b  - Second Array
     * @returns {boolean}
     */
    static areArraysEqual(a: Array<any>, b: Array<any>): boolean {
        return JSON.stringify(a) === JSON.stringify(b);
    }
}
