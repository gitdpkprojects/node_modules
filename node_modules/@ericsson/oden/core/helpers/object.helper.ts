export class ObjectHelper {
    /**
     * Return object property from string.
     *
     * myobject = {
     *     title: 'Global entities',
     *     data: {
     *         label: 'published',
     *         value: 20
     *     }
     * }
     *
     * ObjectHelper.getObjectProperty(myObject, 'data.label') returns 'published
     *
     * @param object
     * @param property
     * @return any
     */
    static getObjectProperty(object: Object, property: string): any {
        // no object or property passed
        if (typeof object === 'undefined' || typeof property === 'undefined') {
            return undefined;
        }

        // index of next property split
        const index = property.indexOf('.');

        // property split found; recursive call
        if (index > -1) {
            // get object at property (before split), pass on remainder
            return ObjectHelper.getObjectProperty(object[ property.substring(0, index) ], property.substr(index + 1));
        }

        // no split; get property
        return object[property];
    }

    /**
     * Merges two objects
     *
     * myobject1 = {
     *     title: 'Global entities'
     * }
     * myobject2 = {
     *     value: '20'
     * }
     *
     * ObjectHelper.mergeObjects(myobject1, myobject2) modifies myobject1 to:
     * {
     *     title: 'Global entities'
     *     value: 20
     * }
     *
     * @param obj1
     * @param obj2
     */
    static mergeObjects(obj1, obj2): void {
        for (const prop in obj2) {
            if (obj2.hasOwnProperty(prop)) {
                obj1[prop] = obj2[prop];
            }
        }
    }


    /**
     * Converts an object to a array and puts all the values into an array (skips the key values)
     * @param {Object} map
     * @returns {Array<any>}
     */
    static objectMapToArray(map): Array<any> {
        if (!map || typeof map !== 'object') {
            return [];
        }
        return Object.keys(map).map(key => map[key]);
    }

    /**
     * Calculates how many properties an object has. Works like length for arrays
     */
    static size(obj: Object): number {
        let size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                size++;
            }
        }
        return size;
    }
}
