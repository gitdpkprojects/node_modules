import * as moment from 'moment';
import 'moment/locale/en-gb';
import { NumberHelper } from './number.helper';
import { DATE_FORMAT } from '../constants/date.constants';
const momentInstance = (typeof moment === 'object') ? (<any>moment).default : moment;

export class DateHelper {

    /**
     * Checks if date string is a valid date (31st february isn't for example)
     * @param {string} dateString
     * @returns {boolean}
     */
    static isValidDate(dateString: string): boolean {
        const regExp = /^(\d{4})-(\d{2})-(\d{2})$/;
        return dateString !== '' && regExp.test(dateString) && momentInstance(dateString, DATE_FORMAT.YEAR_MONTH_DAY).isValid();
    }

    /**
     * Returns true if input is a Date object
     * @param obj
     * @returns {boolean}
     */
    static isDateObj(obj: any): boolean {
        return (Object.prototype.toString.call(obj) === '[object Date]');
    }

    /**
     * Checks if string is a valid HH:ii(:ss) string
     * @param time
     * @param checkForSeconds
     * @returns {string|boolean}
     */
    static isValidTime(time: string, checkForSeconds?: boolean): boolean {
        let regExp = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
        if (checkForSeconds) {
            regExp = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/;
        }
        return time !== '' && regExp.test(time);
    }

    /**
     * Checks if dateTimeString is in proper format (YYYY-MM-DD HH:ii(:ss))
     * @param dateTimeString
     * @param checkForSeconds
     * @returns {string|boolean}
     */
    static isValidDateTime(dateTimeString: string, checkForSeconds: boolean = false): boolean {
        let regExp = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})$/;
        if (checkForSeconds) {
            regExp = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;
        }
        return dateTimeString !== '' && regExp.test(dateTimeString) &&
            this.isValidDate(dateTimeString.substring(0, 10)) &&
            this.isValidTime(dateTimeString.substring(11), checkForSeconds);
    }

    /**
     * Returns HH:ii:ss from a Date() object
     * @param {Date} date
     * @param {boolean} includeSeconds
     * @returns {string}
     */
    static getTimeStringFromDate(date: Date, includeSeconds = true): string {
        const h = date.getHours();
        const m = date.getMinutes();
        const s = date.getSeconds();
        let timeString = `${NumberHelper.fixLeadingZero(h)}:${NumberHelper.fixLeadingZero(m)}`;
        if (includeSeconds) {
            timeString += `:${NumberHelper.fixLeadingZero(s)}`;
        }
        return timeString;
    }

    /**
     * Returns YYYY-MM-DD (HH:MM:SS) from a Date() object
     * @param date
     * @param includeTime
     * @returns {string}
     */
    static getStringFromDate(date: Date, includeTime: boolean = true): string {
        return momentInstance(date).format(DATE_FORMAT.YEAR_MONTH_DAY + (includeTime ? ' HH:mm:ss' : ''));
    }

}
