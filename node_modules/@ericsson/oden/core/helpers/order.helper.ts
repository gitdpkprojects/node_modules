import { ORDER } from '../constants/order.constants';
import { DateHelper } from '../helpers/date.helper';
/**
 * A none-typed class which helps with sorting of arrays.
 * The arrays should contain objects for each function in here,
 * and the field you want to sort on should be present in each object in the array.
 */
export class OrderHelper {

    /**
     * Sorts an array of objects by date.
     * Date can be a string - but for performance it should be of type Date.
     * Even faster is if you use unix timestamps and use orderByNumber.
     * @param data
     * @param field
     * @param sortOrder
     */
    static orderByDate(data: Array<any>, field: string, sortOrder: ORDER): void {
        const order = sortOrder === ORDER.ASCENDING ? 1 : -1;
        data.sort((a, b) => {
            let aDate = a[field];
            let bDate = b[field];
            if (typeof(aDate) === 'string') {
                aDate = new Date(aDate);
            }
            if (typeof(bDate) === 'string') {
                bDate = new Date(bDate);
            }
            if (!DateHelper.isDateObj(aDate) || !DateHelper.isDateObj(bDate)) {
                return order;
            }
            return (aDate.getTime() - bDate.getTime()) * order;
        });
    }

    /**
     * Sorts an array of objects by numeric value.
     * @param data
     * @param field
     * @param sortOrder
     */
    static orderByNumber(data: Array<any>, field: string, sortOrder: ORDER): void {
        const order = sortOrder === ORDER.ASCENDING ? 1 : -1;
        data.sort((a, b) => {
            return (parseInt(a[field], 0) - parseInt(b[field], 0)) * order;
        });
    }

    /**
     * Sorts an array of objects by string value.
     * @param data
     * @param field
     * @param sortOrder
     */
    static orderByString(data: Array<any>, field: string, sortOrder: ORDER): void {
        const order = sortOrder === ORDER.ASCENDING ? 1 : -1;
        data.sort((a, b) => {
            return a[field].localeCompare(b[field]) * order;
        });
    }
}
