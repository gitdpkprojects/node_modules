import { Renderer2 } from '@angular/core';

export default class AnimationHelper {
    /**
     * Helper method that returns a promise based on when CSS3 animations are done or not.
     * @param element
     * @param property - CSS property to listening to
     * @return {Promise}
     */
    public static animationCompleted(element: HTMLElement, property?: string): Promise<TransitionEvent> {
        const transitionEvent: string = AnimationHelper.getCSSTransitionEvent(element);

        if (transitionEvent) {
            return new Promise((resolve) => {
                const onFinish = (event: TransitionEvent) => {
                    if (property && event.propertyName === property) {
                        element.removeEventListener(transitionEvent, onFinish);
                        resolve(event);
                    } else if (!property) {
                        element.removeEventListener(transitionEvent, onFinish);
                        resolve(event);
                    }
                };
                element.addEventListener(transitionEvent, onFinish);
            });
        } else {
            return Promise.reject('Could\'nt find or determine transition event on ' + element.tagName);
        }
    }
    /**
     * Detects what CSS3 transition event the current used browser is using.
     * @param element
     * @return {string}
     * @private
     */
    public static getCSSTransitionEvent(element: HTMLElement): string {
        const transitions = {
            'transition': 'transitionend',
            'OTransition': 'oTransitionEnd',
            'MozTransition': 'transitionend',
            'WebkitTransition': 'webkitTransitionEnd'
        };

        for (const transition in transitions) {
            if (element.style[transition] !== undefined ) {
                return transitions[transition];
            }
        }
        return null;
    }

    /**
     * Animate items with delayed interval
     * @param {Renderer2} renderer
     * @param {Array<HTMLElement>} elements
     * @param {number} interval
     * @param {boolean} delayFirst
     */
    public static animateItemsStepped(
        renderer: Renderer2,
        elements: Array<HTMLElement>,
        interval: number = 25,
        delayFirst: boolean = true,
        className: string = 'before-visible'
    ): Promise<void> {
        return new Promise(resolve => {
            let timer = interval;
            const lastIndex = elements.length - 1;
            elements.forEach((el: HTMLElement, i) => {
                if (i === 0 && !delayFirst) {
                    if (el.classList.contains(className)) {
                        renderer.removeClass(el, className);
                    } else {
                        renderer.addClass(el, className);
                    }
                    if (i === lastIndex) {
                        resolve();
                    }
                } else {
                    setTimeout(() => {
                        if (el.classList.contains(className)) {
                            renderer.removeClass(el, className);
                        } else {
                            renderer.addClass(el, className);
                        }
                        if (i === lastIndex) {
                            resolve();
                        }
                    }, timer);
                    timer += interval;
                }
            });
        });
    }


}
