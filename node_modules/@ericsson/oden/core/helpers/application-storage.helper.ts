export class ApplicationStorageHelper {
    /**
     * Sets browser cookie
     * @param name - Name of the cookie
     * @param value - Value of the cookie
     * @param expires - Number of days before it expires
     */
    static setCookie(name: string, value: any, expires: number) {
        const d = new Date();
        d.setTime(d.getTime() + (expires * 24 * 60 * 60 * 1000));
        const exp = 'expires=' + d.toUTCString();
        document.cookie = name + '=' + value + ';' + exp + ';path=/';
    }

    /**
     * Gets the value of a cookie, returns empty string if no value.
     * @param name - Cookie name
     */
    static getCookie(name): string {
        const cookieName = name + '=';
        const decodedCookie = decodeURIComponent(document.cookie);
        const ca = decodedCookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(cookieName) === 0) {
                return c.substring(cookieName.length, c.length);
            }
        }
        return '';
    }

    /**
     * Deletes browser cookie
     * @param name - Name of the cookie
     */
    static deleteCookie(name: string) {
        document.cookie = name + '=; Max-Age=-99999999;';
    }

    /**

    /**
     * Returns local storage as a string
     *
     * @param name
     * @returns {string}
     */
    static getLocalStorage(name): string {
        return localStorage.getItem(name) ? localStorage.getItem(name) : '';
    }

    /**
     * Sets local storage as a string
     *
     * @param {string} name
     * @param value
     */
    static setLocalStorage(name: string, value: any): void {
        if (value instanceof Object) {
            value = JSON.stringify(value);
        }
        localStorage.setItem(name, value);
    }

    /**
     * Gets local storage string as an object
     *
     * @param name
     * @returns {any}
     */
    static getParsedLocalStorage(name: string): any {
        return this.getLocalStorage(name) === '' || !this.getLocalStorage(name) ? {} : JSON.parse(this.getLocalStorage(name));
    }

    /**
     * Clears all local storage
     */
    static clearAllLocalStorage(): void {
        localStorage.clear();
    }
}
