import { Pipe, PipeTransform } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
export interface IHighlightProperties {
  regExp: string;
  options: string;
}

/**
 * Usage:
 * <p [innerHTML]="'String to be modified' | search: string | IHighlightProperties | RegExp">
 *
 * The highlight pipe accepts arguments of multiple types.
 * string:
 *      A regex-valid string that will be used to to create a regex instance with /gi options and used to search the text.
 * regex:
 *      A regex instance that will be used to search the text.
 * IHighlightProperties:
 *      A object containing regex: string and optional options: string.
 *      A new regex instance will be created with these inputs. If no option is present, /gi will be used.
 *
 * Cannot be chained.
 *
 * Examples:
 * <p [innerHTML]="'Basic string input that matches this but not that' | cuiHighlight:'this'"></p>
 *
 * <p [innerHTML]="'Only the first I will be highlighted' | cuiHighlight:{regExp: 'i', options: 'i'}"></p>
 *
 * <p [innerHTML]="'Here is all I selected because it defaults to gi options for RegExp' | cuiHighlight:{regExp: 'i'}"></p>
 *
 * <p [innerHTML]="'Here we use an ´advanced´ regex defined in TS' | cuiHighlight:regex"></p>
 *
 */
@Pipe({ name: 'cuiHighlight' })
export class CuiHighlightPipe implements PipeTransform {
    constructor(private _domSantizer: DomSanitizer) { }

    /**
     * Adds a <span> with highlighted class in your source where search is a match.
     * @param {string} text
     * @param {string | IHighlightProperties | RegExp} search
     * @returns {string | SafeHtml}
     */
    transform(text: string, search: string | IHighlightProperties | RegExp): string | SafeHtml {
        let regex: RegExp;
        if (typeof search === 'object') {
            if (search instanceof RegExp) {
                regex = search;
            } else {
                if (typeof (search as IHighlightProperties).regExp === 'string') {
                    if (search.options) {
                        regex = new RegExp(search.regExp, search.options);
                    } else {
                        regex = new RegExp(search.regExp, 'gi');
                    }
                }
            }
        } else if (typeof search === 'string' && search !== '') {
            regex = new RegExp(search, 'gi');
        }
        if (regex) {
            return this._domSantizer.bypassSecurityTrustHtml(text.replace(regex, (match) => `<span class="highlighted">${match}</span>`));
        } else {
            return text;
        }
    }
}
