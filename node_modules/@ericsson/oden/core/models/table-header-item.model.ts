import { ITableHeaderItem } from '../interfaces/table-header.interface';
import { ORDER } from '../constants/order.constants';
import { EDIT_TYPE } from '../constants/edit-type.constants';
import { ALIGNMENT } from '../constants/alignment.constants';
import { ORDER_TYPE } from '../constants/order-type.constants';
import { FIELD_TYPE } from '../constants/field-type.constants';

/**
 * Simple implementation of ITableHeader
 */
export class TableHeaderItem implements ITableHeaderItem {
    label: string;
    order?: ORDER;
    field: string;
    orderType?: ORDER_TYPE;
    orderField?: string;
    /** @deprecated use templates! */
    fieldType?: FIELD_TYPE;
    sortOrders?: ORDER[]; // Limits sorting to specific set of sort orders
    icon?: string; // Optional icon to display next to the header
    tooltip?: string; // Shows up if you hover the header
    align?: ALIGNMENT = ALIGNMENT.LEFT; // Align Left, right och center
    width?: string; // Sets width of the column. in pixels or percent. for example: '150px' or '25%'
    hidden?: boolean; // Sets hidden state for column
    overflowed?: boolean; // Set internally by table component
    sticky?: boolean;
    /** @deprecated use templates! */
    editData?: any;
    /** @deprecated use templates! */
    editField?: string;
    /** @deprecated use templates! */
    editRequired?: boolean;
    /** @deprecated use templates! */
    editPlaceholder?: string;
    /** @deprecated use templates! */
    editType?: EDIT_TYPE;

    constructor(obj: Partial<TableHeaderItem> = {}) {
        Object.assign(this, obj);
    }
}
