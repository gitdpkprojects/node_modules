import { UUID } from '../helpers/uuid.class';
import { ActionItem } from './action-item.model';
import { BlockTreeBranchLeaf } from './block-tree-branch-leaf.model';
import { BlockTree } from './block-tree.model';
import { Divider } from './divider.model';
import { Tag } from './tag.model';
import { BlockTreeState } from './block-tree-state.model';

export class BlockTreeBranch {
    actions?: Array<ActionItem | Divider> = [];
    children?: Array<BlockTreeBranch | BlockTreeBranchLeaf> = [];
    color?: string;
    data?: any;
    filterChildren?: Array<BlockTreeBranch | BlockTreeBranchLeaf> = [];
    icon?: string = null;
    iconTooltip?: string = '';
    id: string = `btb-${UUID.create()}`;
    isDraggable?: boolean = true;
    isDroppable?: boolean = true;
    isDroppableAfter?: boolean = true;
    isDroppableBefore?: boolean = true;
    isExpanded?: boolean = true;
    isOperator?: boolean = false;
    isSelectable?: boolean = true;
    isSelected?: boolean = false;
    matchesFilter?: boolean = false;
    maxChildren?: number = 0; // 0 = unlimited
    newlyCreated?: boolean = false;
    parent?: BlockTree | BlockTreeBranch;
    selectLabel?: string;
    showItemsCount?: boolean = true;
    subtitle?: string;
    switcherValue?: any;
    switchLabels?: Array<String> = [];
    tags?: Array<Tag> = [];
    title?: string = 'Untitled';
    state: BlockTreeState = new BlockTreeState();
    constructor(obj: Partial<BlockTreeBranch> = {}) {
        Object.assign(this, obj);
    }
}
