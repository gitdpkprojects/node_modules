import { Injectable, Inject, OnDestroy } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { Observable } from 'rxjs/Observable';
import { IWindowSize, ScreenSize } from '../interfaces/window-size';
import { SIZING } from '../constants/sizing.constants';

@Injectable()
export class ResizeService implements OnDestroy {
    readonly resize$: BehaviorSubject<IWindowSize>;
    private _subscriptions: Array<Subscription> = [];
    constructor(@Inject('windowObject') private _window: Window) {
        this.resize$ = new BehaviorSubject({
            width: this._window.innerWidth,
            height: this._window.innerHeight,
            size: this.getSize(this._window.innerWidth)
        });
        this._subscriptions.push(
            Observable.fromEvent(window, 'resize')
                .debounceTime(100)
                .map((event: Event) => {
                    const element: Window = event.target as Window;
                    return <IWindowSize>{
                        width: element.innerWidth,
                        height: element.innerHeight,
                        size: this.getSize(this._window.innerWidth)
                    };
                })
                .distinctUntilChanged()
                .subscribe(windowSize => {
                    this.resize$.next(windowSize);
                })
        );
    }
    getSize(width: number): ScreenSize {
        if (width <= SIZING.MEDIUM_SCREEN) {
            return ScreenSize.SMALL;
        }
        if (width > SIZING.MEDIUM_SCREEN && width < SIZING.LARGE_SCREEN) {
            return ScreenSize.MEDIUM;
        }
        if (width >= SIZING.LARGE_SCREEN) {
            return ScreenSize.LARGE;
        }
        return ScreenSize.LARGE;
    }
    ngOnDestroy(): void {
        this._subscriptions.forEach(subscription => {
            subscription.unsubscribe();
        });
    }
}
