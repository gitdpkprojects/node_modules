import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ITaskShortcut } from '../interfaces/task-shortcut.interface';

@Injectable()
export class PostMessageService {
    private _parentEvent: MessageEvent | null;
    private _incomingMessage: BehaviorSubject<ITaskShortcut> = new BehaviorSubject(null);
    private _payload: any = null;
    public readonly incomingMessage$: Observable<ITaskShortcut> = this._incomingMessage.asObservable();

    constructor() {
        window.addEventListener('message', event => this._handleIncoming((event)));
        if (window.parent !== window) {
            window.parent.postMessage('LISTENER_ESTABLISHED', '*');
        }
    }

    private _handleIncoming(event) {
        if (!event.data.isOden) {
            return;
        }
        // assign this._event only if its null, to avoid overwriting
        this._parentEvent = this._parentEvent || event;
        this._incomingMessage.next(event.data);
        // Add a base tag to head when Oden is opened as an external task
        const base = document.createElement('base');
        base.setAttribute('target', '_parent');
        document.querySelector('head').appendChild(base);
    }

    /**
     * Set payload to be attached on next reply
     * Will be unset on reply
     * @param data any
     */
    public set payload(data: any) {
        this._payload = data;
    }

    /**
     * Replies to parent task (if any) with an arbitrary object
     * @param {Object} message
     */
    reply(message: Partial<ITaskShortcut> = {}): void {
        if (this._parentEvent) {
            message.isOden = true;
            if (this._payload) {
                message.payload = this._payload;
                this._payload = null;
            }
            this._parentEvent.source.postMessage(message, this._parentEvent.origin);
        }
    }
}
