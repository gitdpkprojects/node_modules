import {Injectable, isDevMode} from '@angular/core';
import {HammerGestureConfig} from '@angular/platform-browser';
import { IHammerInstance, IRecognizer, IRecognizerStatic} from '../interfaces/gesture.interface';
import * as Hammer from 'hammerjs';

/* Adjusts configuration of our gesture library, Hammer. */
@Injectable()
export class GestureService extends HammerGestureConfig {
    private _hammer: any = typeof window !== 'undefined' ? Hammer : null;

    /* List of new event names to add to the gesture support list */
    events: string[] = this._hammer ? [
            'longpress',
            'slide',
            'slidestart',
            'slideend',
            'slideright',
            'slideleft'
        ] : [];

    constructor() {
        super();
        this._hammer = (typeof this._hammer === 'object') ? (<any>this._hammer).default : this._hammer;
        if (!this._hammer && isDevMode()) {
            console.warn(
                'Could not find HammerJS. Certain Oden components may not work correctly.'
            );
        }
    }

    /**
     * Builds Hammer instance manually to add custom recognizers
     * @param element Element to which to assign the new HammerJS gestures.
     * @returns Newly-created HammerJS instance.
     */
    buildHammer(element: HTMLElement): IHammerInstance {
        const mc = new this._hammer(element);

        // Default Hammer Recognizers.
        const pan = new this._hammer.Pan();
        const swipe = new this._hammer.Swipe();
        const press = new this._hammer.Press();

        // Notice that a HammerJS recognizer can only depend on one other recognizer once.
        // Otherwise the previous `recognizeWith` will be dropped.
        const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);
        const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});

        // Overwrite the default `pan` event to use the swipe event.
        pan.recognizeWith(swipe);

        // Add customized gestures to Hammer manager
        mc.add([swipe, press, pan, slide, longpress]);

        return mc as IHammerInstance;
    }

    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */
    private _createRecognizer(base: IRecognizer, options: any, ...inheritances: IRecognizer[]) {
        const recognizer = new (base.constructor as IRecognizerStatic)(options);

        inheritances.push(base);
        inheritances.forEach(item => recognizer.recognizeWith(item));

        return recognizer;
    }

}
