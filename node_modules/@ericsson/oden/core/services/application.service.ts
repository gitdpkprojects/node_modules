import { BROWSER } from './../constants/browser.constants';
import { EventEmitter, Injectable } from '@angular/core';
import { DOMHelper } from '../helpers/dom.helper';
import { TabViewService } from '../../components/tab-view/tab-view.service';
import { Router } from '@angular/router';
import { BreadcrumbItem } from '../models/breadcrumb.item';
import { BehaviorSubject, Observable } from 'rxjs';
import { ITaskShortcut } from '../interfaces/task-shortcut.interface';
import { PostMessageService } from './postmessage.service';
import { Subscription } from 'rxjs/Subscription';
import { UnSub } from '../classes';
import { NavigationHelper } from '../../core';

@Injectable()
@UnSub()
export class ApplicationService {
    get breadCrumb(): Array<BreadcrumbItem> {
        return this._breadCrumb;
    }
    set breadCrumb(crumb: Array<BreadcrumbItem>) {
        this._breadCrumb = crumb;
    }
    private _subscription: Subscription;
    private _breadCrumb: Array<BreadcrumbItem> = [];
    // @deprecated Use PostMessageService instead
    private _postMessageData: BehaviorSubject<ITaskShortcut> = new BehaviorSubject(null);
    // @deprecated Use PostMessageService instead
    public readonly postMessageData$: Observable<ITaskShortcut> = this._postMessageData.asObservable();

    /**
     * Should be listed to in CUS Application - To handle when the closing of an Application
     * @type {EventEmitter<any>}
     */
    onApplicationClose: EventEmitter<null> = new EventEmitter<null>();

    constructor(
        public _tabViewService: TabViewService,
        public _router: Router,
        private _postMessageService: PostMessageService
    ) {
        this._subscription = this._postMessageService.incomingMessage$.subscribe((data: ITaskShortcut) => {
            // TODO: Remove when PostMessageService is fully used
            this._postMessageData.next(data);
        });
        const userBrowser = this.getUsersBrowser();
        this.setBrowserCssClass(userBrowser);
    }

    /**
     * @deprecated Use PostMessageService instead
     * Replies to parent task (if any) with an arbitrary object
     * @param {Object} message
     */
    postmessageReply(message: Partial<ITaskShortcut> = {}): void {
        this._postMessageService.reply(message);
    }

    /**
     * Emits onApplicationClose.
     * This method should be executed when a user clicks on Close application in the app header
     */
    closeApplication(): void {
        this.onApplicationClose.emit();
    }

    /**
     * Navigates to a path, but uses the tabs-holder doing to get proper animations/behaviour
     * @param {string} path
     * @param {boolean} drillDown
     * @param {boolean} useScroll
     */
    navigateToPath(path: string, drillDown: boolean = true, useScroll: boolean = true): void {
        // See if there's a tab with this path. If so, navigate via changeTab()
        const tabLink = <HTMLElement>document.querySelector(`#tabs-holder [href='${path}']`);

        if (tabLink) {
            tabLink.click();
        } else {
            const index = this._tabViewService.currentIndex;
            this._tabViewService.changeTab(index);

            if (useScroll) {
                // Scroll to top of application when changing routes
                // When scroll is finished, do navigate!
                DOMHelper.scrollTo(document.querySelector('#cui-application'), 0, 200).then(() => {
                    if (drillDown) {
                        this._tabViewService.setDrillDownAnimation();
                    }
                    setTimeout(() => {
                        NavigationHelper.navigateToPath(path, this._router);
                    }, 1);
                });
            } else {
                if (drillDown) {
                    this._tabViewService.setDrillDownAnimation();
                }
                setTimeout(() => {
                    NavigationHelper.navigateToPath(path, this._router);
                }, 1);
            }
        }
    }

    /**
     * Detects the users browser
     */
    getUsersBrowser() {
        const ua = window.navigator.userAgent;

        // Firefox
        if (ua.toLowerCase().indexOf('firefox/') > 0) {
            return BROWSER.FIREFOX;
        }

        // IE 11
        if (ua.toLowerCase().indexOf('trident/') > 0) {
            return BROWSER.INTERNET_EXPLORER_11;
        }

        // Edge (IE 12+)
        if (ua.toLowerCase().indexOf('edge/') > 0) {
            return BROWSER.INTERNET_EXPLORER_EDGE;
        }

        // other browser
        return BROWSER.UNKNOWN;
    }

    /**
     * Sets the browser CSS class in body
     * @param browser - Which browser class to be set.
     */
    setBrowserCssClass(browser: BROWSER) {
        switch (browser) {
            case BROWSER.FIREFOX:
                window.document.body.classList.add('firefox');
                break;
            case BROWSER.INTERNET_EXPLORER_11:
                window.document.body.classList.add('ie11');
                window.document.body.classList.add('ie');
                break;
            case BROWSER.INTERNET_EXPLORER_EDGE:
                window.document.body.classList.add('edge');
                window.document.body.classList.add('ie');
                break;
            default:
                break;
        }
    }
}
