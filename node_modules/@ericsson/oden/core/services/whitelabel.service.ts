import { Injectable } from '@angular/core';
import { Observable, ReplaySubject, Subscription } from 'rxjs';
import { ColorHelper } from '../helpers/color.helper';
import { COLORWHITELABEL } from '../constants/color.whitelabel';
import { WhitelabelPropertyValueOption, WhitelabelType } from '../models/whitelabel-property-value.model';
import { UnSub } from '../classes/subscription.decorator';
@Injectable()
@UnSub()
export class WhitelabelService  {
    private subscriptions: Subscription[] = [];
    private _darkTheme: boolean = false;
    private _whitelabelingLoaded$: ReplaySubject<boolean> = new ReplaySubject<
        boolean
    >();
    _whitelabelingLoaded: Observable<
        boolean
    > = this._whitelabelingLoaded$.asObservable();

    constructor() {
        this.subscriptions.push(this._whitelabelingLoaded.subscribe());
    }

    setWhitelabeling(darkTheme: boolean): void {
        this._darkTheme = darkTheme;
        this._whitelabelingLoaded$.next(darkTheme);
    }
    // @TODO add caching
    getPropertyValue(searchString: string, options: WhitelabelPropertyValueOption = new WhitelabelPropertyValueOption()): string {

        let color = this._getCssProperty(searchString);
        if (!color) {
            const element = document.createElement('div');
            element.className = '${types}-${earchString}';
            element.style.display = 'none';
            document.body.appendChild(element);
            const selectedElement =  document.querySelector(`.${searchString}`) as HTMLDivElement;
            if (selectedElement) {
                color = getComputedStyle(selectedElement).getPropertyValue('color');
            }
            element.remove();
        }
        if ( color && options.toRgb && color.indexOf('#') > -1 ) {
            color = ColorHelper.hexToRGB(color);
        }
        if ( options.opacity && options.toRgb) {
            color = ColorHelper.setRgba(color, options.opacity);
        }
        return color;
    }

    getPropertyValues(searchObjects: string[], toRgb = true, opacity = 100) {
        return searchObjects.map((search) => this.getPropertyValue(search,
            {
                toRgb: toRgb,
                opacity: opacity
            }
        ));
    }

    getBrandColors(toRgb = true) {
        return this.getPropertyValues([COLORWHITELABEL.BRAND_PRIMARY, COLORWHITELABEL.BRAND_SECONDARY,
            COLORWHITELABEL.BRAND_THIRD, COLORWHITELABEL.BRAND_FORTH], toRgb);
    }

    private _getCssProperty(name: string) {
        const type = this._darkTheme ? WhitelabelType.DARK : WhitelabelType.LIGHT;
        const nameCss = `--${type}-${name}`;
        return getComputedStyle(document.body).getPropertyValue(nameCss).trim();
    }
}
