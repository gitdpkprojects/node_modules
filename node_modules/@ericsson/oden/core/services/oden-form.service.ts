
import { ReplaySubject, BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { AbstractControl } from '@angular/forms';

export const enum FOCUS_SOURCE {
    PARENT = 'PARENT',
    CHILD = 'CHILD',
    NONE = 'NONE'
}

export const enum INPUT_TYPE {
    RADIO_BUTTON,
    TEXT_FIELD,
    TEXTAREA,
    CHECKBOX,
    SWITCH,
    NONE
}

export type FocusType = [FOCUS_SOURCE, boolean]; // Boolean is true if child has focus

@Injectable()
export class OdenFormService {
    _isChild = new BehaviorSubject<boolean>(false);
    _isParent = new BehaviorSubject<boolean>(false);
    _inputType = new BehaviorSubject<INPUT_TYPE>(INPUT_TYPE.NONE);
    _switchOnText = new BehaviorSubject<string>('');
    _switchOffText = new BehaviorSubject<string>('');

    /**
     * Used for checking in radio/checkbox if child input/textare has focus,
     * if so the radio/checkbox shouldn't change state
     */
    _childHasFocus = new BehaviorSubject<boolean>(false);

    /**
     * Used for setting focus and changing state on all connected componentes.
     * Passes a FocusType object that containes data on where the request started.
     */
    private _onFocus$ = new ReplaySubject<FocusType>(1);
    _onFocus = this._onFocus$.asObservable();

    /**
     * Input id is passed from the related input field so that label and input will be connected through id and for.
     * In some cases such as checkbox with nested input the id will be passed as "" since click events is handle elsewhere.
     */
    private _inputId$ = new ReplaySubject<string>(1);
    _inputId = this._inputId$.asObservable();

    private _inputValue$ = new ReplaySubject<string | boolean>(1);
    _inputValue = this._inputValue$.asObservable();

    private _maxLength$ = new ReplaySubject<number>(1);
    _maxLength = this._maxLength$.asObservable();

    private _statusChanged$ = new ReplaySubject<AbstractControl>(1);
    _statusChanged = this._statusChanged$.asObservable();

    private _valueChanged$ = new ReplaySubject<AbstractControl>(1);
    _valueChanged = this._valueChanged$.asObservable();

    get _focusSource(): FOCUS_SOURCE {
        if (this._isChild.getValue()) {
            return FOCUS_SOURCE.CHILD;
        } else if (this._isParent.getValue()) {
            return FOCUS_SOURCE.PARENT;
        } else {
            return FOCUS_SOURCE.NONE;
        }
    }

    /**
     * Will set _onFocus and will also set _childHasFocus if it doesn't have it.
     * @param focusSource Optional, if not passed the function will set it
     */
    setFocus(focusSource?: FOCUS_SOURCE): void {
        this._onFocus$.next([
            !!focusSource ? focusSource : this._focusSource,
            this._childHasFocus.getValue()
        ]);
    }

    setInputId(inputId: string): void {
        this._inputId$.next(inputId);
    }

    setInputValue(inputValue: string | boolean): void {
        this._inputValue$.next(inputValue);
    }

    setMaxLength(maxLength: number): void {
        this._maxLength$.next(+maxLength);
    }

    /**
     * Called when status (validation) changes
     * @param {AbstractControl} control Control from the input.
     */
    setStatusChanged(control: AbstractControl): void {
        this._statusChanged$.next(control);
    }

    /**
     * Called when value changes
     * @param {AbstractControl} control Control from the input.
     */
    setValueChanged(control: AbstractControl): void {
        this._valueChanged$.next(control);
    }
}
