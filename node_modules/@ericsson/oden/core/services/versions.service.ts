import { Injectable, EventEmitter } from '@angular/core';
import { EntityVersion } from '../models/entity-version.model';
import { DateHelper } from '../helpers/date.helper';
import { TIME } from '../constants';
import { TranslateService } from '@ngx-translate/core';

@Injectable()
export class VersionsService {

    public onVersionsChange$: EventEmitter<Array<EntityVersion>> = new EventEmitter<Array<EntityVersion>>();
    public onVersionClick$: EventEmitter<EntityVersion> = new EventEmitter<EntityVersion>();
    private _versions: Array<EntityVersion>;

    constructor(private _translate: TranslateService) {}

    /**
     * When a version is selected
     * @param version
     */
    onVersionClick(version: EntityVersion): void {
        this.onVersionClick$.emit(version);
    }

    /**
     * Set Application versions. Emits onTitleChange event
     * @param value
     */
    set versions(value: Array<EntityVersion>) {
        this._versions = value;
        this.onVersionsChange$.emit(this._versions);
    }

    /**
     * Get the current Application versions
     * @returns {string}
     */
    get versions(): Array<EntityVersion> {
        return this._versions;
    }

    entityDateToString(validDate: Date | TIME): string | null {
        if (validDate instanceof Date) {
            return DateHelper.getStringFromDate(validDate, false);
        }
        if (validDate === TIME.BEGINNING_OF_TIME) {
            return this._translate.instant('ODEN.COMPONENTS.ENTITY_VERSION.BEGINNING_OF_TIME');
        }
        if (validDate === TIME.END_OF_TIME) {
            return this._translate.instant('ODEN.COMPONENTS.ENTITY_VERSION.END_OF_TIME');
        }
        return null;
    }

}
