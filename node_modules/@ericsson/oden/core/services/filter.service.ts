import { Injectable } from '@angular/core';

@Injectable()
export class FilterService {

    private _filterFunctions: Array<Array<any>> = [];
    private _activeFilters: Array<Array<any>> = [];

    constructor() { }

    /**
     * Get items after custom filters have been applied.
     * If custom filters exist, only retrieve items that appear as many times as # filters
     * @param {any} items - could be any kind of items. if no filters exists, we return this.
     * @param {any} id
     * @returns {any}
     */
    getItems(items: any, id: any): any {
        const displayItems = [];
        if (!this._activeFilters[id] || !this._activeFilters[id].length) {
            return items;
        }
        // first, delete obsolute filters
        let i = this._activeFilters[id].length;
        while (i--) {
            // if the filterFunction doesn't exist, delete it from active filters and move on
            if (!this._filterFunctions[id] || !this._filterFunctions[id][this._activeFilters[id][i]]) {
                this._activeFilters[id].splice(i, 1);
            }
        }
        // go through all filters and see if an item exist in each filter
        // if so - we should show it
        this._activeFilters[id].forEach((filter) => {
            const _items = items.filter((_item: any) => {
                return this._filterFunctions[id] && this._filterFunctions[id][filter] && this._filterFunctions[id][filter](_item);
            });
            _items.forEach((item) => {
                // have we already cleared this item? then continue with others
                if (displayItems.filter((_item) => _item === item).length > 0) {
                    return;
                }
                let count = 1;
                // count if the item is in all other filters
                this._activeFilters[id].filter((name) => name !== filter).forEach((_name: string) => {
                    items.filter((_item: any) => {
                        return this._filterFunctions[id] && this._filterFunctions[id][_name] && this._filterFunctions[id][_name](_item);
                    }).forEach((_item) => {
                        if (_item === item) {
                            count++;
                        }
                    });
                });
                // ... if so, put it in our item list
                if (count === this._activeFilters[id].length) {
                    displayItems.push(item);
                }
            });
        });
        return displayItems;
    }

    /**
     * Saves filter functions into an array with a id + filtername identifier
     * @param id
     * @param {string} filterName
     * @param {Function} filterFunction
     */
    setFilter(id: any, filterName: string, filterFunction: Function): void {
        if (!this._activeFilters[id]) {
            this._activeFilters[id] = [];
        }
        if (this._activeFilters[id].indexOf(filterName) < 0) {
            this._activeFilters[id].push(filterName);
        }
        if (this._filterFunctions[id] === undefined) {
            this._filterFunctions[id] = [];
        }
        if (this._filterFunctions[id][filterName] === undefined) {
            this._filterFunctions[id][filterName] = [];
        }
        this._filterFunctions[id][filterName] = filterFunction;
    }

    /**
     * Empties all filters
     */
    empty(): void {
        this._filterFunctions = [];
        this._activeFilters = [];
    }
}

