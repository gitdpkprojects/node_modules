import { Subscription } from 'rxjs/Subscription';

export function UnSub(timeout?: number): ClassDecorator {

    return function ( constructor: any ) {
        const ngOnDestroy = constructor.prototype.ngOnDestroy;

        constructor.prototype.ngOnDestroy = function ( ...args ) {
            if (timeout && timeout > -1) {
                setTimeout(() => {
                    if (this._subscriptions && Array.isArray(this._subscriptions)) {
                        this._subscriptions.forEach((sub: Subscription) => {
                            sub.unsubscribe();
                        });
                    }
                    if (this._subscription && this._subscription instanceof Subscription) {
                        this._subscription.unsubscribe();
                    }
                }, timeout);
            } else {
                if (this._subscriptions && Array.isArray(this._subscriptions)) {
                    this._subscriptions.forEach((sub: Subscription) => {
                        sub.unsubscribe();
                    });
                }
                if (this._subscription && this._subscription instanceof Subscription) {
                    this._subscription.unsubscribe();
                }
            }
            if (ngOnDestroy) {
                ngOnDestroy.apply(this, args);
            }
        };
    };
}
